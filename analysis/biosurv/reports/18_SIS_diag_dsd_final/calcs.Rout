R> library(glmulti)
R> library(glmnet)
R> library(energy)
R> library(RColorBrewer)
R> library(gplots)
R> library(ahaz)
R> library(survival)
R> library(NMF)
R> 
R> 
R> ######################################################################
R> # DATA
R> ######################################################################
R> message("Loading data")
R> load("../../data/07_data_for_SIS.rda")
R> source("../../src/08_SIS_common_funcs.R")
R> 
R> ######################################################################
R> # HIGH LEVEL PARAMETERS
R> ######################################################################
R> rownames(y.diag_dsd) = colnames(x.diag_dsd)
R> rownames(y.diag_rec) = colnames(x.diag_rec)
R> rownames(y.recr_dsd) = colnames(x.recr_dsd)
R> samps = samples[colnames(x),]
R> y_list = list(diag_dsd = y.diag_dsd)
R> tau = 0.72
R> theta1 = 0.05
R> x0 = 6.335
R> all_sigs = x.msigdb.merged
R> seed = 1234567890
R> nmf.nrun.rank = 50
R> nmf.nrun.fit = 500
R> nmf.rank = "auto"
R> nmf.rankrange = 2:10
R> nmf.rankrandcount = 10
R> sig.corr.threshold = 0.5
R> 
R> 
R> ######################################################################
R> # DERIVED VARIABLES
R> ######################################################################
R> message("Calculating derived variables")
R> xlin = 2^(x-x0)
R> xlin.scaled = (xlin - apply(xlin, 1, min)) / as.vector(diff(apply(xlin, 1, range)))
R> sigs = all_sigs[,colnames(x)]
R> 
R> 
R> ######################################################################
R> # PROBE SELECTION
R> ######################################################################
R> subset2.SIS.FAST = function(x, y, subset, ...)
+ {
+ 	y_sub = y[intersect(rownames(y), subset),,drop = FALSE]
+ 	x_sub = x[,rownames(y_sub)]
+ 	valid = apply(!is.na(x_sub), 2, all) & (!is.na(y_sub[,1])) & (!is.na(y_sub[,2]))
+ 	x_sub = x_sub[,valid,drop = FALSE]
+ 	y_sub = y_sub[valid,,drop = FALSE]
+ 	SIS.FAST(x_sub, y_sub, ...)
+ }
R> 
R> subset.SIS.FAST = function(x, ys, subset, ...)
+ {
+ 	sels = sapply(ys, function(y) subset2.SIS.FAST(x, y, subset, ...))
+ 	apply(sels, 1, any)
+ }
R> 
R> group.CPSS = function(x, ys, selfunc, tau, B = 50, ...)
+ {
+ 	n = ncol(x)
+ 	samp_ids = colnames(x)
+ 
+ 	samps = lapply(1:B, function(i) sort(sample(samp_ids, floor(n/2))))
+ 
+ 	Shats = sapply(1:(2*B), function(i) {
+ 		A = samps[[ceiling(i/2)]]
+ 		if (i %% 2 == 0)	{ A = setdiff(samp_ids, A) }
+ 
+ 		selfunc(x, ys, subset = A, ...)
+ 	})
+ 
+ 	Pihat = rowSums(Shats) / (2*B)
+ 	qs = colSums(Shats)
+ 
+ 	result = list(sel = Pihat > tau, Pihat = Pihat, samples = samps, qs = qs, qhat = mean(qs))
+ 	result
+ }
R> 
R> message("CPSS")
R> set.seed(seed)
R> cpss.sis = group.CPSS(x, y_list, subset.SIS.FAST, tau, 50, nsis = floor(theta1*nrow(x)))
R> x.sel = x[cpss.sis$sel,]
R> xlin.sel = xlin[cpss.sis$sel,]
R> xlin.scaled.sel = xlin.scaled[cpss.sis$sel,]
R> message(sprintf("%d/%d selected, observed theta = %.3f", sum(cpss.sis$sel), length(cpss.sis$sel), cpss.sis$qhat / length(cpss.sis$sel)))
R> 
R> 
R> ######################################################################
R> # RANK ESTIMATION
R> ######################################################################
R> message("NMF rank estimation")
R> nmf.options(track = FALSE, pbackend = "par", gc = 1, shared.memory = FALSE)
R> temp.nmf.rank = nmf(
+ 	x = xlin.scaled.sel, 
+ 	rank = nmf.rankrange, 
+ 	method = "snmf/l", 
+ 	seed = seed, nrun = nmf.nrun.rank, 
+ 	.options = list(verbose = 1, parallel = 32, keep.all = TRUE))
Compute NMF rank= 2  ... + measures ... OK
Compute NMF rank= 3  ... + measures ... OK
Compute NMF rank= 4  ... + measures ... OK
Compute NMF rank= 5  ... + measures ... OK
Compute NMF rank= 6  ... + measures ... OK
Compute NMF rank= 7  ... + measures ... OK
Compute NMF rank= 8  ... + measures ... OK
Compute NMF rank= 9  ... + measures ... OK
Compute NMF rank= 10  ... + measures ... OK
R> temp.nmf.rank.random = lapply(1:nmf.rankrandcount, function(i) {
+ 	message(i)
+ 	nmf(x = randomize(xlin.scaled.sel), 
+ 		rank = nmf.rankrange, 
+ 		method = "snmf/l", 
+ 		seed = seed, nrun = nmf.nrun.rank, 
+ 		.options = list(verbose = 1, parallel = 32, keep.all = TRUE))
+ 	})
Compute NMF rank= 2  ... + measures ... OK
Compute NMF rank= 3  ... + measures ... OK
Compute NMF rank= 4  ... + measures ... OK
Compute NMF rank= 5  ... + measures ... OK
Compute NMF rank= 6  ... + measures ... OK
Compute NMF rank= 7  ... + measures ... OK
Compute NMF rank= 8  ... + measures ... OK
Compute NMF rank= 9  ... + measures ... OK
Compute NMF rank= 10  ... + measures ... OK
Compute NMF rank= 2  ... + measures ... OK
Compute NMF rank= 3  ... + measures ... OK
Compute NMF rank= 4  ... + measures ... OK
Compute NMF rank= 5  ... + measures ... OK
Compute NMF rank= 6  ... + measures ... OK
Compute NMF rank= 7  ... + measures ... OK
Compute NMF rank= 8  ... + measures ... OK
Compute NMF rank= 9  ... + measures ... OK
Compute NMF rank= 10  ... + measures ... OK
Compute NMF rank= 2  ... + measures ... OK
Compute NMF rank= 3  ... + measures ... OK
Compute NMF rank= 4  ... + measures ... OK
Compute NMF rank= 5  ... + measures ... OK
Compute NMF rank= 6  ... + measures ... OK
Compute NMF rank= 7  ... + measures ... OK
Compute NMF rank= 8  ... + measures ... OK
Compute NMF rank= 9  ... + measures ... OK
Compute NMF rank= 10  ... + measures ... OK
Compute NMF rank= 2  ... + measures ... OK
Compute NMF rank= 3  ... + measures ... OK
Compute NMF rank= 4  ... + measures ... OK
Compute NMF rank= 5  ... + measures ... OK
Compute NMF rank= 6  ... + measures ... OK
Compute NMF rank= 7  ... + measures ... OK
Compute NMF rank= 8  ... + measures ... OK
Compute NMF rank= 9  ... + measures ... OK
Compute NMF rank= 10  ... + measures ... OK
Compute NMF rank= 2  ... + measures ... OK
Compute NMF rank= 3  ... + measures ... OK
Compute NMF rank= 4  ... + measures ... OK
Compute NMF rank= 5  ... + measures ... OK
Compute NMF rank= 6  ... + measures ... OK
Compute NMF rank= 7  ... + measures ... OK
Compute NMF rank= 8  ... + measures ... OK
Compute NMF rank= 9  ... + measures ... OK
Compute NMF rank= 10  ... + measures ... OK
Compute NMF rank= 2  ... + measures ... OK
Compute NMF rank= 3  ... + measures ... OK
Compute NMF rank= 4  ... + measures ... OK
Compute NMF rank= 5  ... + measures ... OK
Compute NMF rank= 6  ... + measures ... OK
Compute NMF rank= 7  ... + measures ... OK
Compute NMF rank= 8  ... + measures ... OK
Compute NMF rank= 9  ... + measures ... OK
Compute NMF rank= 10  ... + measures ... OK
Compute NMF rank= 2  ... + measures ... OK
Compute NMF rank= 3  ... + measures ... OK
Compute NMF rank= 4  ... + measures ... OK
Compute NMF rank= 5  ... + measures ... OK
Compute NMF rank= 6  ... + measures ... OK
Compute NMF rank= 7  ... + measures ... OK
Compute NMF rank= 8  ... + measures ... OK
Compute NMF rank= 9  ... + measures ... OK
Compute NMF rank= 10  ... + measures ... OK
Compute NMF rank= 2  ... + measures ... OK
Compute NMF rank= 3  ... + measures ... OK
Compute NMF rank= 4  ... + measures ... OK
Compute NMF rank= 5  ... + measures ... OK
Compute NMF rank= 6  ... + measures ... OK
Compute NMF rank= 7  ... + measures ... OK
Compute NMF rank= 8  ... + measures ... OK
Compute NMF rank= 9  ... + measures ... OK
Compute NMF rank= 10  ... + measures ... OK
Compute NMF rank= 2  ... + measures ... OK
Compute NMF rank= 3  ... + measures ... OK
Compute NMF rank= 4  ... + measures ... OK
Compute NMF rank= 5  ... + measures ... OK
Compute NMF rank= 6  ... + measures ... OK
Compute NMF rank= 7  ... + measures ... OK
Compute NMF rank= 8  ... + measures ... OK
Compute NMF rank= 9  ... + measures ... OK
Compute NMF rank= 10  ... + measures ... OK
Compute NMF rank= 2  ... + measures ... OK
Compute NMF rank= 3  ... + measures ... OK
Compute NMF rank= 4  ... + measures ... OK
Compute NMF rank= 5  ... + measures ... OK
Compute NMF rank= 6  ... + measures ... OK
Compute NMF rank= 7  ... + measures ... OK
Compute NMF rank= 8  ... + measures ... OK
Compute NMF rank= 9  ... + measures ... OK
Compute NMF rank= 10  ... + measures ... OK
R> 
R> save.image("temp.rda")
R> 
R> message("Automatic rank calculation")
R> temp.resids = sapply(temp.nmf.rank$fit, function(f) sapply(f, residuals))
R> temp.resids_rel = t(t(temp.resids) / apply(temp.resids, 2, min))
R> temp.resids_scaled = t((t(temp.resids) - apply(temp.resids, 2, min)) / (apply(temp.resids, 2, max) - apply(temp.resids, 2, min)))
R> temp.orig_resids = sapply(temp.nmf.rank$fit, residuals)
R> temp.perm_resids = sapply(temp.nmf.rank.random, function(rep) sapply(rep$fit, residuals))
R> temp.orig_resids.delta = diff(temp.orig_resids)
R> temp.perm_resids.delta = apply(temp.perm_resids, 2, diff)
R> temp.perm_resids.delta.mean = rowMeans(temp.perm_resids.delta)
R> temp.perm_resids.delta.sd = apply(temp.perm_resids.delta, 1, sd)
R> temp.perm_resids.delta.threshold = temp.perm_resids.delta.mean - 2*temp.perm_resids.delta.sd
R> temp.perm_resids.delta.above_threshold = temp.orig_resids.delta >= temp.perm_resids.delta.threshold
R> if (all(temp.perm_resids.delta.above_threshold))			{ nmf.rank.auto = min(nmf.rankrange) 
+ } else if (all(!(temp.perm_resids.delta.above_threshold)))	{ nmf.rank.auto = max(nmf.rankrange)
+ } else 														{ nmf.rank.auto = min(nmf.rankrange[temp.perm_resids.delta.above_threshold]) }
R> nmf.rank.wasauto = FALSE
R> if (nmf.rank == "auto")
+ {
+ 	nmf.rank = nmf.rank.auto
+ 	nmf.rank.wasauto = TRUE
+ }
R> 
R> 
R> ######################################################################
R> # FACTORIZATION
R> ######################################################################
R> xlin.scaled.sel.nmf = nmf(
+ 	x = xlin.scaled.sel, 
+ 	rank = nmf.rank, 
+ 	method = "snmf/l", 
+ 	seed = seed, nrun = nmf.nrun.fit, 
+ 	.options = list(verbose = 0, parallel = 32, keep.all = TRUE))
R> 
R> save.image("temp2.rda")
R> 
R> coefs = t(coef(xlin.scaled.sel.nmf))
R> colnames(coefs) = paste("mg", 1:ncol(coefs), sep = ".")
R> rownames(coefs) = colnames(xlin.scaled.sel)
R> coefs.diag_dsd = coefs[rownames(y.diag_dsd),]
R> coefs.diag_rec = coefs[rownames(y.diag_rec),]
R> coefs.recr_dsd = coefs[rownames(y.recr_dsd),]
R> 
R> 
R> ######################################################################
R> # EXPRESSION CORRELATION
R> ######################################################################
R> message("Correlation")
R> x.sel.kcor = cor(t(x.sel), method = "kendall")
R> x.sel.dcor = sapply(1:(nrow(x.sel)-1), function(i) c(rep(NA, i), sapply((i+1):nrow(x.sel), function(j) dcor(x.sel[i,], x.sel[j,]))))
R> x.sel.dcor = cbind(x.sel.dcor, NA)
R> diag(x.sel.dcor) = 1
R> x.sel.dcor[upper.tri(x.sel.dcor)] = t(x.sel.dcor)[upper.tri(x.sel.dcor)]
R> 
R> 
R> ######################################################################
R> # SIGNATURE-METAGENE CORRELATION
R> ######################################################################
R> xlin.scaled.sel.nmf.msigdb.corr = cor(coefs, t(sigs), method = "kendall")
R> 
R> 
R> ######################################################################
R> # ALL-SUBSETS REGRESSION
R> ######################################################################
R> diag_dsd.asreg.data = as.data.frame(cbind(time = y.diag_dsd[,1], event = y.diag_dsd[,2], coefs.diag_dsd))
R> diag_rec.asreg.data = as.data.frame(cbind(time = y.diag_rec[,1], event = y.diag_rec[,2], coefs.diag_rec))
R> recr_dsd.asreg.data = as.data.frame(cbind(time = y.recr_dsd[,1], event = y.recr_dsd[,2], coefs.recr_dsd))
R> nobs.coxph = function(obj)	{ obj$nevent }
R> diag_dsd.asreg.result = glmulti(Surv(time, event) ~ ., data = diag_dsd.asreg.data, fitfunction = "coxph", level = 1, marginality = TRUE, crit = bic, plotty = FALSE, report = FALSE)
R> diag_rec.asreg.result = glmulti(Surv(time, event) ~ ., data = diag_rec.asreg.data, fitfunction = "coxph", level = 1, marginality = TRUE, crit = bic, plotty = FALSE, report = FALSE)
R> recr_dsd.asreg.result = glmulti(Surv(time, event) ~ ., data = recr_dsd.asreg.data, fitfunction = "coxph", level = 1, marginality = TRUE, crit = bic, plotty = FALSE, report = FALSE)
R> rm(nobs.coxph)
R> 
R> 
R> ######################################################################
R> # LASSO
R> ######################################################################
R> diag_dsd.glmnet.fit.cv = cv.glmnet(x = coefs.diag_dsd, y = cbind(time = y.diag_dsd[,1], status = y.diag_dsd[,2]*1), family = "cox", nfolds = 10)
R> diag_rec.glmnet.fit.cv = cv.glmnet(x = coefs.diag_rec, y = cbind(time = y.diag_rec[,1], status = y.diag_rec[,2]*1), family = "cox", nfolds = 10)
R> recr_dsd.glmnet.fit.cv = cv.glmnet(x = coefs.recr_dsd, y = cbind(time = y.recr_dsd[,1], status = y.recr_dsd[,2]*1), family = "cox", nfolds = 10)
R> diag_dsd.glmnet.coef.1se = coef(diag_dsd.glmnet.fit.cv$glmnet.fit, s = diag_dsd.glmnet.fit.cv$lambda.1se)
R> diag_dsd.glmnet.coef.min = coef(diag_dsd.glmnet.fit.cv$glmnet.fit, s = diag_dsd.glmnet.fit.cv$lambda.min)
R> diag_rec.glmnet.coef.1se = coef(diag_rec.glmnet.fit.cv$glmnet.fit, s = diag_rec.glmnet.fit.cv$lambda.1se)
R> diag_rec.glmnet.coef.min = coef(diag_rec.glmnet.fit.cv$glmnet.fit, s = diag_rec.glmnet.fit.cv$lambda.min)
R> recr_dsd.glmnet.coef.1se = coef(recr_dsd.glmnet.fit.cv$glmnet.fit, s = recr_dsd.glmnet.fit.cv$lambda.1se)
R> recr_dsd.glmnet.coef.min = coef(recr_dsd.glmnet.fit.cv$glmnet.fit, s = recr_dsd.glmnet.fit.cv$lambda.min)
R> 
R> 
R> ######################################################################
R> # ADAPTIVE LASSO
R> ######################################################################
R> diag_dsd.adaglmnet.weights = 1/abs(coef(coxph(y.diag_dsd ~ coefs.diag_dsd)))
R> diag_rec.adaglmnet.weights = 1/abs(coef(coxph(y.diag_rec ~ coefs.diag_rec)))
R> recr_dsd.adaglmnet.weights = 1/abs(coef(coxph(y.recr_dsd ~ coefs.recr_dsd)))
R> diag_dsd.adaglmnet.x = t(t(coefs.diag_dsd) * diag_dsd.adaglmnet.weights)
R> diag_rec.adaglmnet.x = t(t(coefs.diag_rec) * diag_rec.adaglmnet.weights)
R> recr_dsd.adaglmnet.x = t(t(coefs.recr_dsd) * recr_dsd.adaglmnet.weights)
R> diag_dsd.adaglmnet.fit.cv = cv.glmnet(x = diag_dsd.adaglmnet.x, y = cbind(time = y.diag_dsd[,1], status = y.diag_dsd[,2]*1), family = "cox", nfolds = 10, standardize = FALSE)
R> diag_rec.adaglmnet.fit.cv = cv.glmnet(x = diag_rec.adaglmnet.x, y = cbind(time = y.diag_rec[,1], status = y.diag_rec[,2]*1), family = "cox", nfolds = 10, standardize = FALSE)
R> recr_dsd.adaglmnet.fit.cv = cv.glmnet(x = recr_dsd.adaglmnet.x, y = cbind(time = y.recr_dsd[,1], status = y.recr_dsd[,2]*1), family = "cox", nfolds = 10, standardize = FALSE)
R> diag_dsd.adaglmnet.coef.1se = coef(diag_dsd.adaglmnet.fit.cv$glmnet.fit, s = diag_dsd.adaglmnet.fit.cv$lambda.1se)
R> diag_dsd.adaglmnet.coef.min = coef(diag_dsd.adaglmnet.fit.cv$glmnet.fit, s = diag_dsd.adaglmnet.fit.cv$lambda.min)
R> diag_rec.adaglmnet.coef.1se = coef(diag_rec.adaglmnet.fit.cv$glmnet.fit, s = diag_rec.adaglmnet.fit.cv$lambda.1se)
R> diag_rec.adaglmnet.coef.min = coef(diag_rec.adaglmnet.fit.cv$glmnet.fit, s = diag_rec.adaglmnet.fit.cv$lambda.min)
R> recr_dsd.adaglmnet.coef.1se = coef(recr_dsd.adaglmnet.fit.cv$glmnet.fit, s = recr_dsd.adaglmnet.fit.cv$lambda.1se)
R> recr_dsd.adaglmnet.coef.min = coef(recr_dsd.adaglmnet.fit.cv$glmnet.fit, s = recr_dsd.adaglmnet.fit.cv$lambda.min)
R> 
R> 
R> ######################################################################
R> # META-PCNA SCORING
R> ######################################################################
R> metapcna.sig = c("ADAMTS13", "ALAS2", "APOBEC3B", "ARID3A", "ASF1B", "AURKA", 
+ 	"AURKB", "BIRC5", "BPGM", "BUB1B", "BZRPL1", "C21orf45", "CCNA2", "CCNB1", 
+ 	"CCNB2", "CDC2", "CDC20", "CDC45L", "CDCA3", "CDCA4", "CDCA8", "CDKN3", 
+ 	"CDT1", "CENPA", "CHAF1A", "CKLF", "CKS1B", "CKS2", "DDX39", 
+ 	"DKFZp762E1312", "DTL", "EPB42", "ERAF", "ESPL1", "FBXO5", "FBXO7", 
+ 	"FECH", "FEN1", "FOXM1", "GATA1", "GINS1", "GINS2", "GTPBP2", "GTSE1", 
+ 	"GYPA", "GYPB", "H3F3A", "HMBS", "HMGB2", "HMGN2", "KEL", "KIAA0101", 
+ 	"KIF20A", "KIF22", "KIF2C", "KIF4A", "KLF1", "KLF15", "LBR", "LIG1", 
+ 	"LMNB1", "LOC146909", "LSM6", "LYL1", "MAD2L1", "MCM2", "MCM3", "MCM4", 
+ 	"MCM5", "MCM6", "MCM7", "MELK", "MICB", "MKI67", "MLF1IP", "NCAPD2", 
+ 	"NCAPD3", "NCAPG2", "NFE2", "NUDT1", "NUP210", "NUP37", "NUSAP1", "OIP5", 
+ 	"ORC6L", "PCNA", "PF4", "PGD", "PLEK", "POLE2", "PPBP", "PPIH", "PRC1", 
+ 	"PSMD9", "PTTG1", "RACGAP1", "RAD51AP1", "RFC3", "RFC4", "RFWD3", "RHAG", 
+ 	"RHCE", "RHD", "RPA3", "RPIA", "RPP30", "RRM2", "SFRS2", "SHCBP1", "SMC4", 
+ 	"SNF8", "SNRPB", "SNRPD1", "SPTA1", "TACC3", "TAL1", "TCF3", "TFDP1", 
+ 	"TIMELESS", "TOP2A", "TPX2", "TRIM10", "TRIM58", "TRMT5", "TROAP", "TYMS", 
+ 	"UBE2C", "VRK1", "WHSC1", "ZWINT")
R> metapcna.scores = apply(x[rownames(x) %in% metapcna.sig,], 2, median)
R> 
R> session_info = sessionInfo()
R> save.image("image.rda")
R> 
R> 
