\documentclass{article}
\usepackage{geometry}
\usepackage{amsmath}
\usepackage{lscape}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}

\begin{document}

<<setup, include=FALSE>>=
library(knitr)
opts_chunk$set(
	fig.align = 'center', dev = 'pdf', fig.width = 6, fig.height = 6, dev.args = list(pointsize = 8), 
	tidy = TRUE, width.cutoff = 60, formatR.arrow = TRUE, cache = FALSE)
opts_knit$set(progress = TRUE, verbose = TRUE)
@

\title{SIS NMF Final: Diagnosis to DSD}
\maketitle

\section{Preparation}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% LIBRARIES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<libs-load>>=
options(java.parameters = "-Xmx4G")

library(survival)
library(energy)
library(NMF)
library(nnls)

library(glmulti)
library(glmnet)

library(RColorBrewer)
library(gplots)

library(xtable)
library(stargazer)

load("image.rda")
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% COHORT CHARACTERISTICS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Cohort characteristics}
<<cohort-characteristics>>=
cpvs.diag_dsd$Path.TumourLocation[cpvs.diag_dsd$Path.TumourLocation == ""] = NA
cpvs.diag_dsd$Path.Nodes.Regional.Involved.Fraction = cpvs.diag_dsd$Path.Nodes.Regional.Involved / cpvs.diag_dsd$Path.Nodes.Regional.Total
cpvs.diag_dsd$Treat.Surgery.ExcisionStatus.Coarse = ordered(ifelse(cpvs.diag_dsd$Treat.Surgery.ExcisionStatus == "R0", "Clear", "Involved"), levels = c("Clear", "Involved"))
cpvs.diag_dsd$Path.Grade.Coarse = ordered(ifelse(cpvs.diag_dsd$Path.Grade %in% c("1", "2"), "1or2", "3or4"), levels = c("1or2", "3or4"))
cpvs.diag_dsd$Path.TumourLocation.Coarse = factor(ifelse(cpvs.diag_dsd$Path.TumourLocation %in% c("Head", "Head (Uncinate)"), "Head", "Other"))

summary(cpvs.diag_dsd)
sort(apply(is.na(cpvs.diag_dsd), 2, sum))
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CONVENTIONAL PROGNOSTIC MODEL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Conventional prognostic model}
Transform the covariates by median centering where required.
<<cox-covariate-prep>>=
print(median(cpvs.diag_dsd$History.Diagnosis.AgeAtYears, na.rm = TRUE))
cpvs.diag_dsd$History.Diagnosis.AgeAtYears.MedCent = cpvs.diag_dsd$History.Diagnosis.AgeAtYears - median(cpvs.diag_dsd$History.Diagnosis.AgeAtYears, na.rm = TRUE)
print(median(cpvs.diag_dsd$Path.TumourSizeMm, na.rm = TRUE))
cpvs.diag_dsd$Path.TumourSizeMm.MedCent = cpvs.diag_dsd$Path.TumourSizeMm - median(cpvs.diag_dsd$Path.TumourSizeMm, na.rm = TRUE)
@

\subsection{Covariate forms: deviance residuals}
<<cox-covariate-forms>>=
#	History.Smoking.PackYears + 		# Remove as it's mostly missing
temp = coxph(Surv(Surv.EventTimeFromDiag.DSDeath, Surv.Event.DSDeath) ~ 
	Patient.Gender + 
	History.Diagnosis.AgeAtYears.MedCent + 
	Treat.Surgery.ExcisionStatus.Coarse +
	Path.Grade.Coarse + 
	Path.TumourLocation.Coarse + 
	Path.TumourSizeMm.MedCent + 
	Path.Invasion.PN + 
	Path.Invasion.VS + 
	Path.Nodes.Regional.Involved.Fraction + 
	Staging.pN, data = cpvs.diag_dsd)

# scatter.smooth(cpvs.diag_dsd[names(resid(temp, "deviance")),]$History.Smoking.PackYears, resid(temp, "deviance"), xlab = "History.Smoking.PackYears", ylab = "Deviance residual", main = "Full fit")
scatter.smooth(cpvs.diag_dsd[names(resid(temp, "deviance")),]$History.Diagnosis.AgeAtYears.MedCent, resid(temp, "deviance"), xlab = "History.Diagnosis.AgeAtYears.MedCent", ylab = "Deviance residual", main = "Full fit")
scatter.smooth(cpvs.diag_dsd[names(resid(temp, "deviance")),]$Path.TumourSizeMm.MedCent, resid(temp, "deviance"), xlab = "Path.TumourSizeMm.MedCent", ylab = "Deviance residual", main = "Full fit")
scatter.smooth(cpvs.diag_dsd[names(resid(temp, "deviance")),]$Path.Nodes.Regional.Involved.Fraction, resid(temp, "deviance"), xlab = "Path.Nodes.Regional.Involved.Fraction", ylab = "Deviance residual", main = "Full fit")
temp = coxph(Surv(Surv.EventTimeFromDiag.DSDeath, Surv.Event.DSDeath) ~ History.Smoking.PackYears, data = cpvs.diag_dsd)
scatter.smooth(cpvs.diag_dsd[names(resid(temp, "deviance")),]$History.Smoking.PackYears, resid(temp, "deviance"), xlab = "History.Smoking.PackYears", ylab = "Deviance residual", main = "Single variable fit: Pack Years")
temp = coxph(Surv(Surv.EventTimeFromDiag.DSDeath, Surv.Event.DSDeath) ~ History.Diagnosis.AgeAtYears.MedCent, data = cpvs.diag_dsd)
scatter.smooth(cpvs.diag_dsd[names(resid(temp, "deviance")),]$History.Diagnosis.AgeAtYears.MedCent, resid(temp, "deviance"), xlab = "History.Diagnosis.AgeAtYears.MedCent", ylab = "Deviance residual", main = "Single variable fit: Age at diagnosis")
temp = coxph(Surv(Surv.EventTimeFromDiag.DSDeath, Surv.Event.DSDeath) ~ Path.TumourSizeMm.MedCent, data = cpvs.diag_dsd)
scatter.smooth(cpvs.diag_dsd[names(resid(temp, "deviance")),]$Path.TumourSizeMm.MedCent, resid(temp, "deviance"), xlab = "Path.TumourSizeMm.MedCent", ylab = "Deviance residual", main = "Single variable fit: Tumour size")
temp = coxph(Surv(Surv.EventTimeFromDiag.DSDeath, Surv.Event.DSDeath) ~ Path.Nodes.Regional.Involved.Fraction, data = cpvs.diag_dsd)
scatter.smooth(cpvs.diag_dsd[names(resid(temp, "deviance")),]$Path.Nodes.Regional.Involved.Fraction, resid(temp, "deviance"), xlab = "Path.Nodes.Regional.Involved.Fraction", ylab = "Deviance residual", main = "Single variable fit: Node involvement fraction")
@

Evidence of nonlinearity for age of diagnosis -- very young diagnosis, or very old, is hazardous.  This makes sense.  Some indication of nonlinearity for size but it's weak.  All other predictor residuals are consistent with a linear effect.  Refit the model taking this into account.

<<cpv-model-withsmoking>>=
fit.cpv.withsmoking = coxph(Surv(Surv.EventTimeFromDiag.DSDeath, Surv.Event.DSDeath) ~ 
	Patient.Gender + 
	pspline(History.Diagnosis.AgeAtYears.MedCent, 3) + 
	Path.Grade.Coarse + 
	Path.TumourLocation.Coarse + 
	pspline(Path.TumourSizeMm.MedCent, 3) + 
	Path.Invasion.PN + 
	Path.Invasion.VS + 
	Path.Nodes.Regional.Involved.Fraction + 
	Staging.pN +
	History.Smoking.PackYears + 
	Treat.Surgery.ExcisionStatus.Coarse,
	data = cpvs.diag_dsd)
summary(fit.cpv.withsmoking)
anova(fit.cpv.withsmoking)
@

The problem with the above is that smoking status is poorly known, but it nonetheless is a significant predictor.  It may be possible to impute smoking from mutation profiles, but that would be complex and uncertain.  It's certainly unlikely to be usefully imputed just from the other CPVs.  So fit a working model that does not include smoking status, but keep in mind this omission when making conclusions.

<<cpv-model-withoutsmoking>>=
fit.cpv.withoutsmoking = coxph(Surv(Surv.EventTimeFromDiag.DSDeath, Surv.Event.DSDeath) ~ 
	Patient.Gender + 
	pspline(History.Diagnosis.AgeAtYears.MedCent, 3) + 
	Path.Grade.Coarse + 
	Path.TumourLocation.Coarse + 
	pspline(Path.TumourSizeMm.MedCent, 3) + 
	Path.Invasion.PN + 
	Path.Invasion.VS + 
	Path.Nodes.Regional.Involved.Fraction + 
	Staging.pN +
	Treat.Surgery.ExcisionStatus.Coarse,
	data = cpvs.diag_dsd)
summary(fit.cpv.withoutsmoking)
anova(fit.cpv.withoutsmoking)
@

<<cpv-model-print-withoutsmoking-terms>>=
termplot(fit.cpv.withoutsmoking, rug = TRUE, se = TRUE)
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% MOLECULAR SIGNATURE IDENTIFICATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Probe selection}
<<probe-sel>>=
table(cpss.sis$sel)
mean(cpss.sis$sel)
@


\section{Expression correlation}
<<correl-plots>>=
corPlot(x.sel.kcor, main = "Correlation Clusters of CPSS-SIS-FAST Probes\nKendall log", useRaster = FALSE)
corPlot(abs(x.sel.kcor), zlim = c(0, 1), pal = "GnBu", main = "Correlation Clusters of CPSS-SIS-FAST Probes\nAbsolute Kendall log", useRaster = FALSE)
corPlot(x.sel.dcor, zlim = c(0, 1), pal = "GnBu", main = "Correlation Clusters of CPSS-SIS-FAST Probes\ndcor log", useRaster = FALSE)
@


\section{Factorization}
<<nmf-rank-plots>>=
plot(nmf.runs.rank, nmf.runs.rank.random[[1]])
# for (i in nmf.runs.rank$fit)
# { 
# 	consensusmap(i)
# }
plot(nmf.rankrange[-1], -temp.orig_resids.delta,
	type = "o", col = "black", pch = 21, ylim = range(-c(temp.orig_resids.delta, temp.perm_resids.delta.mean)),
	xlab = "Factorization Rank Added", ylab = "Improvement in Total Residual Error")
lines(nmf.rankrange[-1], -temp.perm_resids.delta.mean, col = "red", type = "o", pch = 21, lwd = 1)
for (i in 1:ncol(temp.perm_resids))
{
	lines(nmf.rankrange[-1], -temp.perm_resids.delta[,i], type = "o", col = rgb(1, 0, 0, 0.25))
}
lines(nmf.rankrange[-1], -temp.perm_resids.delta.threshold, col = "red", lty = "dotted")
if (nmf.rank.wasauto == TRUE)
{
	temp.col = "green"
} else {
	temp.col = "blue"
}
abline(v = nmf.rank, col = temp.col, lwd = 2)
legend("topright", legend = c("Original data", "Permuted data", sprintf("Selected rank (%s)", ifelse(nmf.rank.wasauto == TRUE, "auto", "fixed"))), col = c("black", "red", temp.col),  lty = "solid", pch = 21, inset = 0.05)
@

\subsection{Fit}
<<nmf-plots>>=
consensusmap(nmf.final)
basismap(nmf.final)
coefmap(nmf.final)
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIGNATURE ESTIMATION AND COMPARISON
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<coef-calc>>=
coefs.diag_dsd = apply(xlin.diag_dsd.sel, 2, function(xcol) nnls(basis(nmf.final), xcol)$x)
coefs.diag_rec = apply(xlin.diag_rec.sel, 2, function(xcol) nnls(basis(nmf.final), xcol)$x)
coefs.recr_dsd = apply(xlin.recr_dsd.sel, 2, function(xcol) nnls(basis(nmf.final), xcol)$x)
coefs.pdac_au = apply(xlin.pdac_au.sel, 2, function(xcol) nnls(basis(nmf.final), xcol)$x)
@


<<metagene-pairs>>=
temp.pred.pairs = t(rbind(coefs.pdac_au, metapcna.scores[colnames(coefs.pdac_au)]))
colnames(temp.pred.pairs) = paste("mg", 1:ncol(temp.pred.pairs), sep = ".")
colnames(temp.pred.pairs)[ncol(temp.pred.pairs)] = "PCNA"
temp.pred.pairs = cbind(temp.pred.pairs, qpure = samps.pdac_au$purity_qpure, pkyrs = cpvs.pdac_au$History.Smoking.PackYears)
pairs(temp.pred.pairs, pch = 16, cex = 1, col = ifelse(rownames(temp.pred.pairs) %in% colnames(xlin.diag_dsd.sel), rgb(0, 0, 0, 0.5), rgb(1, 0, 1, 0.5)))
temp.pred.pairs.rescaled = t((t(temp.pred.pairs) - apply(temp.pred.pairs, 2, min, na.rm = TRUE)) / (apply(temp.pred.pairs, 2, function(x) diff(range(x, na.rm = TRUE)))))
heatmap.2(temp.pred.pairs.rescaled, trace = "none", scale = "none", col = grey(seq(0, 1, 0.01)))
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIGNATURE PROGNOSTIC PERFORMANCE: TRAINING SET, ALONE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Prediction on training set}
\paragraph{MTC P-values}
<<nmf-pvals>>=
nmf.final.cpv.pvals = data.frame(
	surv.diag_rec.p = apply(coefs.diag_rec, 1, function(xc) pchisq(2*diff(coxph(y.diag_rec ~ xc)$loglik), df = 1, lower.tail = FALSE)),
	surv.diag_rec.c = apply(coefs.diag_rec, 1, function(xc) coef(coxph(y.diag_rec ~ xc))),
	surv.diag_dsd.p = apply(coefs.diag_dsd, 1, function(xc) pchisq(2*diff(coxph(y.diag_dsd ~ xc)$loglik), df = 1, lower.tail = FALSE)),
	surv.diag_dsd.c = apply(coefs.diag_dsd, 1, function(xc) coef(coxph(y.diag_dsd ~ xc))),
	surv.recr_dsd.p = apply(coefs.recr_dsd, 1, function(xc) pchisq(2*diff(coxph(y.recr_dsd ~ xc)$loglik), df = 1, lower.tail = FALSE)),
	surv.recr_dsd.c = apply(coefs.recr_dsd, 1, function(xc) coef(coxph(y.recr_dsd ~ xc))),
	pure.p = apply(coefs.pdac_au, 1, function(xc) cor.test(samps.pdac_au$purity_qpure, xc, method = "kendall")$p.value),
	pure.s = apply(coefs.pdac_au, 1, function(xc) cor.test(samps.pdac_au$purity_qpure, xc, method = "kendall")$statistic)
)
temp.pvals = as.matrix(nmf.final.cpv.pvals[,grepl("\\.p$", colnames(nmf.final.cpv.pvals))])
temp.pvals.FWER = matrix(p.adjust(as.vector(temp.pvals), "holm"), nrow = nrow(temp.pvals))
colnames(temp.pvals.FWER) = paste(colnames(temp.pvals), "Holm", sep = ".")
temp.pvals.BY = matrix(p.adjust(as.vector(temp.pvals), "BY"), nrow = nrow(temp.pvals))
colnames(temp.pvals.BY) = paste(colnames(temp.pvals), "BY", sep = ".")
nmf.final.cpv.pvals = cbind(nmf.final.cpv.pvals, temp.pvals.FWER, temp.pvals.BY)
nmf.final.cpv.pvals = nmf.final.cpv.pvals[,order(colnames(nmf.final.cpv.pvals))]
@

<<nmf-pvals-xtable-all, echo=FALSE, results='asis'>>=
print(xtable(nmf.final.cpv.pvals, caption = "Resubstitution prediction, all tests"), scalebox = 0.4)
@

<<nmf-pvals-xtable-holm, echo=FALSE, results='asis'>>=
print(xtable(nmf.final.cpv.pvals[,!grepl("\\.(BY|p)$", colnames(nmf.final.cpv.pvals))], caption = "Resubstitution prediction, Holm MTC only"), scalebox = 0.7)
@

% \paragraph{All-subsets regression}
% <<nmf-metagene-diagdsd-glmulti>>=
% print(asreg.result)
% coef(asreg.result)
% summary(asreg.result@objects[[1]])
% @
% <<nmf-metagene-diagdsd-glmulti-plots>>=
% plot(asreg.result, type = "p")
% plot(asreg.result, type = "s")
% plot(asreg.result, type = "w")
% @

\paragraph{LASSO}
<<nmf-metagene-diagdsd-glmnet>>=
glmnet.coef.1se
glmnet.coef.min
@
<<nmf-metagene-diagdsd-glmnet-plots>>=
plot(glmnet.fit.cv)
plot(glmnet.fit.cv$glmnet.fit, label = TRUE)
abline(v = sum(abs(glmnet.coef.1se)))
abline(v = sum(abs(glmnet.coef.min)))
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIGNATURE PROGNOSTIC PERFORMANCE: TRAINING SET, WITH CPVS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<cpvsig-model-withoutsmoking-resub>>=
fit.cpvsig.withoutsmoking.resub = coxph(Surv(Surv.EventTimeFromDiag.DSDeath, Surv.Event.DSDeath) ~ 
	Patient.Gender + 
	pspline(History.Diagnosis.AgeAtYears.MedCent, 3) + 
	Path.Grade.Coarse + 
	Path.TumourLocation.Coarse + 
	pspline(Path.TumourSizeMm.MedCent, 3) + 
	Path.Invasion.PN + 
	Path.Invasion.VS + 
	Path.Nodes.Regional.Involved.Fraction + 
	Staging.pN +
	Treat.Surgery.ExcisionStatus.Coarse + 
	t(coefs.diag_dsd),
	data = cpvs.diag_dsd)
anova(fit.cpv.withoutsmoking, fit.cpvsig.withoutsmoking.resub)
@

<<cpvsig-model-withsmoking-resub>>=
fit.cpvsig.withsmoking.resub = coxph(Surv(Surv.EventTimeFromDiag.DSDeath, Surv.Event.DSDeath) ~ 
	Patient.Gender + 
	pspline(History.Diagnosis.AgeAtYears.MedCent, 3) + 
	Path.Grade.Coarse + 
	Path.TumourLocation.Coarse + 
	pspline(Path.TumourSizeMm.MedCent, 3) + 
	Path.Invasion.PN + 
	Path.Invasion.VS + 
	Path.Nodes.Regional.Involved.Fraction + 
	Staging.pN +
	History.Smoking.PackYears + 
	Treat.Surgery.ExcisionStatus.Coarse +
	t(coefs.diag_dsd),
	data = cpvs.diag_dsd)
anova(fit.cpv.withsmoking, fit.cpvsig.withsmoking.resub)
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIGNATURE PROGNOSTIC PERFORMANCE: CROSS-VALIDATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Prediction on 10-fold CV}
<<cv-sig-load>>=
cv_preds = readRDS("../../analysis/14_SIS_NMF_CV_results.rds")
@

<<cv-sig-test-alone>>=
apply(cv_preds[,colnames(xlin.diag_dsd.sel)], 1, function(p1) coxph(y.diag_dsd ~ p1))
@

<<cpvsig-model-withoutsmoking-cv, comment=FALSE>>=
# fit.cpvsig.withoutsmoking.cv_BSA = coxph(Surv(Surv.EventTimeFromDiag.DSDeath, Surv.Event.DSDeath) ~ 
# 	Patient.Gender + 
# 	pspline(History.Diagnosis.AgeAtYears.MedCent, 3) + 
# 	Path.Grade.Coarse + 
# 	Path.TumourLocation.Coarse + 
# 	pspline(Path.TumourSizeMm.MedCent, 3) + 
# 	Path.Invasion.PN + 
# 	Path.Invasion.VS + 
# 	Path.Nodes.Regional.Involved.Fraction + 
# 	Staging.pN +
# 	Treat.Surgery.ExcisionStatus.Coarse + 
# 	cv_preds["bs.average",],
# 	data = cpvs.diag_dsd)
fit.cpvsig.withoutsmoking.cv_L1SE = coxph(Surv(Surv.EventTimeFromDiag.DSDeath, Surv.Event.DSDeath) ~ 
	Patient.Gender + 
	pspline(History.Diagnosis.AgeAtYears.MedCent, 3) + 
	Path.Grade.Coarse + 
	Path.TumourLocation.Coarse + 
	pspline(Path.TumourSizeMm.MedCent, 3) + 
	Path.Invasion.PN + 
	Path.Invasion.VS + 
	Path.Nodes.Regional.Involved.Fraction + 
	Staging.pN +
	Treat.Surgery.ExcisionStatus.Coarse + 
	metapcna.scores[colnames(cv_preds)] + 
	cv_preds["lasso.1se",],
	data = cpvs.diag_dsd)
# anova(fit.cpv.withoutsmoking, fit.cpvsig.withoutsmoking.cv_BSA)
# anova(fit.cpv.withoutsmoking, fit.cpvsig.withoutsmoking.cv_L1SE)
anova(fit.cpvsig.withoutsmoking.cv_L1SE)
@

<<cpvsig-model-withsmoking-cv, comment=FALSE>>=
fit.cpvsig.withsmoking.cv_L1SE = coxph(Surv(Surv.EventTimeFromDiag.DSDeath, Surv.Event.DSDeath) ~ 
	Patient.Gender + 
	pspline(History.Diagnosis.AgeAtYears.MedCent, 3) + 
	Path.Grade.Coarse + 
	Path.TumourLocation.Coarse + 
	pspline(Path.TumourSizeMm.MedCent, 3) + 
	Path.Invasion.PN + 
	Path.Invasion.VS + 
	Path.Nodes.Regional.Involved.Fraction + 
	Staging.pN +
	History.Smoking.PackYears + 
	Treat.Surgery.ExcisionStatus.Coarse + 
	metapcna.scores[colnames(cv_preds)] + 
	cv_preds["lasso.1se",],
	data = cpvs.diag_dsd)
# anova(fit.cpv.withoutsmoking, fit.cpvsig.withoutsmoking.cv_BSA)
# anova(fit.cpv.withsmoking, fit.cpvsig.withsmoking.cv_L1SE)
anova(fit.cpvsig.withsmoking.cv_L1SE)
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIGNATURE PROGNOSTIC PERFORMANCE: EXTERNAL VALIDATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Prediction on validation sets}
<<val-load>>=
load("../../data/15_validation.rda")
@

<<val-calc-scores>>=
val.basis = basis(nmf.final)
rownames(GSE21501.lingex) = GSE21501.feat$Gene.symbol
rownames(GSE28735.lingex) = GSE28735.feat$Gene.symbol
GSE21501.lingex.for_basis = GSE21501.lingex[match(rownames(val.basis), rownames(GSE21501.lingex)),]
GSE28735.lingex.for_basis = GSE28735.lingex[match(rownames(val.basis), rownames(GSE28735.lingex)),]
GSE21501.lingex.for_basis[is.na(GSE21501.lingex.for_basis)] = 0
GSE28735.lingex.for_basis[is.na(GSE28735.lingex.for_basis)] = 0

GSE21501.coefs = apply(GSE21501.lingex.for_basis, 2, function(xcol) nnls(val.basis, xcol)$x)
GSE28735.coefs = apply(GSE28735.lingex.for_basis, 2, function(xcol) nnls(val.basis, xcol)$x)
@

<<val-tests>>=
apply(GSE21501.coefs, 1, function(xc) coxph(Surv(time, event) ~ xc, data = GSE21501.samp))
apply(GSE21501.coefs, 1, function(xc) coxph(Surv(time, event) ~ tstage + nstage + xc, data = GSE21501.samp))
apply(GSE21501.coefs, 1, function(xc) anova(coxph(Surv(time, event) ~ tstage + nstage + xc, data = GSE21501.samp)))
apply(GSE28735.coefs, 1, function(xc) coxph(Surv(time, event) ~ xc, data = GSE28735.samp))
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIGNATURE BIOLOGY
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{MSigDB score correlation thresholding}
<<nmf-msigdb-cor-plots>>=
temp.sel_cols = apply(abs(nmf.final.msigdb.corr) >= sig.corr.threshold, 2, any)
heatmap.2(nmf.final.msigdb.corr[, temp.sel_cols], trace = "none", scale = "none", useRaster = TRUE, col = brewer.pal(11, "PiYG"), symbreaks = TRUE)
heatmap.2(nmf.final.msigdb.corr[, temp.sel_cols], trace = "none", scale = "none", useRaster = TRUE, col = brewer.pal(3, "PiYG"), breaks = c(-1, -sig.corr.threshold, sig.corr.threshold, 1))
@


<<nmf-msigdb-cor-tables-generate>>=
temp.sig_id = colnames(nmf.final.msigdb.corr)
temp.sig_class = gsub("\\..*", "", temp.sig_id)
temp.nsigs = length(temp.sig_id)
temp.nmeta = nrow(nmf.final.msigdb.corr)
tables = lapply(1:temp.nmeta, function(metagene_i) {
	tapply(1:temp.nsigs, temp.sig_class, function(sig_class_is) {
		all_cors = nmf.final.msigdb.corr[, sig_class_is]
		this_cors = all_cors[metagene_i, ]
		this_ids = temp.sig_id[sig_class_is]

		all_sig_cors = abs(all_cors) >= sig.corr.threshold
		this_sig_cors = all_sig_cors[metagene_i, ]

		sigs_to_report = which(this_sig_cors)

		if (length(sigs_to_report) == 0)
		{
			table = data.frame(GeneSet = c(), Correlation = c(), Metagenes = c())
		}
		else
		{
			table = data.frame(
				GeneSet = this_ids[sigs_to_report],
				Correlation = this_cors[sigs_to_report],
				Metagenes = apply(all_cors[,sigs_to_report,drop=FALSE], 2, function(cors) {
					sel = abs(cors) >= sig.corr.threshold
					# A positive number implies that positive GSVA signal is associated with worse prognosis
					paste(which(sel) * sign(cors[which(sel)]) * sign(nmf.final.cpv.pvals$surv.diag_dsd.c[metagene_i]), collapse = ",")
				}))
			table = table[order(-(table$Correlation)),]
			rownames(table) <- NULL
		}
		table
	}, simplify = FALSE)
})
tables
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% THE END
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Session information}
<<sessioninfo>>=
session_info
sessionInfo()
@

\end{document}



