\documentclass{article}
\usepackage{geometry}
\usepackage{amsmath}
\usepackage{lscape}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}

\begin{document}

<<setup, include=FALSE>>=
library(knitr)
opts_chunk$set(
	fig.align = 'center', dev = 'pdf', fig.width = 6, fig.height = 6, dev.args = list(pointsize = 8), 
	tidy = TRUE, width.cutoff = 60, formatR.arrow = TRUE, cache = FALSE)
opts_knit$set(progress = TRUE, verbose = TRUE)
options(warn = 1)
@

\title{SIS NMF Final: Diagnosis to DSD}
\maketitle

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% LIBRARIES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Preparation}
<<libs-load>>=
options(java.parameters = "-Xmx4G")

library(survival)
library(energy)
library(NMF)
library(nnls)

library(bnlearn)

library(glmulti)
library(glmnet)

library(RColorBrewer)
library(gplots)

library(xtable)
library(stargazer)

load("image.rda")
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% COHORT CHARACTERISTICS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Cohort characteristics}
<<cohort-characteristics>>=
cpvs.diag_dsd$Path.TumourLocation[cpvs.diag_dsd$Path.TumourLocation == ""] = NA
cpvs.diag_dsd$Path.Nodes.Regional.Involved.Fraction = cpvs.diag_dsd$Path.Nodes.Regional.Involved / cpvs.diag_dsd$Path.Nodes.Regional.Total
cpvs.diag_dsd$Treat.Surgery.ExcisionStatus.Coarse = ordered(ifelse(cpvs.diag_dsd$Treat.Surgery.ExcisionStatus == "R0", "Clear", "Involved"), levels = c("Clear", "Involved"))
cpvs.diag_dsd$Path.Grade.Coarse = ordered(ifelse(cpvs.diag_dsd$Path.Grade %in% c("1", "2"), "1or2", "3or4"), levels = c("1or2", "3or4"))
cpvs.diag_dsd$Path.TumourLocation.Coarse = factor(ifelse(cpvs.diag_dsd$Path.TumourLocation %in% c("Head", "Head (Uncinate)"), "Head", "Other"))

summary(cpvs.diag_dsd)
sort(apply(is.na(cpvs.diag_dsd), 2, sum))
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% MOLECULAR SIGNATURE IDENTIFICATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Probe selection}
<<probe-sel>>=
table(cpss.sis$sel)
mean(cpss.sis$sel)
apply(cpss.sis.permuted, 2, sum)
median(apply(cpss.sis.permuted, 2, sum))
@


\section{Factorization}
<<nmf-rank-plots>>=
plot(nmf.runs.rank, nmf.runs.rank.random[[1]])
plot(nmf.rankrange[-1], -temp.orig_resids.delta,
	type = "o", col = "black", pch = 21, ylim = range(-c(temp.orig_resids.delta, temp.perm_resids.delta.mean)),
	xlab = "Factorization Rank Added", ylab = "Improvement in Total Residual Error")
lines(nmf.rankrange[-1], -temp.perm_resids.delta.mean, col = "red", type = "o", pch = 21, lwd = 1)
for (i in 1:ncol(temp.perm_resids))
{
	lines(nmf.rankrange[-1], -temp.perm_resids.delta[,i], type = "o", col = rgb(1, 0, 0, 0.25))
}
lines(nmf.rankrange[-1], -temp.perm_resids.delta.threshold, col = "red", lty = "dotted")
if (nmf.rank.wasauto == TRUE)
{
	temp.col = "green"
} else {
	temp.col = "blue"
}
abline(v = nmf.rank, col = temp.col, lwd = 2)
legend("topright", legend = c("Original data", "Permuted data", sprintf("Selected rank (%s)", ifelse(nmf.rank.wasauto == TRUE, "auto", "fixed"))), col = c("black", "red", temp.col),  lty = "solid", pch = 21, inset = 0.05)
@

\subsection{Fit}
<<nmf-plots>>=
consensusmap(nmf.final)
basismap(nmf.final)
coefmap(nmf.final)
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIGNATURE ESTIMATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<coef-calc>>=
coefs.diag_dsd = apply(xlin.diag_dsd.sel, 2, function(xcol) nnls(basis(nmf.final), xcol)$x)
coefs.diag_rec = apply(xlin.diag_rec.sel, 2, function(xcol) nnls(basis(nmf.final), xcol)$x)
coefs.recr_dsd = apply(xlin.recr_dsd.sel, 2, function(xcol) nnls(basis(nmf.final), xcol)$x)
coefs.pdac_au = apply(xlin.pdac_au.sel, 2, function(xcol) nnls(basis(nmf.final), xcol)$x)
axis_coefs.diag_dsd = as.matrix(cbind(axis1 = coefs.diag_dsd[1,] - coefs.diag_dsd[5,], axis2 = coefs.diag_dsd[6,] - coefs.diag_dsd[2,]))
@


<<basis-emit, echo=FALSE>>=
print(xtable(basis(nmf.final)), file = "basis_table.tex", tabular.environment = "longtable", floating = FALSE)
@


<<metagene-pairs>>=
temp.pred.pairs = t(rbind(coefs.pdac_au, metapcna.scores[colnames(coefs.pdac_au)]))
colnames(temp.pred.pairs) = paste("mg", 1:ncol(temp.pred.pairs), sep = ".")
colnames(temp.pred.pairs)[ncol(temp.pred.pairs)] = "PCNA"
temp.pred.pairs = cbind(temp.pred.pairs, qpure = samps.pdac_au$purity_qpure, pkyrs = cpvs.pdac_au$History.Smoking.PackYears)
pairs(temp.pred.pairs, pch = 16, cex = 1, col = ifelse(rownames(temp.pred.pairs) %in% colnames(xlin.diag_dsd.sel), rgb(0, 0, 0, 0.5), rgb(1, 0, 1, 0.5)))
temp.pred.pairs.rescaled = t((t(temp.pred.pairs) - apply(temp.pred.pairs, 2, min, na.rm = TRUE)) / (apply(temp.pred.pairs, 2, function(x) diff(range(x, na.rm = TRUE)))))
heatmap.2(temp.pred.pairs.rescaled, trace = "none", scale = "none", col = brewer.pal(9, "GnBu"))
heatmap.2(temp.pred.pairs.rescaled[apply(!is.na(temp.pred.pairs.rescaled), 1, all),], trace = "none", scale = "none", col = brewer.pal(9, "GnBu"))
temp.pred.pairs.rescaled2 = temp.pred.pairs.rescaled[,colnames(temp.pred.pairs.rescaled) != "pkyrs"]
heatmap.2(temp.pred.pairs.rescaled2, trace = "none", scale = "none", col = brewer.pal(9, "GnBu"))
heatmap.2(temp.pred.pairs.rescaled2[apply(!is.na(temp.pred.pairs.rescaled2), 1, all),], trace = "none", scale = "none", col = brewer.pal(9, "GnBu"))

temp.cors = apply(temp.pred.pairs[,colnames(temp.pred.pairs) != "pkyrs"], 2, function(x) apply(temp.pred.pairs[,colnames(temp.pred.pairs) != "pkyrs"], 2, function(y) { sel = !(is.na(x) | is.na(y)); cor(x[sel], y[sel], method = "kendall") } ))
#diag(temp.cors) = NA
heatmap.2(temp.cors, trace = "none", Rowv = FALSE, Colv = FALSE, col = brewer.pal(11, "PiYG"), dendrogram = "none", scale = "none")

plot(temp.pred.pairs[,"mg.1"] ~ temp.pred.pairs[,"PCNA"], col = ifelse(rownames(temp.pred.pairs) %in% colnames(xlin.diag_dsd.sel), rgb(0, 0, 0, 1), rgb(0, 0, 0, 0)), xlab = "Meta-PCNA Score", ylab = "MG1 Coefficient")
plot(temp.pred.pairs[,"mg.5"], temp.pred.pairs[,"mg.1"], xlab = "MG5 Coefficient (protective)", ylab = "MG1 Coefficient (hazardous)")
plot(temp.pred.pairs[,"mg.2"], temp.pred.pairs[,"mg.6"], xlab = "MG2 Coefficient (protective)", ylab = "MG6 Coefficient")
#scatter.smooth(temp.pred.pairs[,"mg.5"], temp.pred.pairs[,"mg.1"], xlab = "MG5 Coefficient (protective)", ylab = "MG1 Coefficient (hazardous)", span = 1/4, lpars = list(lwd = 2, col = rgb(0, 0, 0, 0.5)))
#scatter.smooth(temp.pred.pairs[,"mg.2"], temp.pred.pairs[,"mg.6"], xlab = "MG2 Coefficient (protective)", ylab = "MG6 Coefficient", span = 1/4, lpars = list(lwd = 2, col = rgb(0, 0, 1, 0.5)))
#smoothScatter(temp.pred.pairs[,"mg.5"], temp.pred.pairs[,"mg.1"], xlab = "MG5 Coefficient (protective)", ylab = "MG1 Coefficient (hazardous)")
#smoothScatter(temp.pred.pairs[,"mg.2"], temp.pred.pairs[,"mg.6"], xlab = "MG2 Coefficient (protective)", ylab = "MG6 Coefficient")

temp.coefs.pdcor = apply(coefs.diag_dsd, 1, function(x1) apply(coefs.diag_dsd, 1, function(x2) dcov.test(x1, x2, R = 9999)$p.value))
temp.coefs.pfisher = apply(coefs.diag_dsd, 1, function(x1) apply(coefs.diag_dsd, 1, function(x2) fisher.test(x1 > median(x1), x2 > median(x2))$p.value))
diag(temp.coefs.pdcor) = NA
temp.coefs.pdcor[lower.tri(temp.coefs.pdcor)] = NA
diag(temp.coefs.pfisher) = NA
temp.coefs.pfisher[lower.tri(temp.coefs.pfisher)] = NA
temp.coefs.pdcor.holm = matrix(p.adjust(temp.coefs.pdcor, "holm"), nrow = nrow(temp.coefs.pdcor))
temp.coefs.pfisher.holm = matrix(p.adjust(temp.coefs.pfisher, "holm"), nrow = nrow(temp.coefs.pfisher))
temp.coefs.pdcor.holm
temp.coefs.pfisher.holm

dcov.test(coefs.diag_dsd[5,], coefs.diag_dsd[1,], R = 19999)
dcov.test(coefs.diag_dsd[2,], coefs.diag_dsd[6,], R = 19999)
cor.test(coefs.diag_dsd[5,], coefs.diag_dsd[1,], method = "kendall")
cor.test(coefs.diag_dsd[2,], coefs.diag_dsd[6,], method = "kendall")

temp.axis1 = coefs.diag_dsd[1,] - coefs.diag_dsd[5,]
temp.axis2 = coefs.diag_dsd[6,] - coefs.diag_dsd[2,]
dcov.test(temp.axis1, temp.axis2, R = 19999)
cor.test(temp.axis1, temp.axis2, method = "kendall")
plot(temp.axis2 ~ temp.axis1, xlab = "Axis 1 activity", ylab = "Axis 2 activity")

coxph(y.diag_dsd ~ temp.axis1 * temp.axis2)
temp = cv.glmnet(cbind(temp.axis1, temp.axis2, temp.axis1*temp.axis2), y.diag_dsd, family = "cox", nfolds = 10)
plot(temp)
plot(temp$glmnet.fit, label = TRUE)
abline(v = sum(abs(coef(temp$glmnet.fit, s = temp$lambda.1se))))
abline(v = sum(abs(coef(temp$glmnet.fit, s = temp$lambda.min))))
coef(temp$glmnet.fit, s = temp$lambda.1se)
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIGNATURE PROGNOSTIC PERFORMANCE: TRAINING SET, ALONE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{LASSO on training set}
<<nmf-metagene-glmnet>>=
glmnet.fit.cv.diag_dsd = cv.glmnet(t(coefs.diag_dsd), y.diag_dsd, family = "cox", nfolds = 10)
glmnet.fit.cv.diag_rec = cv.glmnet(t(coefs.diag_rec), y.diag_rec, family = "cox", nfolds = 10)
glmnet.fit.cv.recr_dsd = cv.glmnet(t(coefs.recr_dsd), y.recr_dsd, family = "cox", nfolds = 10)
@

<<nmf-metagene-glmnet-plots>>=
plot(glmnet.fit.cv.diag_dsd)
plot(glmnet.fit.cv.diag_dsd$glmnet.fit, label = TRUE)
abline(v = sum(abs(coef(glmnet.fit.cv.diag_dsd$glmnet.fit, s = glmnet.fit.cv.diag_dsd$lambda.1se))))
#abline(v = sum(abs(coef(glmnet.fit.cv.diag_dsd$glmnet.fit, s = glmnet.fit.cv.diag_dsd$lambda.min))))
coef(glmnet.fit.cv.diag_dsd$glmnet.fit, s = glmnet.fit.cv.diag_dsd$lambda.1se)

plot(glmnet.fit.cv.diag_rec)
plot(glmnet.fit.cv.diag_rec$glmnet.fit, label = TRUE)
abline(v = sum(abs(coef(glmnet.fit.cv.diag_rec$glmnet.fit, s = glmnet.fit.cv.diag_rec$lambda.1se))))
#abline(v = sum(abs(coef(glmnet.fit.cv.diag_rec$glmnet.fit, s = glmnet.fit.cv.diag_rec$lambda.min))))
coef(glmnet.fit.cv.diag_rec$glmnet.fit, s = glmnet.fit.cv.diag_rec$lambda.1se)

plot(glmnet.fit.cv.recr_dsd)
plot(glmnet.fit.cv.recr_dsd$glmnet.fit, label = TRUE)
abline(v = sum(abs(coef(glmnet.fit.cv.recr_dsd$glmnet.fit, s = glmnet.fit.cv.recr_dsd$lambda.1se))))
#abline(v = sum(abs(coef(glmnet.fit.cv.recr_dsd$glmnet.fit, s = glmnet.fit.cv.recr_dsd$lambda.min))))
coef(glmnet.fit.cv.recr_dsd$glmnet.fit, s = glmnet.fit.cv.recr_dsd$lambda.1se)
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIGNATURE PROGNOSTIC PERFORMANCE: CROSS-VALIDATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsection{Prediction on 10-fold CV}
% <<cv-sig-load>>=
% cv_preds = readRDS("../../analysis/14_SIS_NMF_CV_results.rds")
% @

% <<cv-sig-test-alone>>=
% summary(coxph(y.diag_dsd ~ cv_preds["lasso.1se",]))
% @


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIGNATURE PROGNOSTIC PERFORMANCE: EXTERNAL VALIDATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Prediction on validation sets}
<<val-load>>=
load("../../data/15_validation.rda")
@

<<val-calc-scores>>=
val.basis = basis(nmf.final)
rownames(GSE21501.lingex) = GSE21501.feat$Gene.symbol
rownames(GSE28735.lingex) = GSE28735.feat$Gene.symbol
GSE21501.lingex.for_basis = GSE21501.lingex[match(rownames(val.basis), rownames(GSE21501.lingex)),]
GSE28735.lingex.for_basis = GSE28735.lingex[match(rownames(val.basis), rownames(GSE28735.lingex)),]
GSE21501.lingex.for_basis[is.na(GSE21501.lingex.for_basis)] = 0
GSE28735.lingex.for_basis[is.na(GSE28735.lingex.for_basis)] = 0

GSE21501.coefs = apply(GSE21501.lingex.for_basis, 2, function(xcol) nnls(val.basis, xcol)$x)
GSE28735.coefs = apply(GSE28735.lingex.for_basis, 2, function(xcol) nnls(val.basis, xcol)$x)

GSE21501.axis1 = GSE21501.coefs[1,] - GSE21501.coefs[5,]
GSE21501.axis2 = GSE21501.coefs[6,] - GSE21501.coefs[2,]
GSE28735.axis1 = GSE28735.coefs[1,] - GSE28735.coefs[5,]
GSE28735.axis2 = GSE28735.coefs[6,] - GSE28735.coefs[2,]

GSE21501.score = 1.354*GSE21501.axis1 + 1.548*GSE21501.axis2
GSE28735.score = 1.354*GSE28735.axis1 + 1.548*GSE28735.axis2

GSE21501.pcna = apply(GSE21501.gex[match(metapcna.sig, GSE21501.feat$Gene.symbol),], 2, median, na.rm = TRUE)
GSE28735.pcna = apply(GSE28735.gex[match(metapcna.sig, GSE28735.feat$Gene.symbol),], 2, median, na.rm = TRUE)
@

<<val-tests>>=
temp = coxph(Surv(GSE21501.samp$time, GSE21501.samp$event) ~ GSE21501.score)
summary(temp)
temp = coxph(Surv(GSE28735.samp$time, GSE28735.samp$event) ~ GSE28735.score)
summary(temp)

anova(coxph(Surv(GSE21501.samp$time, GSE21501.samp$event) ~ GSE21501.axis1 + GSE21501.axis2))
anova(coxph(Surv(GSE28735.samp$time, GSE28735.samp$event) ~ GSE28735.axis1 + GSE28735.axis2))
@


<<val-tcga-load>>=
load("../../data/validation/tcga-clin-gex.20141118.rda")
@

<<val-tcga-calc>>=
doValForSingleCancer = function(cancer_id)
{
	# nevents, ntotal, score_p, anova_pcna, anova_score, anova_axis1, anova_axis2
	message(cancer_id)
	cancer_data = data.merged[[cancer_id]]
	if (!"illuminahiseq_rnaseqv2" %in% names(cancer_data$gex))	{ return(c(0, 0, NA, NA, NA, NA, NA)) }

	gex = cancer_data$gex$illuminahiseq_rnaseqv2
	clin = cancer_data$clin

	days_to_death = clin$days_to_death
	days_to_death[days_to_death == "[Not Applicable]"] = NA
	days_to_death = as.numeric(as.character(days_to_death))

	days_to_initial_pathologic_diagnosis = clin$days_to_initial_pathologic_diagnosis
	days_to_initial_pathologic_diagnosis[days_to_initial_pathologic_diagnosis == "[Not Applicable]"] = NA
	days_to_initial_pathologic_diagnosis = as.numeric(as.character(days_to_initial_pathologic_diagnosis))

	days_to_last_followup = clin$days_to_last_followup
	days_to_last_followup[days_to_last_followup == "[Not Applicable]"] = NA
	days_to_last_followup = as.numeric(as.character(days_to_last_followup))

	time_event = days_to_death - days_to_initial_pathologic_diagnosis
	time_lfu = days_to_last_followup - days_to_initial_pathologic_diagnosis
	time_obs = time_event
	time_obs[is.na(time_obs)] = time_lfu[is.na(time_obs)]
	time_obs[!is.na(time_obs) & !is.na(time_lfu)] = pmin(time_obs[!is.na(time_obs) & !is.na(time_lfu)], time_lfu[!is.na(time_obs) & !is.na(time_lfu)])
	event = (time_event <= time_lfu & !is.na(time_event) & !is.na(time_lfu)) | (!is.na(time_event) & is.na(time_lfu))

	y = Surv(time_obs, event)

	gex = gex[!grepl("^\\?\\|", rownames(gex)),]
	rownames(gex) = gsub("\\|.*", "", rownames(gex))

	pcna = apply(log2(gex[rownames(gex) %in% metapcna.sig,] + 1), 2, median)

	gex.axes = gex[match(rownames(val.basis), rownames(gex)),]
	gex.axes[apply(is.na(gex.axes), 1, all),] = 0
	gex.axes = gex.axes - apply(gex.axes, 1, min, na.rm = TRUE)
	gex.axes = gex.axes / apply(gex.axes, 1, max, na.rm = TRUE)
	gex.axes[is.na(gex.axes)] = 0

	coefs = apply(gex.axes, 2, function(xcol) nnls(val.basis, xcol)$x)

	axis1 = coefs[1,] - coefs[5,]
	axis2 = coefs[6,] - coefs[2,]
	score = 1.354*axis1 + 1.548*axis2

	valid = !is.na(score) & !is.na(pcna) & !is.na(y[,1]) & !is.na(y[,2])
	axis1 = axis1[valid]
	axis2 = axis2[valid]
	score = score[valid]
	pcna = pcna[valid]
	y = y[valid,]

	nevents = sum(y[,2])
	ntotal = nrow(y)

	score_p = pchisq(2*diff(coxph(y ~ score)$loglik), 1, lower.tail = FALSE)
	anova_pcna = anova(coxph(y ~ pcna + score))[,"Pr(>|Chi|)"][2]
	anova_score = anova(coxph(y ~ pcna + score))[,"Pr(>|Chi|)"][3]
	anova_axis1 = anova(coxph(y ~ axis1 + axis2))[,"Pr(>|Chi|)"][2]
	anova_axis2 = anova(coxph(y ~ axis1 + axis2))[,"Pr(>|Chi|)"][3]

	c(nevents, ntotal, score_p, anova_pcna, anova_score, anova_axis1, anova_axis2)
}


val_pvals = sapply(names(data.merged), doValForSingleCancer)
rownames(val_pvals) = c("nevents", "ntotal", "p.score", "p.anova.pcna", "p.anova.pcna_score", "p.anova.axis1", "p.anova.axis1_axis2")
val_pvals = as.data.frame(t(val_pvals))

val_pvals[val_pvals$nevents >= 50 | rownames(val_pvals) == "paad",]
@


<<km-curves>>=
plot_km_axes = function(axis1, axis2, y, mc = FALSE, ...)
{
	t1 = t2 = 0
	if (mc == TRUE)
	{
		t1 = median(axis1, na.rm = TRUE)
		t2 = median(axis2, na.rm = TRUE)
	}

	class = paste(c("L", "H")[I(axis1 >= t1)+1], c("L", "H")[I(axis2 >= t2)+1], sep = "")
	class = ordered(class, levels = c("LL", "LH", "HL", "HH"))
	fit = survfit(y ~ class)
	print(fit)
	print(survdiff(y ~ class))
	pval = pchisq(survdiff(y ~ class)$chisq, 3, lower.tail = FALSE)
	pal = brewer.pal(4, "Set2")
	names(pal) = c("LL", "LH", "HL", "HH")
	plot(axis2 ~ axis1, xlab = "A1 activity", ylab = "A2 activity", col = pal[class], pch = 16, cex = 1.5, ...)
	abline(h = t2)
	abline(v = t1)
	plot(fit, col = pal, lwd = 2, xlab = "Time from diagnosis (days)", ylab = "Fraction surviving", sub = sprintf("P = %.3g", pval), ...)
}

plot_km_axes_tcga = function(code, mc)
{
	if ("illuminahiseq_rnaseqv2" %in% names(data.merged[[code]]$gex))
	{
		temp.gex = data.merged[[code]]$gex$illuminahiseq_rnaseqv2
		temp.gex = temp.gex[!grepl("^\\?\\|", rownames(temp.gex)),]
		rownames(temp.gex) = gsub("\\|.*", "", rownames(temp.gex))
		temp.gex.axes = temp.gex[match(rownames(val.basis), rownames(temp.gex)),]
		temp.gex.axes[apply(is.na(temp.gex.axes), 1, all),] = 0
		temp.gex.axes = temp.gex.axes - apply(temp.gex.axes, 1, min, na.rm = TRUE)
		temp.gex.axes = temp.gex.axes / apply(temp.gex.axes, 1, max, na.rm = TRUE)
		temp.gex.axes[is.na(temp.gex.axes)] = 0
		temp.coefs = apply(temp.gex.axes, 2, function(xcol) nnls(val.basis, xcol)$x)
		temp.axis1 = temp.coefs[1,] - temp.coefs[5,]
		temp.axis2 = temp.coefs[6,] - temp.coefs[2,]

		temp.clin = data.merged[[code]]$clin
		temp.days_to_death = temp.clin$days_to_death
		temp.days_to_death[temp.days_to_death == "[Not Applicable]"] = NA
		temp.days_to_death = as.numeric(as.character(temp.days_to_death))
		temp.days_to_initial_pathologic_diagnosis = temp.clin$days_to_initial_pathologic_diagnosis
		temp.days_to_initial_pathologic_diagnosis[temp.days_to_initial_pathologic_diagnosis == "[Not Applicable]"] = NA
		temp.days_to_initial_pathologic_diagnosis = as.numeric(as.character(temp.days_to_initial_pathologic_diagnosis))
		temp.days_to_last_followup = temp.clin$days_to_last_followup
		temp.days_to_last_followup[temp.days_to_last_followup == "[Not Applicable]"] = NA
		temp.days_to_last_followup = as.numeric(as.character(temp.days_to_last_followup))
		temp.time_event = temp.days_to_death - temp.days_to_initial_pathologic_diagnosis
		temp.time_lfu = temp.days_to_last_followup - temp.days_to_initial_pathologic_diagnosis
		temp.time_obs = temp.time_event
		temp.time_obs[is.na(temp.time_obs)] = temp.time_lfu[is.na(temp.time_obs)]
		temp.time_obs[!is.na(temp.time_obs) & !is.na(temp.time_lfu)] = pmin(temp.time_obs[!is.na(temp.time_obs) & !is.na(temp.time_lfu)], temp.time_lfu[!is.na(temp.time_obs) & !is.na(temp.time_lfu)])
		temp.event = (temp.time_event <= temp.time_lfu & !is.na(temp.time_event) & !is.na(temp.time_lfu)) | (!is.na(temp.time_event) & is.na(temp.time_lfu))
		temp.y = Surv(temp.time_obs, temp.event)

		plot_km_axes(temp.axis1, temp.axis2, temp.y, mc = FALSE, main = code)
	}
}

plot_km_axes(axis_coefs.diag_dsd[,1], axis_coefs.diag_dsd[,2], y.diag_dsd, mc = FALSE, main = "APGI")
plot_km_axes(GSE21501.axis1, GSE21501.axis2, Surv(GSE21501.samp$time, GSE21501.samp$event), mc = FALSE, main = "GSE21501")
plot_km_axes(GSE28735.axis1, GSE28735.axis2, Surv(GSE28735.samp$time, GSE28735.samp$event), mc = FALSE, main = "GSE28735")
plot_km_axes_tcga("hnsc", mc = FALSE)
plot_km_axes_tcga("kirc", mc = FALSE)
plot_km_axes_tcga("lgg", mc = FALSE)
plot_km_axes_tcga("luad", mc = FALSE)
plot_km_axes_tcga("paad", mc = FALSE)
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIGNATURE BIOLOGY
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<calc-emt-score>>=
sig.emt_groger_pos = c("ADAM12", "COL1A1", "COL3A1", "COL5A1", "COL6A1", "COL6A3", "CTGF", "CYP1B1", "DLC1", "FBLN1", "FBLN5", "FGF2", "FGFR1", "FN1", "HAS2", "LAMC2", "LUM", "MMP2", "MYL9", "NID2", "NR2F1", "NRP1", "PLAT", "PPAP2B", "PRKCA", "RECK", "SERPINE1", "SERPINE2", "SPOCK1", "TGM2", "TNFAIP6", "TPM1", "VCAN", "WNT5A", "CDKN2C", "MAP1B", "RGS4", "IGFBP3", "IL1R1", "LTBP1", "MME", "PMP22", "PTGER2", "PTX3", "SRGN", "SULF", "SYNE1", "FSTL1", "LTBP2", "VIM", "ZEB1", "DCN", "LOX", "TFPI", "ABCA1", "GALNT10", "SLC22A4", "C5orf13", "SYT11", "TMEM158")
sig.emt_groger_neg = c("CD24","CXCL16","DSG3","ELF3","EPCAM","EPHA1","JUP","MPZL2","OVOL2","PLXNB1","S100P","SLC7A5","SYK","FGFR3","ABLIM1","ADRB2","ALDH1A3","ANK3","BIK","CA2","CTSL2","FGFR2","ZHX2","ZNF165","SERPINB1","SLPI","TMEM30B","TPD52L1","IFI30","IL18","KLK7","KRT15","KRT17","LSR","MAP7","MBP","OCLN","PKP2","PPL","PRSS8","RAPGEF5","SPINT1","PRRG4","GPX3","SLC27A2","SMPDL3B","SORL1","ST6GALNAC2","RHOD","AGR2","C10orf10","CDS1","FAM169A","FXYD3","KLK10","LAD1","MTUS1","PLS1")
x.medcent = x - apply(x, 1, median)
emt.scores.pos = apply(x.medcent[rownames(x.medcent) %in% sig.emt_groger_pos,], 2, median)
emt.scores.neg = apply(x.medcent[rownames(x.medcent) %in% sig.emt_groger_neg,], 2, median)
emt.scores = emt.scores.pos - emt.scores.neg
@

\subsection{MSigDB score correlation thresholding}
<<nmf-msigdb-cor-plots>>=
axis_coefs.msigdb.corr = cor(axis_coefs.diag_dsd, t(sigs), method = "kendall")

temp.sel_cols = apply(abs(axis_coefs.msigdb.corr) >= sig.corr.threshold, 2, any)
heatmap.2(axis_coefs.msigdb.corr[, temp.sel_cols], trace = "none", scale = "none", useRaster = TRUE, col = brewer.pal(11, "PiYG"), symbreaks = TRUE)
heatmap.2(axis_coefs.msigdb.corr[, temp.sel_cols], trace = "none", scale = "none", useRaster = TRUE, col = brewer.pal(3, "PiYG"), breaks = c(-1, -sig.corr.threshold, sig.corr.threshold, 1))

cpv.pvals = apply(axis_coefs.diag_dsd, 2, function(mg) sapply(cbind(cpvs.diag_dsd, purity = samps.diag_dsd$purity_qpure), function(x) {
        s = !is.na(mg) & !is.na(x)
        x = x[s]
        mg = mg[s]
        if (any(c("numeric", "integer") %in% class(x)))
        {
                return(cor.test(x, mg, method = "pearson")$p.value)
        }
        else if (any(c("factor", "ordered", "logical") %in% class(x)) && length(unique(x)) > 1)
        {
                return(anova(lm(mg ~ x))[,"Pr(>F)"][1])
        }
        NA
}))
cpv.pvals = cpv.pvals[!apply(is.na(cpv.pvals), 1, all),]
cpv.pvals = cpv.pvals[!grepl("^Surv\\.", rownames(cpv.pvals)),]
cpv.pvals = cpv.pvals[!grepl("^Treat\\.", rownames(cpv.pvals)),]
cpv.pvals = cpv.pvals[!grepl("^Path\\.Nodes", rownames(cpv.pvals)),]
cpv.pvals = cpv.pvals[!grepl("^Staging\\.Version", rownames(cpv.pvals)),]
cpv.pvals = cpv.pvals[!grepl("^History\\.Recurrence$", rownames(cpv.pvals)),]
cpv.pvals = cpv.pvals[!grepl("^History\\.Status$", rownames(cpv.pvals)),]
cpv.pvals = cpv.pvals[!grepl("^History\\.Death\\.Cause$", rownames(cpv.pvals)),]
cpv.pvals = cpv.pvals[!grepl("^Path\\.Grade$", rownames(cpv.pvals)),]
cpv.pvals = cpv.pvals[!grepl("^Path\\.TumourLocation$", rownames(cpv.pvals)),]

temp = as.vector(cpv.pvals)
temp = p.adjust(temp, "holm")
cpv.qvals = matrix(temp, nrow = nrow(cpv.pvals))
rownames(cpv.qvals) = rownames(cpv.pvals)
colnames(cpv.qvals) = colnames(cpv.pvals)

cpv.pvals
cpv.qvals

boxplot(axis_coefs.diag_dsd[,1] ~ cpvs.diag_dsd$Path.Grade.Coarse, xlab = "Pathological grade", ylab = "A1 signal")
boxplot(axis_coefs.diag_dsd[,2] ~ cpvs.diag_dsd$Path.Grade.Coarse, xlab = "Pathological grade", ylab = "A2 signal")
lm(axis_coefs.diag_dsd[,2] ~ cpvs.diag_dsd$Path.Grade.Coarse)
summary(lm(axis_coefs.diag_dsd[,2] ~ cpvs.diag_dsd$Path.Grade.Coarse))
anova(lm(axis_coefs.diag_dsd[,2] ~ cpvs.diag_dsd$Path.Grade.Coarse))

plot(axis_coefs.diag_dsd[,1] ~ samps$purity_qpure, xlab = "qPure estimate", ylab = "A1 signal")
plot(axis_coefs.diag_dsd[,2] ~ samps$purity_qpure, xlab = "qPure estimate", ylab = "A2 signal")
cor.test(axis_coefs.diag_dsd[,1], samps$purity_qpure, method = "kendall")
cor.test(axis_coefs.diag_dsd[,2], samps$purity_qpure, method = "kendall")
summary(lm(axis_coefs.diag_dsd[,1] ~ samps$purity_qpure))
summary(lm(axis_coefs.diag_dsd[,2] ~ samps$purity_qpure))

plot(axis_coefs.diag_dsd[,1] ~ metapcna.scores, xlab = "meta-PCNA score", ylab = "A1 signal")
plot(axis_coefs.diag_dsd[,2] ~ metapcna.scores, xlab = "meta-PCNA score", ylab = "A2 signal")
cor.test(axis_coefs.diag_dsd[,1], metapcna.scores, method = "kendall")
cor.test(axis_coefs.diag_dsd[,2], metapcna.scores, method = "kendall")
summary(lm(axis_coefs.diag_dsd[,1] ~ metapcna.scores))
summary(lm(axis_coefs.diag_dsd[,2] ~ metapcna.scores))

plot(axis_coefs.diag_dsd[,1] ~ emt.scores, xlab = "meta-EMT score", ylab = "A1 signal")
plot(axis_coefs.diag_dsd[,2] ~ emt.scores, xlab = "meta-EMT score", ylab = "A2 signal")
cor.test(axis_coefs.diag_dsd[,1], emt.scores, method = "kendall")
cor.test(axis_coefs.diag_dsd[,2], emt.scores, method = "kendall")
summary(lm(axis_coefs.diag_dsd[,1] ~ emt.scores))
summary(lm(axis_coefs.diag_dsd[,2] ~ emt.scores))
anova(lm(axis_coefs.diag_dsd[,1] ~ samps$purity_qpure + emt.scores))
anova(lm(axis_coefs.diag_dsd[,2] ~ samps$purity_qpure + emt.scores))
@


% <<biology-network>>=
% data.bnlearnC = data.frame(
% 	axis1 = axis_coefs.diag_dsd[,1], 
% 	axis2 = axis_coefs.diag_dsd[,2], 
% 	qpure = samps$purity_qpure, 
% 	pcna = metapcna.scores,
% 	emt = emt.scores)
% temp.sel = apply(!is.na(data.bnlearnC), 1, all)
% data.bnlearnC = data.bnlearnC[temp.sel,]

% data.bnlearnD = discretize(data.bnlearnC, method = "quantile")
% data.bnlearnD$grade = cpvs.diag_dsd$Path.Grade.Coarse[temp.sel]

% pdf("~/temp.pdf")
% plot(inter.iamb(data.bnlearnD))

% data.dag = si.hiton.pc(data.bnlearnC)
% plot(data.dag)
% bn.cv(data.bnlearnC, bn = "si.hiton.pc")
% boot.strength(data.bnlearnC, algorithm = "si.hiton.pc")
% data.dagd = cextend(data.dag)
% strength.plot(data.dagd, arc.strength(data.dagd, data.bnlearnC, criterion = "cor"))
% @


<<nmf-msigdb-cor-tables-generate>>=
temp.sig_id = colnames(axis_coefs.msigdb.corr)
temp.sig_class = gsub("\\..*", "", temp.sig_id)
temp.nsigs = length(temp.sig_id)
temp.nmeta = nrow(axis_coefs.msigdb.corr)
tables = lapply(1:temp.nmeta, function(metagene_i) {
	tapply(1:temp.nsigs, temp.sig_class, function(sig_class_is) {
		all_cors = axis_coefs.msigdb.corr[, sig_class_is]
		this_cors = all_cors[metagene_i, ]
		this_ids = temp.sig_id[sig_class_is]

		all_sig_cors = abs(all_cors) >= sig.corr.threshold
		this_sig_cors = all_sig_cors[metagene_i, ]

		sigs_to_report = which(this_sig_cors)

		if (length(sigs_to_report) == 0)
		{
			table = data.frame(GeneSet = c(), Correlation = c(), Metagenes = c())
		}
		else
		{
			table = data.frame(
				GeneSet = this_ids[sigs_to_report],
				Correlation = this_cors[sigs_to_report],
				Metagenes = apply(all_cors[,sigs_to_report,drop=FALSE], 2, function(cors) {
					sel = abs(cors) >= sig.corr.threshold
					# A positive number implies that positive GSVA signal is associated with worse prognosis
					paste(which(sel) * sign(cors[which(sel)]), collapse = ",")
				}))
			table = table[order(-(table$Correlation)),]
			rownames(table) <- NULL
		}
		table
	}, simplify = FALSE)
})
tables

for (subtable_index in 1:length(tables))
{
	write.csv(do.call(rbind, tables[[subtable_index]]), file = sprintf("A%d_corrs.csv", subtable_index))
}
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% THE END
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Session information}
<<sessioninfo>>=
session_info
sessionInfo()
@

\end{document}



