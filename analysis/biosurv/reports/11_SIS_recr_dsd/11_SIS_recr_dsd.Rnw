\documentclass{article}
\usepackage{geometry}
\usepackage{amsmath}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}

\begin{document}

<<setup, include=FALSE>>=
library(knitr)
opts_chunk$set(fig.align = 'center', dev = 'pdf', fig.width = 6, fig.height = 6, dev.args = list(pointsize = 8), tidy = TRUE, width.cutoff = 60, formatR.arrow = TRUE, cache = TRUE, cache.lazy = FALSE, autodep = TRUE, cache.comments = FALSE, cache.extra = list(R.version, sessionInfo(), file.info('../../data/07_data_for_SIS.rda')$mtime, tools::md5sum('../../src/08_SIS_common_funcs.R')))
opts_knit$set(progress = TRUE, verbose = TRUE)
@

\title{09\_SIS\_diag\_dsd}
\maketitle

\section{Preparation}

<<load-prep>>=
######################################################################
# LIBRARIES
######################################################################
library(energy)
library(RColorBrewer)
library(apcluster)
library(fastICA)
library(fdrtool)
library(NMF)
library(gplots)
library(stargazer)

######################################################################
# DATA
######################################################################
load("../../data/07_data_for_SIS.rda")
source("../../src/08_SIS_common_funcs.R")

######################################################################
# HIGH LEVEL PARAMETERS
######################################################################
x = x.recr_dsd
y = y.recr_dsd
samps = samps.recr_dsd
tau = 0.72
theta = 0.05
x0 = 6.335
all_sigs = x.msigdb.c123467.merged
seed = 1234567890
nmf.nrun.rank = 50
nmf.nrun.fit = 500
nmf.rank = 6
nmf.rankrange = 2:15
nmf.rankrandcount = 5
sig.corr.threshold = 0.5

######################################################################
# DERIVED VARIABLES
######################################################################
xlin = 2^(x-x0)
xlin.scaled = (xlin - apply(xlin, 1, min)) / as.vector(diff(apply(xlin, 1, range)))
sigs = all_sigs[,colnames(x)]
@


\section{Probe selection}

From the tables in the CPSS pub, if we have theta = 0.01 ($\implies$ floor(nrow(x)*0.01) = \Sexpr{floor(nrow(x)*0.01)} vars selected), and tau = 0.50, then we expect fewer than nrow(x)*1.31e-4 = \Sexpr{nrow(x)*1.31e-4} incorrect vars to be chosen.
<<probe-sel>>=
set.seed(seed)
cpss.sis = CPSS(x, y, SIS.FAST, tau, 50, nsis = floor(theta*nrow(x)))
table(cpss.sis$sel)
mean(cpss.sis$sel)

x.sel = x[cpss.sis$sel,]
xlin.sel = xlin[cpss.sis$sel,]
xlin.scaled.sel = xlin.scaled[cpss.sis$sel,]
@


\section{Expression correlation}

<<correl-plots>>=
x.sel.kcor = cor(t(x.sel), method = "kendall")
x.sel.dcor = sapply(1:(nrow(x.sel)-1), function(i) c(rep(NA, i), sapply((i+1):nrow(x.sel), function(j) dcor(x.sel[i,], x.sel[j,]))))
x.sel.dcor = cbind(x.sel.dcor, NA)
diag(x.sel.dcor) = 1
x.sel.dcor[upper.tri(x.sel.dcor)] = t(x.sel.dcor)[upper.tri(x.sel.dcor)]

corPlot(x.sel.kcor, main = "Correlation Clusters of CPSS-SIS-FAST Probes\nKendall log", useRaster = FALSE)
corPlot(abs(x.sel.kcor), zlim = c(0, 1), pal = "GnBu", main = "Correlation Clusters of CPSS-SIS-FAST Probes\nAbsolute Kendall log", useRaster = FALSE)
corPlot(x.sel.dcor, zlim = c(0, 1), pal = "GnBu", main = "Correlation Clusters of CPSS-SIS-FAST Probes\ndcor log", useRaster = FALSE)
@


\section{Factorization}

\subsection{Rank estimation}

<<nmf-rank>>=
message("Initial factorizations...")
temp.nmf.rank = nmf(
	x = xlin.scaled.sel, 
	rank = nmf.rankrange, 
	method = "snmf/l", 
	seed = seed, nrun = nmf.nrun.rank, 
	.options = list(verbose = 1, track = TRUE, parallel = 16, keep.all = TRUE))
message("Random factorizations...")
temp.nmf.rank.random = lapply(1:nmf.rankrandcount, function(i) {
	message(i)
	nmf(x = randomize(xlin.scaled.sel), 
		rank = nmf.rankrange, 
		method = "snmf/l", 
		seed = seed, nrun = nmf.nrun.rank, 
		.options = list(verbose = 1, track = TRUE, parallel = 16, keep.all = TRUE))
	})
@

<<nmf-rank-plots>>=
plot(temp.nmf.rank, temp.nmf.rank.random)
for (i in 1:length(temp.nmf.rank$fit))
{ 
	consensusmap(temp.nmf.rank$fit[[i]])
}
temp.resids = sapply(temp.nmf.rank$fit, function(f) sapply(f, residuals))
temp.resids_rel = t(t(temp.resids) / apply(temp.resids, 2, min))
temp.resids_scaled = t((t(temp.resids) - apply(temp.resids, 2, min)) / (apply(temp.resids, 2, max) - apply(temp.resids, 2, min)))
plot(0 ~ 0, type = "n", xlim = c(1, nrow(temp.resids)), ylim = range(temp.resids_rel), ylab = "Relative residual", main = "Solution Stability")
for (i in 1:ncol(temp.resids))
{
	points(temp.resids_rel[,i], col = i, pch = colnames(temp.resids)[i])
	lines(cummin(temp.resids_rel[,i]), col = i)
}
plot(0 ~ 0, type = "n", xlim = c(1, nrow(temp.resids)), ylim = range(temp.resids_scaled), ylab = "Scaled residual", main = "Solution Stability")
for (i in 1:ncol(temp.resids))
{
	points(temp.resids_scaled[,i], col = i, pch = colnames(temp.resids)[i])
	lines(cummin(temp.resids_scaled[,i]), col = i)
}
temp.orig_resids = sapply(temp.nmf.rank$fit, residuals)
temp.perm_resids = sapply(temp.nmf.rank.random, function(rep) sapply(rep$fit, residuals))
temp.perm_resids_mean = rowMeans(temp.perm_resids)
temp.orig_resids.spline = splinefun(nmf.rankrange, temp.orig_resids, method = "natural")
temp.perm_resids.spline = apply(temp.perm_resids, 2, function(r) splinefun(nmf.rankrange, r, method = "natural"))
temp.perm_resids_mean.spline = splinefun(nmf.rankrange, temp.perm_resids_mean)
plot(temp.orig_resids.spline(nmf.rankrange, deriv = 1) ~ nmf.rankrange, 
	type = "o", col = "black", ylim = range(c(temp.orig_resids.spline(nmf.rankrange, deriv = 1), temp.perm_resids_mean.spline(nmf.rankrange, deriv = 1))),
	xlab = "Factorization Rank", ylab = "Derivative of Total Residual Error")
lines(temp.perm_resids_mean.spline(nmf.rankrange, deriv = 1) ~ nmf.rankrange, col = "red", type = "o")
for (i in 1:ncol(temp.perm_resids))
{
	lines(nmf.rankrange, splinefun(nmf.rankrange, temp.perm_resids[,i], method = "natural")(nmf.rankrange, deriv = 1), type = "o", col = rgb(1, 0, 0, 0.25))
}
legend("bottomright", legend = c("Original data", "Permuted data"), fill = c("black", "red"), inset = 0.05)
@

\subsection{Fit}

<<nmf>>=
xlin.scaled.sel.nmf = nmf(
	x = xlin.scaled.sel, 
	rank = nmf.rank, 
	method = "snmf/l", 
	seed = seed, nrun = nmf.nrun.fit, 
	.options = list(verbose = 0, track = TRUE, parallel = 16, keep.all = TRUE))
@

<<nmf-plots>>=
consensusmap(xlin.scaled.sel.nmf)
basismap(xlin.scaled.sel.nmf)
coefmap(xlin.scaled.sel.nmf)
temp.resids = sapply(xlin.scaled.sel.nmf, residuals)
plot(1:length(temp.resids), temp.resids, ylab = "Residual", main = "Solution Stability")
lines(1:length(temp.resids), cummin(temp.resids))
@

\subsection{Component CPV associations}

\subsubsection{Survival: Diagnosis to disease-specific death}
<<nmf-surv-tables, echo=FALSE, comment=NA, results='asis'>>=
for (i in 1:nrow(coef(xlin.scaled.sel.nmf)))
{
	stargazer(coxph(y ~ coef(xlin.scaled.sel.nmf)[i,]))
}
@

<<nmf-surv-resids>>=
temp.nullfit = coxph(y ~ 1)
temp.nullresids = residuals(temp.nullfit, type = "martingale")
par(mfrow = c(2, 3))
for (i in 1:nrow(coef(xlin.scaled.sel.nmf)))
{
	scatter.smooth(temp.nullresids ~ coef(xlin.scaled.sel.nmf)[i,])
}
par(mfrow = c(1, 1))
@

\subsection{Purity}
<<nmf-purity>>=
apply(coef(xlin.scaled.sel.nmf), 1, function(xc) cor.test(samps$purity_qpure, xc, method = "kendall"))
par(mfrow = c(2, 3))
for (i in 1:nrow(coef(xlin.scaled.sel.nmf)))
{
	scatter.smooth(samps$purity_qpure ~ coef(xlin.scaled.sel.nmf)[i,])
}
par(mfrow = c(1, 1))
@

\subsection{MTC P-values}
<<nmf-pvals>>=
xlin.scaled.sel.nmf.cpv.pvals = data.frame(
	p.surv = apply(coef(xlin.scaled.sel.nmf), 1, function(xc) pchisq(2*diff(coxph(y ~ xc)$loglik), df = 1, lower.tail = FALSE)),
	p.pure = apply(coef(xlin.scaled.sel.nmf), 1, function(xc) cor.test(samps$purity_qpure, xc, method = "kendall")$p.value)
)
temp.pvals.FWER = p.adjust(c(xlin.scaled.sel.nmf.cpv.pvals$p.surv, xlin.scaled.sel.nmf.cpv.pvals$p.pure), "holm")
temp.qvals.BY = p.adjust(c(xlin.scaled.sel.nmf.cpv.pvals$p.surv, xlin.scaled.sel.nmf.cpv.pvals$p.pure), "BY")
xlin.scaled.sel.nmf.cpv.pvals$p.surv.FWER = temp.pvals.FWER[1:(length(temp.pvals.FWER)/2)]
xlin.scaled.sel.nmf.cpv.pvals$p.pure.FWER = temp.pvals.FWER[(length(temp.pvals.FWER)/2 + 1):length(temp.pvals.FWER)]
xlin.scaled.sel.nmf.cpv.pvals$q.surv.BY = temp.qvals.BY[1:(length(temp.qvals.BY)/2)]
xlin.scaled.sel.nmf.cpv.pvals$q.pure.BY = temp.qvals.BY[(length(temp.qvals.BY)/2 + 1):length(temp.qvals.BY)]
xlin.scaled.sel.nmf.cpv.pvals
@


\subsection{MSigDB score correlation thresholding}
<<nmf-msigdb-cors>>=
xlin.scaled.sel.nmf.msigdb.corr = cor(t(coef(xlin.scaled.sel.nmf)), t(sigs), method = "kendall")
temp.sel_rows = apply(abs(xlin.scaled.sel.nmf.msigdb.corr) >= sig.corr.threshold, 1, any)
temp.sel_cols = apply(abs(xlin.scaled.sel.nmf.msigdb.corr) >= sig.corr.threshold, 2, any)
#image(xlin.scaled.sel.nmf.msigdb.corr[temp.sel_rows, temp.sel_cols])
heatmap.2(xlin.scaled.sel.nmf.msigdb.corr[temp.sel_rows, temp.sel_cols], trace = "none", scale = "none", useRaster = TRUE, col = brewer.pal(11, "PiYG"), symbreaks = TRUE)
heatmap.2(xlin.scaled.sel.nmf.msigdb.corr[temp.sel_rows, temp.sel_cols], trace = "none", scale = "none", useRaster = TRUE, col = brewer.pal(3, "PiYG"), breaks = c(-1, -sig.corr.threshold, sig.corr.threshold, 1))
@

<<nmf-msigdb-cor-tables-generate>>=
tables = lapply(1:nmf.rank, function(sig_index) {
	this_genesets = temp.pos[sig_index,] | temp.neg[sig_index,]
	table = data.frame(
		GeneSet = colnames(temp.pos)[this_genesets],
		Association = ifelse(xlin.scaled.sel.nmf.msigdb.cor[sig_index,this_genesets] > 0, "Positive", "Negative"),
		Correlation = xlin.scaled.sel.nmf.msigdb.cor[sig_index, this_genesets],
		Metagenes = paste(apply(abs(xlin.scaled.sel.nmf.msigdb.cor[, this_genesets]) >= sig.corr.threshold, 2, which), sep = ","))
	table = table[order(-abs(table$Correlation)),]
})
@

<<nmf-msigdb-cor-tables-print, echo=FALSE, comment=NA, results='asis'>>=
for(i in 1:length(tables))
{
	xtable(tables[[i]])
}
@


\section{Session information}
<<sessioninfo>>=
sessionInfo()
@

\end{document}
