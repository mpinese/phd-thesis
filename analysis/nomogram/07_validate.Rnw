\documentclass{article}
\usepackage{geometry}
\usepackage{amsmath}
\usepackage{lscape}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}

\begin{document}

<<setup, include=FALSE>>=
library(knitr)
library(tikzDevice)
options(
	tikzDocumentDeclaration = "\\documentclass[11pt]{memoir}",
	tikzLatexPackages = c(
		getOption("tikzLatexPackages"),
		"\\usepackage{amsmath}"),
	tikzMetricsDictionary="tikzMetrics"
)
knit_hooks$set(crop = hook_pdfcrop)
opts_chunk$set(
	fig.align = 'center', fig.path = "figure/07-", dev = 'tikz', dev.args = list(pointsize = 12), 
	cache = TRUE, cache.lazy = FALSE, cache.path = "cache/07-", autodep = TRUE, crop = TRUE, 
	fig.width = 6, fig.height = 6)
opts_knit$set(progress = TRUE, verbose = TRUE)
options(warn = 1)
@


<<libs>>=
library(flexsurv)
library(boot)
library(randomForestSRC)
library(timeROC)
library(risksetROC)

library(ggplot2)

library(RColorBrewer)
@

<<pal>>=
pal = brewer.pal(4, "Dark2")
names(pal) = c("gg", "km0", "mskcc.post", "mskcc.pre")
@


\section{Preparation}
Construct a *preoperative* function based on the Brennan nomogram.  The preoperative nature will mean that most prognostic components will need to be marginalized out.

\begin{table}[h]
\begin{tabular}{llll}
Variable            & Preoperative? & Available? & Marginals                                                                                     \\
Age                 & Yes           & Yes        & Linear.  90 =\textgreater 0, 30 =\textgreater 8.  Therefore $f(x) = -2/15(x-90) = -2/15x + 12$ \\
Sex                 & Yes           & Yes        & Male risk delta 3                                                                             \\
Portal Vein         & NO            &            & 14.4\% YES, risk delta 10, marginal 1.4                                                       \\
Splenectomy         & NO            &            & 9.9\% YES, risk delta 62, marginal 6.1                                                        \\
Margin of resection & NO            &            & 20.7\% POS, risk delta 4, marginal 0.8                                                        \\
Head.vs.Other       & Yes           & Yes        & Head risk delta 51                                                                            \\
Differentiation     & NO            &            & 14.2\% Well, risk delta 0, marginal 0                                                         \\
                    &               &            & 56.4\% Mod, risk delta 14, marginal 7.9                                                       \\
                    &               &            & 29.5\% Poor, risk delta 35, marginal 10.3.  Overall marginal 18.2                             \\
Posterior.margin    & NO            &            & 86.0\% POS, risk delta 22, marginal 18.9                                                      \\
Numb.pos.nodes      & NO            &            & Mean 2.1, approx marginal 15                                                                  \\
Numb.neg.nodes      & NO            &            & Mean 16.9, approx marginal 9                                                                  \\
Back.pain           & Yes           & NO         & 13.7\% YES, risk delta 15, marginal 2.0                                                       \\
T.stage             & Yes           & Yes        &                                                                                               \\
Weight Loss         & Yes           & NO         & 53.7\% YES, risk delta 3,  marginal 1.6                                                       \\
Max.path.axis       & Yes           & Yes        &                                                                                              
\end{tabular}
\end{table}

So the preoperative MSKCC score would be:
\begin{align}
S &= 1.4 + 6.1 + 0.8 + 18.2 + 18.9 + 15 + 9 + 15*Back.pain + 3*Weight.Loss + -2/15*Age + 12 + 3\left[Sex = M\right] + 51\left[Head.vs.Other = Head\right] + T.stage + Max.path.axis
  &= 81.4 + 15*Back.pain + 3*Weight.Loss + -2/15*Age + 3*\left[Sex = M\right] + 51\left[Head.vs.Other = Head\right] + fT(T.stage) + fS(Max.path.axis)
fT(T.stage) = 36\left[T.stage = T1\right] + 10\left[T.stage = T3\right] + 63\left[T.stage = T4\right]
\end{align}


<<mskcc-nomogram-def>>=
fit.mskcc = list(
	inputs = list(
	History.Diagnosis.AgeAt = list(
		margins = data.frame(value = 65, fraction = 1),
		scorefunc = function(x) { x = x; -2/15*pmin(pmax(x, 0), 90) + 12 }),
	Patient.Sex = list(
		margins = data.frame(value = c("M", "F"), fraction = c(0.501, 1-0.501)),
		scorefunc = function(x) { 3*I(x == "M") }),
	Portal.Vein = list(
		margins = data.frame(value = c(TRUE, FALSE), fraction = c(0.144, 1-0.144)),
		scorefunc = function(x) { 10*I(x == TRUE) }),
	Splenectomy = list(
		margins = data.frame(value = c(TRUE, FALSE), fraction = c(0.099, 1-0.099)),
		scorefunc = function(x) { 62*I(x == TRUE) }),
	Treat.MarginPositive = list(
		margins = data.frame(value = c(TRUE, FALSE), fraction = c(0.207, 1-0.207)),
		scorefunc = function(x) { 4*I(x == TRUE) }),
	Path.LocationBody = list(
		margins = data.frame(value = c(FALSE, TRUE), fraction = c(0.894, 1-0.894)),
		scorefunc = function(x) { 51*I(x == TRUE) }),
	Path.Differentiation = list(
		margins = data.frame(value = c("1", "2", "3", "4"), fraction = c(0.142, 0.564, 1-0.142-0.564, 0)),
		scorefunc = function(x) { 14*I(x == "2") + 35*I(x == "3") + 35*I(x == "4") }),		# Undifferentiated (4) not covered by the MSKCC nomogram; here assign the same score as poorly differentiated (3)
	Posterior.Margin = list(
		margins = data.frame(value = c(TRUE, FALSE), fraction = c(0.86, 1-0.86)),
		scorefunc = function(x) { 22*I(x == TRUE) }),
	Path.LN.Involved = list(
		margins = data.frame(value = 2.1, fraction = 1),
		scorefunc = function(x) { 
			x = pmin(40, pmax(x, 0))
			fitfun = splinefun(c(0, 1, 2, 3, 4, 10, 15, 20, 25, 30, 35, 40), c(0, 14.56, 24.64, 30.28, 33.00, 39.05, 43.89, 48.83, 53.77, 58.61, 63.55, 68.49), method = "natural")
			fitfun(x)
		}),
	Path.LN.Negative = list(
		margins = data.frame(value = 16.9, fraction = 1),
		scorefunc = function(x) { (pmin(pmax(x, 0), 90)-90)*-11/90 }),
	Back.pain = list(
		margins = data.frame(value = c(TRUE, FALSE), fraction = c(0.137, 1-0.137)),
		scorefunc = function(x) { 15*I(x == TRUE) }),
	Stage.pT.Simplified = list(
		margins = data.frame(value = c("T1", "T2", "T34"), fraction = c(0.037, 0.119, 1-0.037-0.119)),
		scorefunc = function(x) { 36*I(x == "T1") + 11*I(x == "T34") }),
		# The following matches the original Brennan nomogram, but was not used as there are too few T4
		# tumours in either the NSWPCN *or* the MSKCC cohorts -- how the T4 coefficient was ever estimated,
		# I'll never know.  The T34 coefficient of 11 was arrived at as (0.828*10+(1-0.037-0.119-0.828)*63)/(1-0.037-0.119),
		# being a frequency-weighted average of the T3 and T4 coefficients.
		# margins = data.frame(value = c("T1", "T2", "T3", "T4"), fraction = c(0.037, 0.119, 0.828, 1-0.037-0.119-0.828)),
		# scorefunc = function(x) { 36*I(x == "T1") + 10*I(x == "T3") + 63*I(x == "T4") }),
	Weight.loss = list(
		margins = data.frame(value = c(TRUE, FALSE), fraction = c(0.537, 1-0.537)),
		scorefunc = function(x) { 3*I(x == TRUE) }),
	Path.Size = list(
		margins = data.frame(),
		scorefunc = function(x) {
			x = pmin(16, pmax(x, 0))
			fitfun = splinefun(c(0, 1, 2, 3, 4, 6, 8, 10, 12, 14, 16), c(0, 29.74, 59.48, 86.70, 100, 97.29, 90.03, 82.77, 75.51, 68.25, 61.10), method = "natural")
			fitfun(x)
		}) ),
	outputs = list(
		DSS12mo = function(s) {
			x = pmax(50, pmin(350, s))
			fitfun = splinefun(c(79.0323, 115.02, 165.524, 197.278, 221.774, 242.339, 261.089, 279.839, 299.194, 323.992, 337.298), c(0.94, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.06))
			y = fitfun(x)
			pmax(0, pmin(1, y))
		},
		DSS24mo = function(s) {
			x = pmax(50, pmin(350, s))
			fitfun = splinefun(c(71.1694, 97.7823, 129.536, 153.73, 174.294, 193.347, 211.794, 231.452, 255.645, 303.125), c(0.86, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.01))
			y = fitfun(x)
			pmax(0, pmin(1, y))
		},
		DSS36mo = function(s) {
			x = pmax(50, pmin(350, s))
			fitfun = splinefun(c(69.3548, 101.109, 125.302, 145.867, 164.919, 183.367, 202.722, 226.915, 274.093), c(0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.01))
			y = fitfun(x)
			pmax(0, pmin(1, y))
		}) 
	)

applyNomogram = function(nomogram, data)
{
	scores = rowSums(sapply(names(nomogram$inputs), function(input) {
		if (input %in% colnames(data)) {
			return(nomogram$inputs[[input]]$scorefunc(data[,input]))
		}
		warning(sprintf("Marginalizing missing variable: %s", input))
		margin_score = sum(nomogram$inputs[[input]]$scorefunc(nomogram$inputs[[input]]$margins$value) * nomogram$inputs[[input]]$margins$fraction)
		return(rep(margin_score, nrow(data)))
	}))

	outputs = sapply(nomogram$outputs, function(f) f(scores))
	cbind(Score = scores, outputs)
}
@


\section{Model and data loading}
Trained models:
<<load-models>>=
temp = readRDS("05_final_model.rds")
fit.gg = temp$gg
fit.km0 = temp$km0
data.nswpcn = temp$data.train
@

<<load-glasgow>>=
data.glasgow = readRDS("06_Glasgow.rds")
data.glasgow = data.glasgow[data.glasgow$Path.Type %in% c("Pancreatic Adenocarcinoma", "Pancreatic adenocarcinoma", "Pancreatic Adenocarcinom"),]
data.glasgow$Path.LN.Negative = data.glasgow$Path.LN.Inspected - data.glasgow$Path.LN.Involved
data.glasgow$History.Diagnosis.AgeAt = data.glasgow$History.Diagnosis.AgeAt.Cent + 68
data.glasgow$Path.Size = data.glasgow$Path.Size.Cent + 30
data.glasgow$SexM = data.glasgow$Patient.Sex == "M"
data.glasgow$AgeCent = data.glasgow$History.Diagnosis.AgeAt.Cent
data.glasgow$SizeCent = data.glasgow$Path.Size.Cent
data.glasgow$A2 = data.glasgow$Molec.S100A2.DCThresh
data.glasgow$A4 = data.glasgow$Molec.S100A4.DCThresh
data.glasgow$LocBody = data.glasgow$Path.Location != "HOP"
data.glasgow$Time = data.glasgow$History.Death.EventTimeDays
data.glasgow$DSD = data.glasgow$History.DSDeath.Event
@


<<load-apgi>>=
data.apgi = readRDS("06_APGI.rds")
@


<<load-dresden>>=
data.dresden = readRDS("06_Dresden.rds")

data.dresden$History.Diagnosis.AgeAt = data.dresden$History.Surgery.AgeAtYears
data.dresden$History.Diagnosis.AgeAt.Cent = data.dresden$History.Diagnosis.AgeAt - 68
data.dresden$Path.Size = data.dresden$Path.TumourSizeMm
data.dresden$Path.Size.Cent = data.dresden$Path.Size - 30
data.dresden$Stage.pT.Simplified = c("T1" = "T1", "T2" = "T2", "T3" = "T34", "T4" = "T34")[data.dresden$Staging.pT]
data.dresden$Patient.Sex = data.dresden$Patient.Gender
data.dresden$SexM = data.dresden$Patient.Sex == "M"
data.dresden$AgeCent = data.dresden$History.Diagnosis.AgeAt.Cent
data.dresden$SizeCent = data.dresden$Path.Size.Cent
data.dresden$A2 = data.dresden$Molec.S100A2.DCThresh
data.dresden$A4 = data.dresden$Molec.S100A4.DCThresh
data.dresden$Path.LocationBody = data.dresden$Path.TumourLocation != "Head"
data.dresden$LocBody = data.dresden$Path.LocationBody
data.dresden$Time = data.dresden$History.Death.EventTimeDays
data.dresden$DSD = data.dresden$History.DSDeath.Event
data.dresden$Treat.MarginPositive = data.dresden$Treat.Surgery.ExcisionStatus != "R0"
data.dresden$Path.Differentiation = data.dresden$Path.Grade

temp.sel = data.dresden$Staging.pM != "M1" & !is.na(data.dresden$Staging.pM) & !is.na(data.dresden$A2) & !is.na(data.dresden$A4) & !is.na(data.dresden$Time) & !is.na(data.dresden$DSD) & !is.na(data.dresden$SexM) & !is.na(data.dresden$LocBody) & !is.na(data.dresden$Treat.MarginPositive) & !is.na(data.dresden$Path.Differentiation)
data.dresden = data.dresden[temp.sel,]
@


<<data-summaries>>=
summary(data.nswpcn)
summary(data.glasgow)
summary(data.apgi)
summary(data.dresden)

temp = table(value = c(data.nswpcn$A2, data.glasgow$A2, data.apgi$A2, data.dresden$A2, data.nswpcn$A4, data.glasgow$A4, data.apgi$A4, data.dresden$A4), marker = rep(c("A2", "A4"), each = nrow(data.nswpcn) + nrow(data.glasgow) + nrow(data.apgi) + nrow(data.dresden)), cohort = rep(rep(c("NSWPCN", "Glasgow", "APGI", "Dresden"), c(nrow(data.nswpcn), nrow(data.glasgow), nrow(data.apgi), nrow(data.dresden))), 2))
temp
plot(temp)
plot(as.table(temp[,1,]))
plot(as.table(temp[,2,]))
@

<<cohort-surv-comparison>>=
temp.time = c(data.nswpcn$Time, data.glasgow$Time, data.apgi$Time, data.dresden$Time) / 365.25
temp.dsd = c(data.nswpcn$DSD, data.glasgow$DSD, data.apgi$DSD, data.dresden$DSD)
temp.cohort = factor(rep(c("NSWPCN", "Glasgow", "APGI", "Dresden"), c(nrow(data.nswpcn), nrow(data.glasgow), nrow(data.apgi), nrow(data.dresden))))
temp.survfit = survfit(Surv(temp.time, temp.dsd) ~ temp.cohort)
plot(temp.survfit, col = pal[1:4], xlim = c(0, 5), lwd = 3, main = "", xlab = "Time from diagnosis (years)", ylab = "Fraction alive")
legend("topright", legend = c("APGI", "Dresden", "Glasgow", "NSWPCN"), col = pal[1:4], inset = 0.05, lwd = 3)
survdiff(Surv(temp.time, temp.dsd) ~ temp.cohort)
temp.vars = c("Time", "DSD", "SexM", "AgeCent", "SizeCent", "Stage.pT.Simplified", "LocBody", "Treat.MarginPositive", "Path.Differentiation", "A2", "A4")
temp.all = as.data.frame(rbind(
	cbind(data.nswpcn[,temp.vars], cohort = "NSWPCN"), 
	cbind(data.glasgow[,temp.vars], cohort = "Glasgow"), 
	cbind(data.apgi[,temp.vars], cohort = "APGI"), 
	cbind(data.dresden[,temp.vars], cohort = "Dresden")))
table(temp.all$SexM, temp.all$cohort)
temp.allfit = coxph(Surv(Time, DSD) ~ LocBody + cohort*(SexM + AgeCent + SizeCent + Treat.MarginPositive + I(Path.Differentiation %in% c("3", "4")) + A2 + A4), data = temp.all)
temp.allfit2 = coxph(Surv(Time, DSD) ~ LocBody + SexM + AgeCent + SizeCent + Treat.MarginPositive + I(Path.Differentiation %in% c("3", "4")) + A2 + A4, data = temp.all)
summary(temp.allfit)
anova(temp.allfit)
anova(temp.allfit, temp.allfit2)
cox.zph(temp.allfit)
temp = cox.zph(temp.allfit)$table
sort(p.adjust(temp[grepl("^cohort", rownames(temp)), "p"], "holm"))
#plot(cox.zph(temp.allfit))
@


\section{Score calculation}
<<calc-mskcc-scores-glasgow>>=
temp = applyNomogram(fit.mskcc, data.glasgow)
mskcc_post.linpred.glasgow = temp[,1]
mskcc_post.12mo.glasgow = temp[,2]
mskcc_post.24mo.glasgow = temp[,3]
mskcc_post.36mo.glasgow = temp[,4]
temp = applyNomogram(fit.mskcc, data.glasgow[,c("History.Diagnosis.AgeAt", "Patient.Sex", "Path.LocationBody", "Stage.pT.Simplified", "Path.Size")])
mskcc_pre.linpred.glasgow = temp[,1]
mskcc_pre.12mo.glasgow = temp[,2]
mskcc_pre.24mo.glasgow = temp[,3]
mskcc_pre.36mo.glasgow = temp[,4]
@

<<calc-mskcc-scores-apgi>>=
temp = applyNomogram(fit.mskcc, data.apgi)
mskcc_post.linpred.apgi = temp[,1]
mskcc_post.12mo.apgi = temp[,2]
mskcc_post.24mo.apgi = temp[,3]
mskcc_post.36mo.apgi = temp[,4]
temp = applyNomogram(fit.mskcc, data.apgi[,c("History.Diagnosis.AgeAt", "Patient.Sex", "Path.LocationBody", "Stage.pT.Simplified", "Path.Size")])
mskcc_pre.linpred.apgi = temp[,1]
mskcc_pre.12mo.apgi = temp[,2]
mskcc_pre.24mo.apgi = temp[,3]
mskcc_pre.36mo.apgi = temp[,4]
@

<<calc-mskcc-scores-dresden>>=
temp = applyNomogram(fit.mskcc, data.dresden)
mskcc_post.linpred.dresden = temp[,1]
mskcc_post.12mo.dresden = temp[,2]
mskcc_post.24mo.dresden = temp[,3]
mskcc_post.36mo.dresden = temp[,4]
temp = applyNomogram(fit.mskcc, data.dresden[,c("History.Diagnosis.AgeAt", "Patient.Sex", "Path.LocationBody", "Stage.pT.Simplified", "Path.Size")])
mskcc_pre.linpred.dresden = temp[,1]
mskcc_pre.12mo.dresden = temp[,2]
mskcc_pre.24mo.dresden = temp[,3]
mskcc_pre.36mo.dresden = temp[,4]
@

Get approximate linear predictors from the GG model, by just calculating the location term.
<<calc-gg-scores-general>>=
val.prob.times = seq(0, max(c(data.glasgow$Time, data.apgi$Time)), 1)
@

<<calc-gg-scores-glasgow>>=
gg.path.glasgow = summary(fit.gg, newdata = data.glasgow, ci = FALSE)
temp.coefs = coef(fit.gg)
gg.linpred.glasgow = sapply(1:length(temp.coefs), function(coef_i) {
	# if (names(temp.coefs)[coef_i] == "SexMTRUE") {
 #        rep(0, nrow(data.val)) 
	# } else 
	if (names(temp.coefs)[coef_i] %in% colnames(data.glasgow)) { 
		temp.coefs[coef_i] * data.glasgow[,names(temp.coefs)[coef_i]] 
	} else if (gsub("TRUE$", "", names(temp.coefs)[coef_i]) %in% colnames(data.glasgow)) { 
		temp.coefs[coef_i] * data.glasgow[,gsub("TRUE$", "", names(temp.coefs)[coef_i])] 
	} else {
		rep(0, nrow(data.glasgow)) 
	} })
gg.linpred.glasgow = -rowSums(gg.linpred.glasgow)	# Negate to bring into concordance with the direction of Cox coefficients (ie higher is now worse)
temp = summary(fit.gg, newdata = data.glasgow, ci = FALSE)
gg.prob.glasgow = sapply(temp, function(x) approx(x[,1], x[,2], xout = val.prob.times, yleft = 1, yright = 0, rule = 2)$y)
colnames(gg.prob.glasgow) = rownames(data.glasgow)
@

<<calc-gg-scores-apgi>>=
gg.path.apgi = summary(fit.gg, newdata = data.apgi, ci = FALSE)
temp.coefs = coef(fit.gg)
gg.linpred.apgi = sapply(1:length(temp.coefs), function(coef_i) {
	# if (names(temp.coefs)[coef_i] == "SexMTRUE") {
 #        rep(0, nrow(data.val)) 
	# } else 
	if (names(temp.coefs)[coef_i] %in% colnames(data.apgi)) { 
		temp.coefs[coef_i] * data.apgi[,names(temp.coefs)[coef_i]] 
	} else if (gsub("TRUE$", "", names(temp.coefs)[coef_i]) %in% colnames(data.apgi)) { 
		temp.coefs[coef_i] * data.apgi[,gsub("TRUE$", "", names(temp.coefs)[coef_i])] 
	} else {
		rep(0, nrow(data.apgi)) 
	} })
gg.linpred.apgi = -rowSums(gg.linpred.apgi)	# Negate to bring into concordance with the direction of Cox coefficients (ie higher is now worse)
temp = summary(fit.gg, newdata = data.apgi, ci = FALSE)
gg.prob.apgi = sapply(temp, function(x) approx(x[,1], x[,2], xout = val.prob.times, yleft = 1, yright = 0, rule = 2)$y)
colnames(gg.prob.apgi) = rownames(data.apgi)
@

<<calc-gg-scores-dresden>>=
gg.path.dresden = summary(fit.gg, newdata = data.dresden, ci = FALSE)
temp.coefs = coef(fit.gg)
gg.linpred.dresden = sapply(1:length(temp.coefs), function(coef_i) {
	# if (names(temp.coefs)[coef_i] == "SexMTRUE") {
 #        rep(0, nrow(data.val)) 
	# } else 
	if (names(temp.coefs)[coef_i] %in% colnames(data.dresden)) { 
		temp.coefs[coef_i] * data.dresden[,names(temp.coefs)[coef_i]] 
	} else if (gsub("TRUE$", "", names(temp.coefs)[coef_i]) %in% colnames(data.dresden)) { 
		temp.coefs[coef_i] * data.dresden[,gsub("TRUE$", "", names(temp.coefs)[coef_i])] 
	} else {
		rep(0, nrow(data.dresden)) 
	} })
gg.linpred.dresden = -rowSums(gg.linpred.dresden)	# Negate to bring into concordance with the direction of Cox coefficients (ie higher is now worse)
temp = summary(fit.gg, newdata = data.dresden, ci = FALSE)
gg.prob.dresden = sapply(temp, function(x) approx(x[,1], x[,2], xout = val.prob.times, yleft = 1, yright = 0, rule = 2)$y)
colnames(gg.prob.dresden) = rownames(data.dresden)
@

<<calc-gg-scores-nswpcn>>=
gg.linpred.nswpcn = sapply(1:length(temp.coefs), function(coef_i) {
	# if (names(temp.coefs)[coef_i] == "SexMTRUE") {
 #        rep(0, nrow(data.val)) 
	# } else 
	if (names(temp.coefs)[coef_i] %in% colnames(data.glasgow)) { 
		temp.coefs[coef_i] * data.nswpcn[,names(temp.coefs)[coef_i]] 
	} else if (gsub("TRUE$", "", names(temp.coefs)[coef_i]) %in% colnames(data.nswpcn)) { 
		temp.coefs[coef_i] * data.nswpcn[,gsub("TRUE$", "", names(temp.coefs)[coef_i])] 
	} else {
		rep(0, nrow(data.nswpcn))
	} })
gg.linpred.nswpcn = -rowSums(gg.linpred.nswpcn)		# Negate to bring into concordance with the direction of Cox coefficients (ie higher is now worse)
temp = summary(fit.gg, newdata = data.nswpcn, ci = FALSE)
gg.prob.nswpcn = sapply(temp, function(x) approx(x[,1], x[,2], xout = val.prob.times, yleft = 1, yright = 0, rule = 2)$y)
colnames(gg.prob.nswpcn) = rownames(data.nswpcn)
@

\section{Validation}
\subsection{Altman diagnostic 1: score histograms}
<<score-hists, fig.height = 10>>=
par(mfrow = c(4, 1))
temp.breaks = seq(min(c(gg.linpred.nswpcn, gg.linpred.glasgow, gg.linpred.apgi, gg.linpred.dresden)), max(c(gg.linpred.nswpcn, gg.linpred.glasgow, gg.linpred.apgi, gg.linpred.dresden)), length.out = 29)
hist(gg.linpred.nswpcn, main = "NSWPCN", xlim = range(c(gg.linpred.nswpcn, gg.linpred.glasgow, gg.linpred.apgi, gg.linpred.dresden)), breaks = temp.breaks, col = "grey", xlab = "")
abline(v = quantile(gg.linpred.nswpcn, probs = c(0.2, 0.5, 0.8)), col = "red")
hist(gg.linpred.glasgow, main = "Glasgow", xlim = range(c(gg.linpred.nswpcn, gg.linpred.glasgow, gg.linpred.apgi, gg.linpred.dresden)), breaks = temp.breaks, col = "grey", xlab = "")
abline(v = quantile(gg.linpred.glasgow, probs = c(0.2, 0.5, 0.8)), col = "red")
hist(gg.linpred.apgi, main = "APGI", xlim = range(c(gg.linpred.nswpcn, gg.linpred.glasgow, gg.linpred.apgi, gg.linpred.dresden)), breaks = temp.breaks, col = "grey", xlab = "")
abline(v = quantile(gg.linpred.apgi, probs = c(0.2, 0.5, 0.8)), col = "red")
hist(gg.linpred.dresden, main = "Dresden", xlim = range(c(gg.linpred.nswpcn, gg.linpred.glasgow, gg.linpred.apgi, gg.linpred.dresden)), breaks = temp.breaks, col = "grey", xlab = "")
abline(v = quantile(gg.linpred.dresden, probs = c(0.2, 0.5, 0.8)), col = "red")
par(mfrow = c(1, 1))
@

\subsection{Altman method 1 (D,F)}
<<altman-1>>=
summary(coxph(Surv(Time, DSD) ~ mskcc_post.linpred.glasgow, data.glasgow))
summary(coxph(Surv(Time, DSD) ~ mskcc_pre.linpred.glasgow, data.glasgow))
summary(coxph(Surv(Time, DSD) ~ mskcc_post.linpred.apgi, data.apgi))
summary(coxph(Surv(Time, DSD) ~ mskcc_pre.linpred.apgi, data.apgi))
summary(coxph(Surv(Time, DSD) ~ mskcc_post.linpred.dresden, data.dresden))
summary(coxph(Surv(Time, DSD) ~ mskcc_pre.linpred.dresden, data.dresden))
summary(coxph(Surv(Time, DSD) ~ gg.linpred.glasgow, data.glasgow))
summary(coxph(Surv(Time, DSD) ~ gg.linpred.apgi, data.apgi))
summary(coxph(Surv(Time, DSD) ~ gg.linpred.dresden, data.dresden))

anova(coxph(Surv(Time, DSD) ~ offset(gg.linpred.glasgow) + gg.linpred.glasgow, data.glasgow))
anova(coxph(Surv(Time, DSD) ~ offset(gg.linpred.apgi) + gg.linpred.apgi, data.apgi))
anova(coxph(Surv(Time, DSD) ~ offset(gg.linpred.dresden) + gg.linpred.dresden, data.dresden))
@
Booyah.


\subsection{Altman method 2 (F)}
<<altman-2>>=
summary(coxph(Surv(Time, DSD) ~ offset(mskcc_pre.linpred.glasgow) + AgeCent + SexM + SizeCent + A2 + A4, data.glasgow))
summary(coxph(Surv(Time, DSD) ~ offset(mskcc_post.linpred.glasgow) + AgeCent + SexM + SizeCent + A2 + A4, data.glasgow))
summary(coxph(Surv(Time, DSD) ~ offset(gg.linpred.glasgow) + AgeCent + SexM + SizeCent + A2 + A4, data.glasgow))

summary(coxph(Surv(Time, DSD) ~ offset(mskcc_pre.linpred.apgi) + AgeCent + SexM + SizeCent + A2 + A4, data.apgi))
summary(coxph(Surv(Time, DSD) ~ offset(mskcc_post.linpred.apgi) + AgeCent + SexM + SizeCent + A2 + A4, data.apgi))
summary(coxph(Surv(Time, DSD) ~ offset(gg.linpred.apgi) + AgeCent + SexM + SizeCent + A2 + A4, data.apgi))

summary(coxph(Surv(Time, DSD) ~ offset(mskcc_pre.linpred.dresden) + AgeCent + SexM + SizeCent + A2 + A4, data.dresden))
summary(coxph(Surv(Time, DSD) ~ offset(mskcc_post.linpred.dresden) + AgeCent + SexM + SizeCent + A2 + A4, data.dresden))
summary(coxph(Surv(Time, DSD) ~ offset(gg.linpred.dresden) + AgeCent + SexM + SizeCent + A2 + A4, data.dresden))
@
Still strong evidence of misspecification or poor fit.  However, the above calibration slope was not significantly different from 1.  Hmm.  This doesn't necessarily sink the method, but will need checking as we go along.

\subsection{Altman method 3 (D)}
<<altman-3>>=
library(Hmisc)
rcorr.cens(gg.linpred.glasgow, Surv(data.glasgow$Time, data.glasgow$DSD))
rcorr.cens(mskcc_pre.linpred.glasgow, Surv(data.glasgow$Time, data.glasgow$DSD))
rcorrp.cens(gg.linpred.glasgow, mskcc_pre.linpred.glasgow, Surv(data.glasgow$Time, data.glasgow$DSD))
rcorr.cens(gg.linpred.apgi, Surv(data.apgi$Time, data.apgi$DSD))
rcorr.cens(mskcc_pre.linpred.apgi, Surv(data.apgi$Time, data.apgi$DSD))
rcorrp.cens(gg.linpred.apgi, mskcc_pre.linpred.apgi, Surv(data.apgi$Time, data.apgi$DSD))
rcorr.cens(gg.linpred.dresden, Surv(data.dresden$Time, data.dresden$DSD))
rcorr.cens(mskcc_pre.linpred.dresden, Surv(data.dresden$Time, data.dresden$DSD))
rcorrp.cens(gg.linpred.dresden, mskcc_pre.linpred.dresden, Surv(data.dresden$Time, data.dresden$DSD))

library(survcomp)
concordance.index(gg.linpred.glasgow, data.glasgow$Time, data.glasgow$DSD, method = "noether")
concordance.index(mskcc_pre.linpred.glasgow, data.glasgow$Time, data.glasgow$DSD, method = "noether")
concordance.index(gg.linpred.apgi, data.apgi$Time, data.apgi$DSD, method = "noether")
concordance.index(mskcc_pre.linpred.apgi, data.apgi$Time, data.apgi$DSD, method = "noether")
concordance.index(gg.linpred.dresden, data.dresden$Time, data.dresden$DSD, method = "noether")
concordance.index(mskcc_pre.linpred.dresden, data.dresden$Time, data.dresden$DSD, method = "noether")
cindex.comp(concordance.index(gg.linpred.glasgow, data.glasgow$Time, data.glasgow$DSD, method = "noether"), concordance.index(mskcc_pre.linpred.glasgow, data.glasgow$Time, data.glasgow$DSD, method = "noether"))
cindex.comp(concordance.index(gg.linpred.apgi, data.apgi$Time, data.apgi$DSD, method = "noether"), concordance.index(mskcc_pre.linpred.apgi, data.apgi$Time, data.apgi$DSD, method = "noether"))
cindex.comp(concordance.index(gg.linpred.dresden, data.dresden$Time, data.dresden$DSD, method = "noether"), concordance.index(mskcc_pre.linpred.dresden, data.dresden$Time, data.dresden$DSD, method = "noether"))
@

\subsection{Altman method 4 (D,C)}
<<altman-4-general>>=
group_quantiles = c(0, 0.2, 0.8, 1)
gg.groups.nswpcn = cut(gg.linpred.nswpcn, quantile(gg.linpred.nswpcn, group_quantiles), labels = FALSE)
temp.alpha = 0.1
@

<<altman-4-nswpcn>>=
temp.km = survfit(Surv(data.nswpcn$Time, data.nswpcn$DSD) ~ gg.groups.nswpcn, conf.int = 1-temp.alpha)
temp.km = data.frame(surv = temp.km$surv, group = rep(gsub(".*=", "", names(temp.km$strata)), temp.km$strata), time = temp.km$time, upper = temp.km$upper, lower = temp.km$lower, est = "NSWPCN Observed")
temp.pred = summary(fit.gg, newdata = data.nswpcn, ci = FALSE)
temp.pred.times = temp.pred[[1]][,1]
temp.pred.ests = sapply(temp.pred, function(x) x[,2])
temp.pred.ests = tapply(1:ncol(temp.pred.ests), gg.groups.nswpcn, function(is) apply(temp.pred.ests[,is], 1, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.pred.lower = sapply(temp.pred.ests, function(x) x[1,])
temp.pred.meds = sapply(temp.pred.ests, function(x) x[2,])
temp.pred.upper = sapply(temp.pred.ests, function(x) x[3,])
temp.pred = data.frame(surv = as.vector(temp.pred.meds), group = rep(colnames(temp.pred.meds), each = nrow(temp.pred.meds)), time = temp.pred.times, upper = as.vector(temp.pred.upper), lower = as.vector(temp.pred.lower), est = "GG1 Prediction")
temp.data = rbind(temp.km, temp.pred)
temp.data$time = temp.data$time / 365.25 * 12

plot(0 ~ 0, type = "n", xlim = c(0, 5*12), ylim = c(0, 1), xlab = "Time from diagnosis (months)", ylab = "Fraction alive", cex.lab = 1.2, cex.axis = 1.2)
temp.pal = brewer.pal(length(unique(gg.groups.nswpcn)), "Dark2")[c(1, 3, 2)]
names(temp.pal) = sort(unique(gg.groups.nswpcn))
for (temp.i in factor(sort(unique(gg.groups.nswpcn))))
{
	lines(surv ~ time, temp.data[as.character(temp.data$group) == as.character(temp.i) & temp.data$est == "NSWPCN Observed",], type = "s", lty = "dotted", col = temp.pal[as.character(temp.i)], lwd = 4)
	lines(surv ~ time, temp.data[as.character(temp.data$group) == as.character(temp.i) & temp.data$est == "GG1 Prediction",], type = "l", lty = "solid", col = temp.pal[as.character(temp.i)], lwd = 4)
}
legend("topright", inset = 0.05, legend = c("PCOP Prediction", "NSWPCN Observed", "Low predicted risk", "Medium predicted risk", "High predicted risk"), lty = c("solid", "dotted", NA, NA, NA), lwd = c(4, 4, NA, NA, NA), col = c("black", "black", temp.pal[1:3]), pch = c(NA, NA, 15, 15, 15), cex = 1.2, pt.cex = c(1, 1, 2, 2, 2))

summary(coxph(Surv(data.nswpcn$Time, data.nswpcn$DSD) ~ factor(gg.groups.nswpcn)))
@

<<altman-4-glasgow>>=
mskcc_pre.groups.glasgow = cut(mskcc_pre.linpred.glasgow, quantile(mskcc_pre.linpred.glasgow, group_quantiles), labels = FALSE)
mskcc_post.groups.glasgow = cut(mskcc_post.linpred.glasgow, quantile(mskcc_post.linpred.glasgow, group_quantiles), labels = FALSE)
gg.groups.glasgow = cut(gg.linpred.glasgow, quantile(gg.linpred.glasgow, group_quantiles), labels = FALSE)

temp.km = survfit(Surv(data.glasgow$Time, data.glasgow$DSD) ~ gg.groups.glasgow, conf.int = 1-temp.alpha)
temp.km = data.frame(surv = temp.km$surv, group = rep(gsub(".*=", "", names(temp.km$strata)), temp.km$strata), time = temp.km$time, upper = temp.km$upper, lower = temp.km$lower, est = "Glasgow Observed")
temp.pred = summary(fit.gg, newdata = data.glasgow, ci = FALSE)
temp.pred.times = temp.pred[[1]][,1]
temp.pred.ests = sapply(temp.pred, function(x) x[,2])
temp.pred.ests = tapply(1:ncol(temp.pred.ests), gg.groups.glasgow, function(is) apply(temp.pred.ests[,is], 1, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.pred.lower = sapply(temp.pred.ests, function(x) x[1,])
temp.pred.meds = sapply(temp.pred.ests, function(x) x[2,])
temp.pred.upper = sapply(temp.pred.ests, function(x) x[3,])
temp.pred = data.frame(surv = as.vector(temp.pred.meds), group = rep(colnames(temp.pred.meds), each = nrow(temp.pred.meds)), time = temp.pred.times, upper = as.vector(temp.pred.upper), lower = as.vector(temp.pred.lower), est = "GG1 Prediction")
temp.data = rbind(temp.km, temp.pred)
temp.data$time = temp.data$time / 365.25 * 12
temp.predpre.12mo = simplify2array(tapply(mskcc_pre.12mo.glasgow, mskcc_pre.groups.glasgow, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.predpre.24mo = simplify2array(tapply(mskcc_pre.24mo.glasgow, mskcc_pre.groups.glasgow, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.predpre.36mo = simplify2array(tapply(mskcc_pre.36mo.glasgow, mskcc_pre.groups.glasgow, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.predpost.12mo = simplify2array(tapply(mskcc_post.12mo.glasgow, mskcc_post.groups.glasgow, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.predpost.24mo = simplify2array(tapply(mskcc_post.24mo.glasgow, mskcc_post.groups.glasgow, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.predpost.36mo = simplify2array(tapply(mskcc_post.36mo.glasgow, mskcc_post.groups.glasgow, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.data2 = data.frame(
	surv = c(temp.predpre.12mo[2,], temp.predpre.24mo[2,], temp.predpre.36mo[2,], temp.predpost.12mo[2,], temp.predpost.24mo[2,], temp.predpost.36mo[2,]),
	group = factor(rep(sort(unique(mskcc_pre.groups.glasgow)), 6)),
	time = rep(c(12, 24, 36), each = 3),
	upper = c(temp.predpre.12mo[3,], temp.predpre.24mo[3,], temp.predpre.36mo[3,], temp.predpost.12mo[3,], temp.predpost.24mo[3,], temp.predpost.36mo[3,]),
	lower = c(temp.predpre.12mo[1,], temp.predpre.24mo[1,], temp.predpre.36mo[1,], temp.predpost.12mo[1,], temp.predpost.24mo[1,], temp.predpost.36mo[1,]),
	est = rep(c("MSKCC Preoperative", "MSKCC Postoperative"), each = 9))

plot(0 ~ 0, type = "n", xlim = c(0, 5*12), ylim = c(0, 1), xlab = "Time from diagnosis (months)", ylab = "Fraction alive", cex.lab = 1.2, cex.axis = 1.2)
temp.pal = brewer.pal(length(unique(gg.groups.glasgow)), "Dark2")[c(1, 3, 2)]
names(temp.pal) = sort(unique(gg.groups.glasgow))
for (temp.i in factor(sort(unique(gg.groups.glasgow))))
{
	lines(surv ~ time, temp.data[as.character(temp.data$group) == as.character(temp.i) & temp.data$est == "Glasgow Observed",], type = "s", lty = "dotted", col = temp.pal[as.character(temp.i)], lwd = 4)
	lines(surv ~ time, temp.data[as.character(temp.data$group) == as.character(temp.i) & temp.data$est == "GG1 Prediction",], type = "l", lty = "solid", col = temp.pal[as.character(temp.i)], lwd = 4)
	points(surv ~ time, temp.data2[as.character(temp.data2$group) == as.character(temp.i) & temp.data2$est == "MSKCC Preoperative",], pch = 21, col = temp.pal[as.character(temp.i)], cex = 1.5)
	points(surv ~ time, temp.data2[as.character(temp.data2$group) == as.character(temp.i) & temp.data2$est == "MSKCC Postoperative",], pch = 19, col = temp.pal[as.character(temp.i)], cex = 1.5)
}
legend("topright", inset = 0.05, legend = c("PCOP Prediction", "MSKCC Preoperative Prediction", "MSKCC Postoperative Prediction", "Glasgow Observed", "Low predicted risk", "Medium predicted risk", "High predicted risk"), lty = c("solid", NA, NA, "dotted", NA, NA, NA), lwd = c(4, NA, NA, 4, NA, NA, NA), col = c("black", "black", "black", "black", temp.pal[1:3]), pch = c(NA, 21, 19, NA, 15, 15, 15), cex = 0.7, pt.cex = c(1, 1, 1, 1, 2, 2, 2))

plot(0 ~ 0, type = "n", xlim = c(0, 5*12), ylim = c(0, 1), xlab = "Time from diagnosis (months)", ylab = "Fraction alive", cex.lab = 1.2, cex.axis = 1.2)
temp.pal = brewer.pal(length(unique(gg.groups.glasgow)), "Dark2")[c(1, 3, 2)]
names(temp.pal) = sort(unique(gg.groups.glasgow))
for (temp.i in factor(sort(unique(gg.groups.glasgow))))
{
	lines(surv ~ time, temp.data[as.character(temp.data$group) == as.character(temp.i) & temp.data$est == "Glasgow Observed",], type = "s", lty = "dotted", col = temp.pal[as.character(temp.i)], lwd = 4)
	lines(surv ~ time, temp.data[as.character(temp.data$group) == as.character(temp.i) & temp.data$est == "GG1 Prediction",], type = "l", lty = "solid", col = temp.pal[as.character(temp.i)], lwd = 4)
}
legend("topright", inset = 0.05, legend = c("PCOP Prediction", "Glasgow Observed", "Low predicted risk", "Medium predicted risk", "High predicted risk"), lty = c("solid", "dotted", NA, NA, NA), lwd = c(4, 4, NA, NA, NA), col = c("black", "black", temp.pal[1:3]), pch = c(NA, NA, 15, 15, 15), cex = 1.2, pt.cex = c(1, 1, 2, 2, 2))

summary(coxph(Surv(data.glasgow$Time, data.glasgow$DSD) ~ factor(gg.groups.glasgow)))
summary(coxph(Surv(data.glasgow$Time, data.glasgow$DSD) ~ factor(mskcc_pre.groups.glasgow)))
summary(coxph(Surv(data.glasgow$Time, data.glasgow$DSD) ~ factor(mskcc_post.groups.glasgow)))
@

<<altman-4-apgi>>=
mskcc_pre.groups.apgi = cut(mskcc_pre.linpred.apgi, quantile(mskcc_pre.linpred.apgi, group_quantiles), labels = FALSE)
mskcc_post.groups.apgi = cut(mskcc_post.linpred.apgi, quantile(mskcc_post.linpred.apgi, group_quantiles), labels = FALSE)
gg.groups.apgi = cut(gg.linpred.apgi, quantile(gg.linpred.apgi, group_quantiles), labels = FALSE)

temp.km = survfit(Surv(data.apgi$Time, data.apgi$DSD) ~ gg.groups.apgi, conf.int = 1-temp.alpha)
temp.km = data.frame(surv = temp.km$surv, group = rep(gsub(".*=", "", names(temp.km$strata)), temp.km$strata), time = temp.km$time, upper = temp.km$upper, lower = temp.km$lower, est = "APGI Observed")
temp.pred = summary(fit.gg, newdata = data.apgi, ci = FALSE)
temp.pred.times = temp.pred[[1]][,1]
temp.pred.ests = sapply(temp.pred, function(x) x[,2])
temp.pred.ests = tapply(1:ncol(temp.pred.ests), gg.groups.apgi, function(is) apply(temp.pred.ests[,is], 1, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.pred.lower = sapply(temp.pred.ests, function(x) x[1,])
temp.pred.meds = sapply(temp.pred.ests, function(x) x[2,])
temp.pred.upper = sapply(temp.pred.ests, function(x) x[3,])
temp.pred = data.frame(surv = as.vector(temp.pred.meds), group = rep(colnames(temp.pred.meds), each = nrow(temp.pred.meds)), time = temp.pred.times, upper = as.vector(temp.pred.upper), lower = as.vector(temp.pred.lower), est = "GG1 Prediction")
temp.data = rbind(temp.km, temp.pred)
temp.data$time = temp.data$time / 365.25 * 12
temp.predpre.12mo = simplify2array(tapply(mskcc_pre.12mo.apgi, mskcc_pre.groups.apgi, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.predpre.24mo = simplify2array(tapply(mskcc_pre.24mo.apgi, mskcc_pre.groups.apgi, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.predpre.36mo = simplify2array(tapply(mskcc_pre.36mo.apgi, mskcc_pre.groups.apgi, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.predpost.12mo = simplify2array(tapply(mskcc_post.12mo.apgi, mskcc_post.groups.apgi, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.predpost.24mo = simplify2array(tapply(mskcc_post.24mo.apgi, mskcc_post.groups.apgi, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.predpost.36mo = simplify2array(tapply(mskcc_post.36mo.apgi, mskcc_post.groups.apgi, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.data2 = data.frame(
	surv = c(temp.predpre.12mo[2,], temp.predpre.24mo[2,], temp.predpre.36mo[2,], temp.predpost.12mo[2,], temp.predpost.24mo[2,], temp.predpost.36mo[2,]),
	group = factor(rep(sort(unique(mskcc_pre.groups.apgi)), 6)),
	time = rep(c(12, 24, 36), each = 3),
	upper = c(temp.predpre.12mo[3,], temp.predpre.24mo[3,], temp.predpre.36mo[3,], temp.predpost.12mo[3,], temp.predpost.24mo[3,], temp.predpost.36mo[3,]),
	lower = c(temp.predpre.12mo[1,], temp.predpre.24mo[1,], temp.predpre.36mo[1,], temp.predpost.12mo[1,], temp.predpost.24mo[1,], temp.predpost.36mo[1,]),
	est = rep(c("MSKCC Preoperative", "MSKCC Postoperative"), each = 9))

plot(0 ~ 0, type = "n", xlim = c(0, 5*12), ylim = c(0, 1), xlab = "Time from diagnosis (months)", ylab = "Fraction alive", cex.lab = 1.2, cex.axis = 1.2)
temp.pal = brewer.pal(length(unique(gg.groups.apgi)), "Dark2")[c(1, 3, 2)]
names(temp.pal) = sort(unique(gg.groups.apgi))
for (temp.i in factor(sort(unique(gg.groups.apgi))))
{
	lines(surv ~ time, temp.data[as.character(temp.data$group) == as.character(temp.i) & temp.data$est == "APGI Observed",], type = "s", lty = "dotted", col = temp.pal[as.character(temp.i)], lwd = 4)
	lines(surv ~ time, temp.data[as.character(temp.data$group) == as.character(temp.i) & temp.data$est == "GG1 Prediction",], type = "l", lty = "solid", col = temp.pal[as.character(temp.i)], lwd = 4)
	points(surv ~ time, temp.data2[as.character(temp.data2$group) == as.character(temp.i) & temp.data2$est == "MSKCC Preoperative",], pch = 21, col = temp.pal[as.character(temp.i)], cex = 1.5)
	points(surv ~ time, temp.data2[as.character(temp.data2$group) == as.character(temp.i) & temp.data2$est == "MSKCC Postoperative",], pch = 19, col = temp.pal[as.character(temp.i)], cex = 1.5)
}
legend("topright", inset = 0.05, legend = c("PCOP Prediction", "MSKCC Preoperative Prediction", "MSKCC Postoperative Prediction", "APGI Observed", "Low predicted risk", "Medium predicted risk", "High predicted risk"), lty = c("solid", NA, NA, "dotted", NA, NA, NA), lwd = c(4, NA, NA, 4, NA, NA, NA), col = c("black", "black", "black", "black", temp.pal[1:3]), pch = c(NA, 21, 19, NA, 15, 15, 15), cex = 0.7, pt.cex = c(1, 1, 1, 1, 2, 2, 2))

plot(0 ~ 0, type = "n", xlim = c(0, 5*12), ylim = c(0, 1), xlab = "Time from diagnosis (months)", ylab = "Fraction alive", cex.lab = 1.2, cex.axis = 1.2)
temp.pal = brewer.pal(length(unique(gg.groups.apgi)), "Dark2")[c(1, 3, 2)]
names(temp.pal) = sort(unique(gg.groups.apgi))
for (temp.i in factor(sort(unique(gg.groups.apgi))))
{
	lines(surv ~ time, temp.data[as.character(temp.data$group) == as.character(temp.i) & temp.data$est == "APGI Observed",], type = "s", lty = "dotted", col = temp.pal[as.character(temp.i)], lwd = 4)
	lines(surv ~ time, temp.data[as.character(temp.data$group) == as.character(temp.i) & temp.data$est == "GG1 Prediction",], type = "l", lty = "solid", col = temp.pal[as.character(temp.i)], lwd = 4)
}
legend("topright", inset = 0.05, legend = c("PCOP Prediction", "APGI Observed", "Low predicted risk", "Medium predicted risk", "High predicted risk"), lty = c("solid","dotted", NA, NA, NA), lwd = c(4, 4, NA, NA, NA), col = c("black", "black", temp.pal[1:3]), pch = c(NA, NA, 15, 15, 15), cex = 1.2, pt.cex = c(1, 1, 2, 2, 2))

summary(coxph(Surv(data.apgi$Time, data.apgi$DSD) ~ factor(gg.groups.apgi)))
summary(coxph(Surv(data.apgi$Time, data.apgi$DSD) ~ factor(mskcc_pre.groups.apgi)))
summary(coxph(Surv(data.apgi$Time, data.apgi$DSD) ~ factor(mskcc_post.groups.apgi)))
@

<<altman-4-dresden>>=
mskcc_pre.groups.dresden = cut(mskcc_pre.linpred.dresden, quantile(mskcc_pre.linpred.dresden, group_quantiles), labels = FALSE)
mskcc_post.groups.dresden = cut(mskcc_post.linpred.dresden, quantile(mskcc_post.linpred.dresden, group_quantiles), labels = FALSE)
gg.groups.dresden = cut(gg.linpred.dresden, quantile(gg.linpred.dresden, group_quantiles), labels = FALSE)

temp.km = survfit(Surv(data.dresden$Time, data.dresden$DSD) ~ gg.groups.dresden, conf.int = 1-temp.alpha)
temp.km = data.frame(surv = temp.km$surv, group = rep(gsub(".*=", "", names(temp.km$strata)), temp.km$strata), time = temp.km$time, upper = temp.km$upper, lower = temp.km$lower, est = "Dresden Observed")
temp.pred = summary(fit.gg, newdata = data.dresden, ci = FALSE)
temp.pred.times = temp.pred[[1]][,1]
temp.pred.ests = sapply(temp.pred, function(x) x[,2])
temp.pred.ests = tapply(1:ncol(temp.pred.ests), gg.groups.dresden, function(is) apply(temp.pred.ests[,is], 1, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.pred.lower = sapply(temp.pred.ests, function(x) x[1,])
temp.pred.meds = sapply(temp.pred.ests, function(x) x[2,])
temp.pred.upper = sapply(temp.pred.ests, function(x) x[3,])
temp.pred = data.frame(surv = as.vector(temp.pred.meds), group = rep(colnames(temp.pred.meds), each = nrow(temp.pred.meds)), time = temp.pred.times, upper = as.vector(temp.pred.upper), lower = as.vector(temp.pred.lower), est = "GG1 Prediction")
temp.data = rbind(temp.km, temp.pred)
temp.data$time = temp.data$time / 365.25 * 12
temp.predpre.12mo = simplify2array(tapply(mskcc_pre.12mo.dresden, mskcc_pre.groups.dresden, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.predpre.24mo = simplify2array(tapply(mskcc_pre.24mo.dresden, mskcc_pre.groups.dresden, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.predpre.36mo = simplify2array(tapply(mskcc_pre.36mo.dresden, mskcc_pre.groups.dresden, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.predpost.12mo = simplify2array(tapply(mskcc_post.12mo.dresden, mskcc_post.groups.dresden, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.predpost.24mo = simplify2array(tapply(mskcc_post.24mo.dresden, mskcc_post.groups.dresden, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.predpost.36mo = simplify2array(tapply(mskcc_post.36mo.dresden, mskcc_post.groups.dresden, quantile, probs = c(temp.alpha/2, 0.5, 1-temp.alpha/2), na.rm = TRUE))
temp.data2 = data.frame(
	surv = c(temp.predpre.12mo[2,], temp.predpre.24mo[2,], temp.predpre.36mo[2,], temp.predpost.12mo[2,], temp.predpost.24mo[2,], temp.predpost.36mo[2,]),
	group = factor(rep(sort(unique(mskcc_pre.groups.dresden)), 6)),
	time = rep(c(12, 24, 36), each = 3),
	upper = c(temp.predpre.12mo[3,], temp.predpre.24mo[3,], temp.predpre.36mo[3,], temp.predpost.12mo[3,], temp.predpost.24mo[3,], temp.predpost.36mo[3,]),
	lower = c(temp.predpre.12mo[1,], temp.predpre.24mo[1,], temp.predpre.36mo[1,], temp.predpost.12mo[1,], temp.predpost.24mo[1,], temp.predpost.36mo[1,]),
	est = rep(c("MSKCC Preoperative", "MSKCC Postoperative"), each = 9))

plot(0 ~ 0, type = "n", xlim = c(0, 5*12), ylim = c(0, 1), xlab = "Time from diagnosis (months)", ylab = "Fraction alive", cex.lab = 1.2, cex.axis = 1.2)
temp.pal = brewer.pal(length(unique(gg.groups.dresden)), "Dark2")[c(1, 3, 2)]
names(temp.pal) = sort(unique(gg.groups.dresden))
for (temp.i in factor(sort(unique(gg.groups.dresden))))
{
	lines(surv ~ time, temp.data[as.character(temp.data$group) == as.character(temp.i) & temp.data$est == "Dresden Observed",], type = "s", lty = "dotted", col = temp.pal[as.character(temp.i)], lwd = 4)
	lines(surv ~ time, temp.data[as.character(temp.data$group) == as.character(temp.i) & temp.data$est == "GG1 Prediction",], type = "l", lty = "solid", col = temp.pal[as.character(temp.i)], lwd = 4)
	points(surv ~ time, temp.data2[as.character(temp.data2$group) == as.character(temp.i) & temp.data2$est == "MSKCC Preoperative",], pch = 21, col = temp.pal[as.character(temp.i)], cex = 1.5)
	points(surv ~ time, temp.data2[as.character(temp.data2$group) == as.character(temp.i) & temp.data2$est == "MSKCC Postoperative",], pch = 19, col = temp.pal[as.character(temp.i)], cex = 1.5)
}
legend("topright", inset = 0.05, legend = c("PCOP Prediction", "MSKCC Preoperative Prediction", "MSKCC Postoperative Prediction", "Dresden Observed", "Low predicted risk", "Medium predicted risk", "High predicted risk"), lty = c("solid", NA, NA, "dotted", NA, NA, NA), lwd = c(4, NA, NA, 4, NA, NA, NA), col = c("black", "black", "black", "black", temp.pal[1:3]), pch = c(NA, 21, 19, NA, 15, 15, 15), cex = 0.7, pt.cex = c(1, 1, 1, 1, 2, 2, 2))

plot(0 ~ 0, type = "n", xlim = c(0, 5*12), ylim = c(0, 1), xlab = "Time from diagnosis (months)", ylab = "Fraction alive", cex.lab = 1.2, cex.axis = 1.2)
temp.pal = brewer.pal(length(unique(gg.groups.dresden)), "Dark2")[c(1, 3, 2)]
names(temp.pal) = sort(unique(gg.groups.dresden))
for (temp.i in factor(sort(unique(gg.groups.dresden))))
{
	lines(surv ~ time, temp.data[as.character(temp.data$group) == as.character(temp.i) & temp.data$est == "Dresden Observed",], type = "s", lty = "dotted", col = temp.pal[as.character(temp.i)], lwd = 4)
	lines(surv ~ time, temp.data[as.character(temp.data$group) == as.character(temp.i) & temp.data$est == "GG1 Prediction",], type = "l", lty = "solid", col = temp.pal[as.character(temp.i)], lwd = 4)
}
legend("topright", inset = 0.05, legend = c("PCOP Prediction", "Dresden Observed", "Low predicted risk", "Medium predicted risk", "High predicted risk"), lty = c("solid", "dotted", NA, NA, NA), lwd = c(4, 4, NA, NA, NA), col = c("black", "black", temp.pal[1:3]), pch = c(NA, NA, 15, 15, 15), cex = 1.2, pt.cex = c(1, 1, 2, 2, 2))

summary(coxph(Surv(data.dresden$Time, data.dresden$DSD) ~ factor(gg.groups.dresden)))
summary(coxph(Surv(data.dresden$Time, data.dresden$DSD) ~ factor(mskcc_pre.groups.dresden)))
summary(coxph(Surv(data.dresden$Time, data.dresden$DSD) ~ factor(mskcc_post.groups.dresden)))
@


Decision curve analysis.
<<model-selection-dca>>=
source("stdca.R")
temp.data = data.frame(Time = data.glasgow$Time, DSD = data.glasgow$DSD*1, 
    gg.1 = 1-gg.prob.glasgow[val.prob.times == 365,], gg.2 = 1-gg.prob.glasgow[val.prob.times == 365*2,], gg.3 = 1-gg.prob.glasgow[val.prob.times == 365*3,], 
    mskcc.pre.1 = 1-mskcc_pre.12mo.glasgow, mskcc.pre.2 = 1-mskcc_pre.24mo.glasgow, mskcc.pre.3 = 1-mskcc_pre.36mo.glasgow, 
    mskcc.post.1 = 1-mskcc_post.12mo.glasgow, mskcc.post.2 = 1-mskcc_post.24mo.glasgow, mskcc.post.3 = 1-mskcc_post.36mo.glasgow)
invisible(stdca(data = temp.data, outcome = "DSD", ttoutcome = "Time", predictors = c("gg.1", "mskcc.pre.1", "mskcc.post.1"), timepoint = 365, probability = rep(TRUE, 3)))
invisible(stdca(data = temp.data, outcome = "DSD", ttoutcome = "Time", predictors = c("gg.2", "mskcc.pre.2", "mskcc.post.2"), timepoint = 365*2, probability = rep(TRUE, 3)))
invisible(stdca(data = temp.data, outcome = "DSD", ttoutcome = "Time", predictors = c("gg.3", "mskcc.pre.3", "mskcc.post.3"), timepoint = 365*3, probability = rep(TRUE, 3)))

temp.data = data.frame(Time = data.apgi$Time, DSD = data.apgi$DSD*1, 
    gg.1 = 1-gg.prob.apgi[val.prob.times == 365,], gg.2 = 1-gg.prob.apgi[val.prob.times == 365*2,], gg.3 = 1-gg.prob.apgi[val.prob.times == 365*3,], 
    mskcc.pre.1 = 1-mskcc_pre.12mo.apgi, mskcc.pre.2 = 1-mskcc_pre.24mo.apgi, mskcc.pre.3 = 1-mskcc_pre.36mo.apgi, 
    mskcc.post.1 = 1-mskcc_post.12mo.apgi, mskcc.post.2 = 1-mskcc_post.24mo.apgi, mskcc.post.3 = 1-mskcc_post.36mo.apgi)
invisible(stdca(data = temp.data, outcome = "DSD", ttoutcome = "Time", predictors = c("gg.1", "mskcc.pre.1", "mskcc.post.1"), timepoint = 365, probability = rep(TRUE, 3)))
invisible(stdca(data = temp.data, outcome = "DSD", ttoutcome = "Time", predictors = c("gg.2", "mskcc.pre.2", "mskcc.post.2"), timepoint = 365*2, probability = rep(TRUE, 3)))
invisible(stdca(data = temp.data, outcome = "DSD", ttoutcome = "Time", predictors = c("gg.3", "mskcc.pre.3", "mskcc.post.3"), timepoint = 365*3, probability = rep(TRUE, 3)))

temp.data = data.frame(Time = data.dresden$Time, DSD = data.dresden$DSD*1, 
    gg.1 = 1-gg.prob.dresden[val.prob.times == 365,], gg.2 = 1-gg.prob.dresden[val.prob.times == 365*2,], gg.3 = 1-gg.prob.dresden[val.prob.times == 365*3,], 
    mskcc.pre.1 = 1-mskcc_pre.12mo.dresden, mskcc.pre.2 = 1-mskcc_pre.24mo.dresden, mskcc.pre.3 = 1-mskcc_pre.36mo.dresden, 
    mskcc.post.1 = 1-mskcc_post.12mo.dresden, mskcc.post.2 = 1-mskcc_post.24mo.dresden, mskcc.post.3 = 1-mskcc_post.36mo.dresden)
invisible(stdca(data = temp.data, outcome = "DSD", ttoutcome = "Time", predictors = c("gg.1", "mskcc.pre.1", "mskcc.post.1"), timepoint = 365, probability = rep(TRUE, 3)))
invisible(stdca(data = temp.data, outcome = "DSD", ttoutcome = "Time", predictors = c("gg.2", "mskcc.pre.2", "mskcc.post.2"), timepoint = 365*2, probability = rep(TRUE, 3)))
invisible(stdca(data = temp.data, outcome = "DSD", ttoutcome = "Time", predictors = c("gg.3", "mskcc.pre.3", "mskcc.post.3"), timepoint = 365*3, probability = rep(TRUE, 3)))
@


\subsection{Brier score}
<<calc-ibs-func>>=
calcIBS = function(surv, pred, pred_times, max_time, min_time = 0)
{
	stopifnot(nrow(surv) == nrow(pred) && length(pred_times) == ncol(pred))

	n = nrow(surv)
	marg_survfit = survfit(surv ~ 1)
	marg_censfit = survfit(Surv(surv[,1], !surv[,2]) ~ 1)
	marg_surv_func = approxfun(marg_survfit$time, marg_survfit$surv, method = "constant", yleft = 1, yright = 0, rule = 2:1, f = 0)
	marg_cens_func = approxfun(marg_censfit$time, marg_censfit$surv, method = "constant", yleft = 1, yright = 0, rule = 2:1, f = 0)

	pred_funcs = apply(pred, 1, function(pat_preds) approxfun(pred_times, pat_preds, yleft = 1, yright = min(pat_preds), rule = 2))

	indiv_patient_bsc = function(pat_i, tstars)
	{
		observed_time = surv[pat_i, 1]
		observed_event = surv[pat_i, 2]
		pred_func = pred_funcs[[pat_i]]
		category = 1*(observed_time <= tstars & observed_event) + 2*(observed_time > tstars) + 3*(observed_time <= tstars & !observed_event)
		bsc = rep(NA, length(tstars))
		bsc[category == 1] = pred_func(tstars[category == 1])^2 / marg_cens_func(observed_time)
		bsc[category == 2] = (1 - pred_func(tstars[category == 2]))^2 / marg_cens_func(tstars[category == 2])
		bsc[category == 3] = 0
		bsc
	}

	bsc_func = function(tstars) { rowMeans(sapply(1:n, function(pat_i) indiv_patient_bsc(pat_i, tstars))) }

	weight_func = function(tstars) { (1 - marg_surv_func(tstars)) / (1 - marg_surv_func(max_time)) }

	# Be slack and do trapezoidal int. with a fine grid.  It should be possible 
	# to calulate the int. exactly but I cbfed.
	int_grid = seq(min_time, max_time, length.out = 1e3)
	bsc_vals = bsc_func(int_grid)
	weight_vals = weight_func(int_grid)
	int_vals = bsc_vals * weight_vals
	ibsc = (2*sum(int_vals) - int_vals[1] - int_vals[length(int_vals)]) * (diff(range(int_grid))) / (2*length(int_vals))

	return(list(bsc = bsc_vals, weights = weight_vals, eval_times = int_grid, ibsc = ibsc))
}

calcBSsingle = function(surv, pred, pred_time)
{
	n = nrow(surv)
	obs_time = surv[,1]
	obs_event = surv[,2]
	marg_censfit = survfit(Surv(obs_time, !obs_event) ~ 1)
	marg_cens_func = approxfun(marg_censfit$time, marg_censfit$surv, method = "constant", yleft = 1, yright = 0, rule = 2:1, f = 0)

	brier_val = rep(NA, n)
	cat = 1*I(obs_time <= pred_time & obs_event) + 2*I(obs_time > pred_time) + 3*I(obs_time <= pred_time & !obs_event)
	brier_val[cat == 1] = (pred[cat == 1])^2 / marg_cens_func(obs_time[cat == 1])
	brier_val[cat == 2] = (1-pred[cat == 2])^2 / marg_cens_func(pred_time)
	brier_val[cat == 3] = 0

	mean(brier_val)
}
@


<<prob-bs-paths-calc-glasgow>>=
mskcc_post.12mo.glasgow.brier = calcBSsingle(Surv(data.glasgow$Time, data.glasgow$DSD), mskcc_post.12mo.glasgow, 12/12*365.25)
mskcc_post.24mo.glasgow.brier = calcBSsingle(Surv(data.glasgow$Time, data.glasgow$DSD), mskcc_post.24mo.glasgow, 24/12*365.25)
mskcc_post.36mo.glasgow.brier = calcBSsingle(Surv(data.glasgow$Time, data.glasgow$DSD), mskcc_post.36mo.glasgow, 36/12*365.25)
mskcc_pre.12mo.glasgow.brier = calcBSsingle(Surv(data.glasgow$Time, data.glasgow$DSD), mskcc_pre.12mo.glasgow, 12/12*365.25)
mskcc_pre.24mo.glasgow.brier = calcBSsingle(Surv(data.glasgow$Time, data.glasgow$DSD), mskcc_pre.24mo.glasgow, 24/12*365.25)
mskcc_pre.36mo.glasgow.brier = calcBSsingle(Surv(data.glasgow$Time, data.glasgow$DSD), mskcc_pre.36mo.glasgow, 36/12*365.25)
gg.path.glasgow.brier = calcIBS(Surv(data.glasgow$Time, data.glasgow$DSD), t(sapply(gg.path.glasgow, function(x) x[,2])), gg.path.glasgow[[1]][,1], 10*365.25)
km0.path.glasgow.brier = calcIBS(Surv(data.glasgow$Time, data.glasgow$DSD), matrix(fit.km0$surv, nrow = nrow(data.glasgow), ncol = length(fit.km0$time), byrow = TRUE), fit.km0$time, 10*365.25)
@

<<prob-bs-paths-calc-apgi>>=
mskcc_post.12mo.apgi.brier = calcBSsingle(Surv(data.apgi$Time, data.apgi$DSD), mskcc_post.12mo.apgi, 12/12*365.25)
mskcc_post.24mo.apgi.brier = calcBSsingle(Surv(data.apgi$Time, data.apgi$DSD), mskcc_post.24mo.apgi, 24/12*365.25)
mskcc_post.36mo.apgi.brier = calcBSsingle(Surv(data.apgi$Time, data.apgi$DSD), mskcc_post.36mo.apgi, 36/12*365.25)
mskcc_pre.12mo.apgi.brier = calcBSsingle(Surv(data.apgi$Time, data.apgi$DSD), mskcc_pre.12mo.apgi, 12/12*365.25)
mskcc_pre.24mo.apgi.brier = calcBSsingle(Surv(data.apgi$Time, data.apgi$DSD), mskcc_pre.24mo.apgi, 24/12*365.25)
mskcc_pre.36mo.apgi.brier = calcBSsingle(Surv(data.apgi$Time, data.apgi$DSD), mskcc_pre.36mo.apgi, 36/12*365.25)
gg.path.apgi.brier = calcIBS(Surv(data.apgi$Time, data.apgi$DSD), t(sapply(gg.path.apgi, function(x) x[,2])), gg.path.apgi[[1]][,1], 10*365.25)
km0.path.apgi.brier = calcIBS(Surv(data.apgi$Time, data.apgi$DSD), matrix(fit.km0$surv, nrow = nrow(data.apgi), ncol = length(fit.km0$time), byrow = TRUE), fit.km0$time, 10*365.25)
@

<<prob-bs-paths-calc-dresden>>=
mskcc_post.12mo.dresden.brier = calcBSsingle(Surv(data.dresden$Time, data.dresden$DSD), mskcc_post.12mo.dresden, 12/12*365.25)
mskcc_post.24mo.dresden.brier = calcBSsingle(Surv(data.dresden$Time, data.dresden$DSD), mskcc_post.24mo.dresden, 24/12*365.25)
mskcc_post.36mo.dresden.brier = calcBSsingle(Surv(data.dresden$Time, data.dresden$DSD), mskcc_post.36mo.dresden, 36/12*365.25)
mskcc_pre.12mo.dresden.brier = calcBSsingle(Surv(data.dresden$Time, data.dresden$DSD), mskcc_pre.12mo.dresden, 12/12*365.25)
mskcc_pre.24mo.dresden.brier = calcBSsingle(Surv(data.dresden$Time, data.dresden$DSD), mskcc_pre.24mo.dresden, 24/12*365.25)
mskcc_pre.36mo.dresden.brier = calcBSsingle(Surv(data.dresden$Time, data.dresden$DSD), mskcc_pre.36mo.dresden, 36/12*365.25)
gg.path.dresden.brier = calcIBS(Surv(data.dresden$Time, data.dresden$DSD), t(sapply(gg.path.dresden, function(x) x[,2])), gg.path.dresden[[1]][,1], 10*365.25)
km0.path.dresden.brier = calcIBS(Surv(data.dresden$Time, data.dresden$DSD), matrix(fit.km0$surv, nrow = nrow(data.dresden), ncol = length(fit.km0$time), byrow = TRUE), fit.km0$time, 10*365.25)
@

<<prob-bs-paths-plot-glasgow, fig.height = 4, fig.width = 6>>=
plot(gg.path.glasgow.brier$eval_times/365.25*12, gg.path.glasgow.brier$bsc, col = pal["gg"], type = "l", ylim = c(0, 0.3), xlab = "Time from diagnosis (months)", ylab = "Brier score", lwd = 2, main = "Glasgow")
lines(gg.path.glasgow.brier$eval_times/365.25*12, km0.path.glasgow.brier$bsc, col = pal["km0"], lwd = 2)
points(c(12, 24, 36), c(mskcc_post.12mo.glasgow.brier, mskcc_post.24mo.glasgow.brier, mskcc_post.36mo.glasgow.brier), col = pal["mskcc.pre"], cex = 1, pch = 16)
points(c(12, 24, 36), c(mskcc_pre.12mo.glasgow.brier, mskcc_pre.24mo.glasgow.brier, mskcc_pre.36mo.glasgow.brier), col = pal["mskcc.post"], cex = 1, pch = 16)
abline(h = 0.25, col = "grey", lty = "dotted")
abline(v = c(7, 34))
legend("topright", 
	legend = c(	"GG1 Preop", 	"KM0", 		"MSKCC Postop", 	"MSKCC Preop"), 
	pch = c(	NA, 			NA, 		16, 				16), 
	col = c(	pal["gg"], 		pal["km0"], pal["mskcc.pre"], 	pal["mskcc.post"]), 
	lty = c(	"solid", 		"solid", 	NA, 				NA), 
	inset = 0.05, lwd = 2)

plot(gg.path.glasgow.brier$eval_times/365.25*12, gg.path.glasgow.brier$bsc, col = pal["gg"], type = "l", ylim = c(0, 0.3), xlab = "Time from diagnosis (months)", ylab = "Brier score", lwd = 2, xlim = c(0, 40))
lines(gg.path.glasgow.brier$eval_times/365.25*12, km0.path.glasgow.brier$bsc, col = pal["km0"], lwd = 2)
points(c(12, 24, 36), c(mskcc_pre.12mo.glasgow.brier, mskcc_pre.24mo.glasgow.brier, mskcc_pre.36mo.glasgow.brier), col = pal["mskcc.pre"], cex = 1, pch = 16)
abline(h = 0.25, col = "grey", lty = "dotted")
abline(v = c(7, 34))
legend("bottom", 
	legend = c(	"PCOP", 		"KM0", 		"MSKCC"), 
	pch = c(	NA, 			NA, 		16), 
	col = c(	pal["gg"], 		pal["km0"], pal["mskcc.pre"]), 
	lty = c(	"solid", 		"solid", 	NA), 
	inset = 0.05, lwd = 2)

plot(gg.path.glasgow.brier$eval_times/365.25*12, km0.path.glasgow.brier$bsc - gg.path.glasgow.brier$bsc, col = pal["gg"], type = "l", ylim = c(-0.05, 0.05), xlab = "Time from diagnosis (months)", ylab = "Brier score (Improvement over KM0)", lwd = 2, main = "Glasgow")
points(c(12, 24, 36), approx(km0.path.glasgow.brier$eval_times/365.25*12, km0.path.glasgow.brier$bsc, c(12, 24, 36))$y - c(mskcc_post.12mo.glasgow.brier, mskcc_post.24mo.glasgow.brier, mskcc_post.36mo.glasgow.brier), col = pal["mskcc.pre"], cex = 1, pch = 16)
points(c(12, 24, 36), approx(km0.path.glasgow.brier$eval_times/365.25*12, km0.path.glasgow.brier$bsc, c(12, 24, 36))$y - c(mskcc_pre.12mo.glasgow.brier, mskcc_pre.24mo.glasgow.brier, mskcc_pre.36mo.glasgow.brier), col = pal["mskcc.post"], cex = 1, pch = 16)
lines(gg.path.glasgow.brier$eval_times/365.25*12, km0.path.glasgow.brier$bsc - 0.25, col = "grey", lty = "dotted")
abline(v = c(7, 34))
abline(h = 0, col = pal["km0"], lwd = 2)
legend("topright", 
	legend = c(	"GG1 Preop", 	"MSKCC Postop", 	"MSKCC Preop"), 
	pch = c(	NA, 			16, 				16), 
	col = c(	pal["gg"], 		pal["mskcc.pre"], 	pal["mskcc.post"]), 
	lty = c(	"solid", 		NA, 				NA), 
	inset = 0.05, lwd = 2)

plot(gg.path.glasgow.brier$eval_times/365.25*12, km0.path.glasgow.brier$bsc - gg.path.glasgow.brier$bsc, col = pal["gg"], type = "l", ylim = c(-0.05, 0.05), xlab = "Time from diagnosis (months)", ylab = "Brier score (Improvement over KM0)", lwd = 2, xlim = c(0, 40), main = "Glasgow")
points(c(12, 24, 36), approx(km0.path.glasgow.brier$eval_times/365.25*12, km0.path.glasgow.brier$bsc, c(12, 24, 36))$y - c(mskcc_post.12mo.glasgow.brier, mskcc_post.24mo.glasgow.brier, mskcc_post.36mo.glasgow.brier), col = pal["mskcc.pre"], cex = 1, pch = 16)
points(c(12, 24, 36), approx(km0.path.glasgow.brier$eval_times/365.25*12, km0.path.glasgow.brier$bsc, c(12, 24, 36))$y - c(mskcc_pre.12mo.glasgow.brier, mskcc_pre.24mo.glasgow.brier, mskcc_pre.36mo.glasgow.brier), col = pal["mskcc.post"], cex = 1, pch = 16)
lines(gg.path.glasgow.brier$eval_times/365.25*12, km0.path.glasgow.brier$bsc - 0.25, col = "grey", lty = "dotted")
abline(v = c(7, 34))
abline(h = 0, col = pal["km0"], lwd = 2)
legend("bottom", 
	legend = c(	"GG1 Preop", 	"MSKCC Postop", 	"MSKCC Preop"), 
	pch = c(	NA, 			16, 				16), 
	col = c(	pal["gg"], 		pal["mskcc.pre"], 	pal["mskcc.post"]), 
	lty = c(	"solid", 		NA, 				NA), 
	inset = 0.05, lwd = 2)
@


<<prob-bs-paths-plot-apgi, fig.height = 4, fig.width = 6>>=
plot(gg.path.apgi.brier$eval_times/365.25*12, gg.path.apgi.brier$bsc, col = pal["gg"], type = "l", ylim = c(0, 0.3), xlab = "Time from diagnosis (months)", ylab = "Brier score", lwd = 2, main = "APGI")
lines(gg.path.apgi.brier$eval_times/365.25*12, km0.path.apgi.brier$bsc, col = pal["km0"], lwd = 2)
points(c(12, 24, 36), c(mskcc_post.12mo.apgi.brier, mskcc_post.24mo.apgi.brier, mskcc_post.36mo.apgi.brier), col = pal["mskcc.pre"], cex = 1, pch = 16)
points(c(12, 24, 36), c(mskcc_pre.12mo.apgi.brier, mskcc_pre.24mo.apgi.brier, mskcc_pre.36mo.apgi.brier), col = pal["mskcc.post"], cex = 1, pch = 16)
abline(h = 0.25, col = "grey", lty = "dotted")
abline(v = c(7, 34))
legend("topright", 
	legend = c(	"GG1 Preop", 	"KM0", 		"MSKCC Postop", 	"MSKCC Preop"), 
	pch = c(	NA, 			NA, 		16, 				16), 
	col = c(	pal["gg"], 		pal["km0"], pal["mskcc.pre"], 	pal["mskcc.post"]), 
	lty = c(	"solid", 		"solid", 	NA, 				NA), 
	inset = 0.05, lwd = 2)

plot(gg.path.apgi.brier$eval_times/365.25*12, gg.path.apgi.brier$bsc, col = pal["gg"], type = "l", ylim = c(0, 0.3), xlab = "Time from diagnosis (months)", ylab = "Brier score", lwd = 2, xlim = c(0, 40))
lines(gg.path.apgi.brier$eval_times/365.25*12, km0.path.apgi.brier$bsc, col = pal["km0"], lwd = 2)
points(c(12, 24, 36), c(mskcc_pre.12mo.apgi.brier, mskcc_pre.24mo.apgi.brier, mskcc_pre.36mo.apgi.brier), col = pal["mskcc.pre"], cex = 1, pch = 16)
abline(h = 0.25, col = "grey", lty = "dotted")
abline(v = c(7, 34))
legend("bottom", 
	legend = c(	"PCOP", 		"KM0", 		"MSKCC"), 
	pch = c(	NA, 			NA, 		16), 
	col = c(	pal["gg"], 		pal["km0"], pal["mskcc.pre"]), 
	lty = c(	"solid", 		"solid", 	NA), 
	inset = 0.05, lwd = 2)

plot(gg.path.apgi.brier$eval_times/365.25*12, km0.path.apgi.brier$bsc - gg.path.apgi.brier$bsc, col = pal["gg"], type = "l", ylim = c(-0.05, 0.05), xlab = "Time from diagnosis (months)", ylab = "Brier score (Improvement over KM0)", lwd = 2, main = "APGI")
points(c(12, 24, 36), approx(km0.path.apgi.brier$eval_times/365.25*12, km0.path.apgi.brier$bsc, c(12, 24, 36))$y - c(mskcc_post.12mo.apgi.brier, mskcc_post.24mo.apgi.brier, mskcc_post.36mo.apgi.brier), col = pal["mskcc.pre"], cex = 1, pch = 16)
points(c(12, 24, 36), approx(km0.path.apgi.brier$eval_times/365.25*12, km0.path.apgi.brier$bsc, c(12, 24, 36))$y - c(mskcc_pre.12mo.apgi.brier, mskcc_pre.24mo.apgi.brier, mskcc_pre.36mo.apgi.brier), col = pal["mskcc.post"], cex = 1, pch = 16)
lines(gg.path.apgi.brier$eval_times/365.25*12, km0.path.apgi.brier$bsc - 0.25, col = "grey", lty = "dotted")
abline(v = c(7, 34))
abline(h = 0, col = pal["km0"], lwd = 2)
legend("topright", 
	legend = c(	"GG1 Preop", 	"MSKCC Postop", 	"MSKCC Preop"), 
	pch = c(	NA, 			16, 				16), 
	col = c(	pal["gg"], 		pal["mskcc.pre"], 	pal["mskcc.post"]), 
	lty = c(	"solid", 		NA, 				NA), 
	inset = 0.05, lwd = 2)

plot(gg.path.apgi.brier$eval_times/365.25*12, km0.path.apgi.brier$bsc - gg.path.apgi.brier$bsc, col = pal["gg"], type = "l", ylim = c(-0.05, 0.05), xlab = "Time from diagnosis (months)", ylab = "Brier score (Improvement over KM0)", lwd = 2, xlim = c(0, 40), main = "APGI")
points(c(12, 24, 36), approx(km0.path.apgi.brier$eval_times/365.25*12, km0.path.apgi.brier$bsc, c(12, 24, 36))$y - c(mskcc_post.12mo.apgi.brier, mskcc_post.24mo.apgi.brier, mskcc_post.36mo.apgi.brier), col = pal["mskcc.pre"], cex = 1, pch = 16)
points(c(12, 24, 36), approx(km0.path.apgi.brier$eval_times/365.25*12, km0.path.apgi.brier$bsc, c(12, 24, 36))$y - c(mskcc_pre.12mo.apgi.brier, mskcc_pre.24mo.apgi.brier, mskcc_pre.36mo.apgi.brier), col = pal["mskcc.post"], cex = 1, pch = 16)
lines(gg.path.apgi.brier$eval_times/365.25*12, km0.path.apgi.brier$bsc - 0.25, col = "grey", lty = "dotted")
abline(v = c(7, 34))
abline(h = 0, col = pal["km0"], lwd = 2)
legend("bottom", 
	legend = c(	"GG1 Preop", 	"MSKCC Postop", 	"MSKCC Preop"), 
	pch = c(	NA, 			16, 				16), 
	col = c(	pal["gg"], 		pal["mskcc.pre"], 	pal["mskcc.post"]), 
	lty = c(	"solid", 		NA, 				NA), 
	inset = 0.05, lwd = 2)
@


<<prob-bs-paths-plot-dresden, fig.height = 4, fig.width = 6>>=
plot(gg.path.dresden.brier$eval_times/365.25*12, gg.path.dresden.brier$bsc, col = pal["gg"], type = "l", ylim = c(0, 0.3), xlab = "Time from diagnosis (months)", ylab = "Brier score", lwd = 2, main = "Dresden")
lines(gg.path.dresden.brier$eval_times/365.25*12, km0.path.dresden.brier$bsc, col = pal["km0"], lwd = 2)
points(c(12, 24, 36), c(mskcc_post.12mo.dresden.brier, mskcc_post.24mo.dresden.brier, mskcc_post.36mo.dresden.brier), col = pal["mskcc.pre"], cex = 1, pch = 16)
points(c(12, 24, 36), c(mskcc_pre.12mo.dresden.brier, mskcc_pre.24mo.dresden.brier, mskcc_pre.36mo.dresden.brier), col = pal["mskcc.post"], cex = 1, pch = 16)
abline(h = 0.25, col = "grey", lty = "dotted")
abline(v = c(7, 34))
legend("topright", 
	legend = c(	"GG1 Preop", 	"KM0", 		"MSKCC Postop", 	"MSKCC Preop"), 
	pch = c(	NA, 			NA, 		16, 				16), 
	col = c(	pal["gg"], 		pal["km0"], pal["mskcc.pre"], 	pal["mskcc.post"]), 
	lty = c(	"solid", 		"solid", 	NA, 				NA), 
	inset = 0.05, lwd = 2)

plot(gg.path.dresden.brier$eval_times/365.25*12, gg.path.dresden.brier$bsc, col = pal["gg"], type = "l", ylim = c(0, 0.3), xlab = "Time from diagnosis (months)", ylab = "Brier score", lwd = 2, xlim = c(0, 40))
lines(gg.path.dresden.brier$eval_times/365.25*12, km0.path.dresden.brier$bsc, col = pal["km0"], lwd = 2)
points(c(12, 24, 36), c(mskcc_pre.12mo.dresden.brier, mskcc_pre.24mo.dresden.brier, mskcc_pre.36mo.dresden.brier), col = pal["mskcc.pre"], cex = 1, pch = 16)
abline(h = 0.25, col = "grey", lty = "dotted")
abline(v = c(7, 34))
legend("bottom", 
	legend = c(	"PCOP", 		"KM0", 		"MSKCC"), 
	pch = c(	NA, 			NA, 		16), 
	col = c(	pal["gg"], 		pal["km0"], pal["mskcc.pre"]), 
	lty = c(	"solid", 		"solid", 	NA), 
	inset = 0.05, lwd = 2)

plot(gg.path.dresden.brier$eval_times/365.25*12, km0.path.dresden.brier$bsc - gg.path.dresden.brier$bsc, col = pal["gg"], type = "l", ylim = c(-0.05, 0.05), xlab = "Time from diagnosis (months)", ylab = "Brier score (Improvement over KM0)", lwd = 2, main = "Dresden")
points(c(12, 24, 36), approx(km0.path.dresden.brier$eval_times/365.25*12, km0.path.dresden.brier$bsc, c(12, 24, 36))$y - c(mskcc_post.12mo.dresden.brier, mskcc_post.24mo.dresden.brier, mskcc_post.36mo.dresden.brier), col = pal["mskcc.pre"], cex = 1, pch = 16)
points(c(12, 24, 36), approx(km0.path.dresden.brier$eval_times/365.25*12, km0.path.dresden.brier$bsc, c(12, 24, 36))$y - c(mskcc_pre.12mo.dresden.brier, mskcc_pre.24mo.dresden.brier, mskcc_pre.36mo.dresden.brier), col = pal["mskcc.post"], cex = 1, pch = 16)
lines(gg.path.dresden.brier$eval_times/365.25*12, km0.path.dresden.brier$bsc - 0.25, col = "grey", lty = "dotted")
abline(v = c(7, 34))
abline(h = 0, col = pal["km0"], lwd = 2)
legend("topright", 
	legend = c(	"GG1 Preop", 	"MSKCC Postop", 	"MSKCC Preop"), 
	pch = c(	NA, 			16, 				16), 
	col = c(	pal["gg"], 		pal["mskcc.pre"], 	pal["mskcc.post"]), 
	lty = c(	"solid", 		NA, 				NA), 
	inset = 0.05, lwd = 2)

plot(gg.path.dresden.brier$eval_times/365.25*12, km0.path.dresden.brier$bsc - gg.path.dresden.brier$bsc, col = pal["gg"], type = "l", ylim = c(-0.05, 0.05), xlab = "Time from diagnosis (months)", ylab = "Brier score (Improvement over KM0)", lwd = 2, xlim = c(0, 40), main = "Dresden")
points(c(12, 24, 36), approx(km0.path.dresden.brier$eval_times/365.25*12, km0.path.dresden.brier$bsc, c(12, 24, 36))$y - c(mskcc_post.12mo.dresden.brier, mskcc_post.24mo.dresden.brier, mskcc_post.36mo.dresden.brier), col = pal["mskcc.pre"], cex = 1, pch = 16)
points(c(12, 24, 36), approx(km0.path.dresden.brier$eval_times/365.25*12, km0.path.dresden.brier$bsc, c(12, 24, 36))$y - c(mskcc_pre.12mo.dresden.brier, mskcc_pre.24mo.dresden.brier, mskcc_pre.36mo.dresden.brier), col = pal["mskcc.post"], cex = 1, pch = 16)
lines(gg.path.dresden.brier$eval_times/365.25*12, km0.path.dresden.brier$bsc - 0.25, col = "grey", lty = "dotted")
abline(v = c(7, 34))
abline(h = 0, col = pal["km0"], lwd = 2)
legend("bottom", 
	legend = c(	"GG1 Preop", 	"MSKCC Postop", 	"MSKCC Preop"), 
	pch = c(	NA, 			16, 				16), 
	col = c(	pal["gg"], 		pal["mskcc.pre"], 	pal["mskcc.post"]), 
	lty = c(	"solid", 		NA, 				NA), 
	inset = 0.05, lwd = 2)
@


<<prob-bs-bootstrap-glasgow>>=
probs_bs_boot_func_glasgow = function(d, i) {
	bs.mskcc.postop.12 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_post.12mo.glasgow[i], 12/12*365.25)
	bs.mskcc.postop.24 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_post.24mo.glasgow[i], 24/12*365.25)
	bs.mskcc.postop.36 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_post.36mo.glasgow[i], 36/12*365.25)
	bs.mskcc.preop.12 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_pre.12mo.glasgow[i], 12/12*365.25)
	bs.mskcc.preop.24 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_pre.24mo.glasgow[i], 24/12*365.25)
	bs.mskcc.preop.36 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_pre.36mo.glasgow[i], 36/12*365.25)

	bs.gg.vals = t(sapply(gg.path.glasgow[i], function(path) approx(path[,1], path[,2], c(12, 24, 36)/12*365.25)$y))
	rownames(bs.gg.vals) <- NULL
	bs.gg.12 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), bs.gg.vals[,1], 12/12*365.25)
	bs.gg.24 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), bs.gg.vals[,2], 24/12*365.25)
	bs.gg.36 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), bs.gg.vals[,3], 36/12*365.25)
	
	bs.km0.vals = approx(fit.km0$time, fit.km0$surv, c(12, 24, 36)/12*365.25)$y
	bs.km0.12 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), rep(bs.km0.vals[1], nrow(d[i,])), 12/12*365.25)
	bs.km0.24 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), rep(bs.km0.vals[2], nrow(d[i,])), 24/12*365.25)
	bs.km0.36 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), rep(bs.km0.vals[3], nrow(d[i,])), 36/12*365.25)

	result = c(
		bs.gg.12 - bs.km0.12, 			bs.mskcc.preop.12 - bs.km0.12, 
		bs.gg.12 - bs.mskcc.preop.12, 	
		bs.gg.24 - bs.km0.24, 			bs.mskcc.preop.24 - bs.km0.24, 
		bs.gg.24 - bs.mskcc.preop.24, 	
		bs.gg.36 - bs.km0.36, 			bs.mskcc.preop.36 - bs.km0.36, 
		bs.gg.36 - bs.mskcc.preop.36)
	
	names(result) <- NULL
	result
}

set.seed(20150208)
deltaBrier.boot.glasgow = boot(data.glasgow, probs_bs_boot_func_glasgow, R = 500)
deltaBrier.boot.glasgow.cis = t(sapply(1:ncol(deltaBrier.boot.glasgow$t), function(i) boot.ci(deltaBrier.boot.glasgow, index = i, type = "bca")$bca))
colnames(deltaBrier.boot.glasgow.cis) = c("level", "lowindex", "highindex", "lci", "uci")
rownames(deltaBrier.boot.glasgow.cis) = c(
	"12:gg-km0", "12:pre-km0", "12:gg-pre", 
	"24:gg-km0", "24:pre-km0", "24:gg-pre", 
	"36:gg-km0", "36:pre-km0", "36:gg-pre")
deltaBrier.boot.glasgow
deltaBrier.boot.glasgow.cis
@


<<prob-bs-bootstrap-apgi>>=
probs_bs_boot_func_apgi = function(d, i) {
	bs.mskcc.postop.12 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_post.12mo.apgi[i], 12/12*365.25)
	bs.mskcc.postop.24 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_post.24mo.apgi[i], 24/12*365.25)
	bs.mskcc.postop.36 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_post.36mo.apgi[i], 36/12*365.25)
	bs.mskcc.preop.12 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_pre.12mo.apgi[i], 12/12*365.25)
	bs.mskcc.preop.24 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_pre.24mo.apgi[i], 24/12*365.25)
	bs.mskcc.preop.36 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_pre.36mo.apgi[i], 36/12*365.25)

	bs.gg.vals = t(sapply(gg.path.apgi[i], function(path) approx(path[,1], path[,2], c(12, 24, 36)/12*365.25)$y))
	rownames(bs.gg.vals) <- NULL
	bs.gg.12 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), bs.gg.vals[,1], 12/12*365.25)
	bs.gg.24 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), bs.gg.vals[,2], 24/12*365.25)
	bs.gg.36 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), bs.gg.vals[,3], 36/12*365.25)
	
	bs.km0.vals = approx(fit.km0$time, fit.km0$surv, c(12, 24, 36)/12*365.25)$y
	bs.km0.12 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), rep(bs.km0.vals[1], nrow(d[i,])), 12/12*365.25)
	bs.km0.24 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), rep(bs.km0.vals[2], nrow(d[i,])), 24/12*365.25)
	bs.km0.36 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), rep(bs.km0.vals[3], nrow(d[i,])), 36/12*365.25)

	result = c(
		bs.gg.12 - bs.km0.12, 			bs.mskcc.preop.12 - bs.km0.12, 
		bs.gg.12 - bs.mskcc.preop.12, 	
		bs.gg.24 - bs.km0.24, 			bs.mskcc.preop.24 - bs.km0.24, 
		bs.gg.24 - bs.mskcc.preop.24, 	
		bs.gg.36 - bs.km0.36, 			bs.mskcc.preop.36 - bs.km0.36, 
		bs.gg.36 - bs.mskcc.preop.36)
	
	names(result) <- NULL
	result
}

set.seed(20150208)
deltaBrier.boot.apgi = boot(data.apgi, probs_bs_boot_func_apgi, R = 500)
deltaBrier.boot.apgi.cis = t(sapply(1:ncol(deltaBrier.boot.apgi$t), function(i) boot.ci(deltaBrier.boot.apgi, index = i, type = "bca")$bca))
colnames(deltaBrier.boot.apgi.cis) = c("level", "lowindex", "highindex", "lci", "uci")
rownames(deltaBrier.boot.apgi.cis) = c(
	"12:gg-km0", "12:pre-km0", "12:gg-pre", 
	"24:gg-km0", "24:pre-km0", "24:gg-pre", 
	"36:gg-km0", "36:pre-km0", "36:gg-pre")
deltaBrier.boot.apgi
deltaBrier.boot.apgi.cis
@


<<prob-bs-bootstrap-dresden>>=
probs_bs_boot_func_dresden = function(d, i) {
	bs.mskcc.postop.12 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_post.12mo.dresden[i], 12/12*365.25)
	bs.mskcc.postop.24 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_post.24mo.dresden[i], 24/12*365.25)
	bs.mskcc.postop.36 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_post.36mo.dresden[i], 36/12*365.25)
	bs.mskcc.preop.12 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_pre.12mo.dresden[i], 12/12*365.25)
	bs.mskcc.preop.24 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_pre.24mo.dresden[i], 24/12*365.25)
	bs.mskcc.preop.36 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), mskcc_pre.36mo.dresden[i], 36/12*365.25)

	bs.gg.vals = t(sapply(gg.path.dresden[i], function(path) approx(path[,1], path[,2], c(12, 24, 36)/12*365.25)$y))
	rownames(bs.gg.vals) <- NULL
	bs.gg.12 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), bs.gg.vals[,1], 12/12*365.25)
	bs.gg.24 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), bs.gg.vals[,2], 24/12*365.25)
	bs.gg.36 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), bs.gg.vals[,3], 36/12*365.25)
	
	bs.km0.vals = approx(fit.km0$time, fit.km0$surv, c(12, 24, 36)/12*365.25)$y
	bs.km0.12 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), rep(bs.km0.vals[1], nrow(d[i,])), 12/12*365.25)
	bs.km0.24 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), rep(bs.km0.vals[2], nrow(d[i,])), 24/12*365.25)
	bs.km0.36 = calcBSsingle(Surv(d$Time[i], d$DSD[i]), rep(bs.km0.vals[3], nrow(d[i,])), 36/12*365.25)

	result = c(
		bs.gg.12 - bs.km0.12, 			bs.mskcc.preop.12 - bs.km0.12, 
		bs.gg.12 - bs.mskcc.preop.12, 	
		bs.gg.24 - bs.km0.24, 			bs.mskcc.preop.24 - bs.km0.24, 
		bs.gg.24 - bs.mskcc.preop.24, 	
		bs.gg.36 - bs.km0.36, 			bs.mskcc.preop.36 - bs.km0.36, 
		bs.gg.36 - bs.mskcc.preop.36)
	
	names(result) <- NULL
	result
}

set.seed(20150208)
deltaBrier.boot.dresden = boot(data.dresden, probs_bs_boot_func_dresden, R = 500)
deltaBrier.boot.dresden.cis = t(sapply(1:ncol(deltaBrier.boot.dresden$t), function(i) boot.ci(deltaBrier.boot.dresden, index = i, type = "bca")$bca))
colnames(deltaBrier.boot.dresden.cis) = c("level", "lowindex", "highindex", "lci", "uci")
rownames(deltaBrier.boot.dresden.cis) = c(
	"12:gg-km0", "12:pre-km0", "12:gg-pre", 
	"24:gg-km0", "24:pre-km0", "24:gg-pre", 
	"36:gg-km0", "36:pre-km0", "36:gg-pre")
deltaBrier.boot.dresden
deltaBrier.boot.dresden.cis
@


<<prob-bs-bootstrap-summary-glasgow>>=
temp.time = gsub(":.*", "", rownames(deltaBrier.boot.glasgow.cis))
temp.methodpos = gsub(".*:", "", gsub("-.*", "", rownames(deltaBrier.boot.glasgow.cis)))
temp.methodneg = gsub(".*-", "", rownames(deltaBrier.boot.glasgow.cis))
temp.methods = sort(unique(c(temp.methodpos, temp.methodneg)))
tapply(1:length(temp.time), temp.time, function(is) {
	res = matrix(0, nrow = length(temp.methods), ncol = length(temp.methods))
	rownames(res) = temp.methods
	colnames(res) = temp.methods
	# Make res signed.  0 => NS.  +1 => row is better than col (BS_row - BS_col < 0).  -1 => row is worse than col (BS_row - BS_col > 0).
	res[cbind(temp.methodpos[is], temp.methodneg[is])] = (sign(deltaBrier.boot.glasgow.cis[is, "uci"]) == sign(deltaBrier.boot.glasgow.cis[is, "lci"])) * sign(-deltaBrier.boot.glasgow.cis[is, "uci"])
	res[cbind(temp.methodneg[is], temp.methodpos[is])] = (sign(deltaBrier.boot.glasgow.cis[is, "uci"]) == sign(deltaBrier.boot.glasgow.cis[is, "lci"])) * sign(deltaBrier.boot.glasgow.cis[is, "uci"])
	res
})
@

<<prob-bs-bootstrap-summary-apgi>>=
temp.time = gsub(":.*", "", rownames(deltaBrier.boot.apgi.cis))
temp.methodpos = gsub(".*:", "", gsub("-.*", "", rownames(deltaBrier.boot.apgi.cis)))
temp.methodneg = gsub(".*-", "", rownames(deltaBrier.boot.apgi.cis))
temp.methods = sort(unique(c(temp.methodpos, temp.methodneg)))
tapply(1:length(temp.time), temp.time, function(is) {
	res = matrix(0, nrow = length(temp.methods), ncol = length(temp.methods))
	rownames(res) = temp.methods
	colnames(res) = temp.methods
	# Make res signed.  0 => NS.  +1 => row is better than col (BS_row - BS_col < 0).  -1 => row is worse than col (BS_row - BS_col > 0).
	res[cbind(temp.methodpos[is], temp.methodneg[is])] = (sign(deltaBrier.boot.apgi.cis[is, "uci"]) == sign(deltaBrier.boot.apgi.cis[is, "lci"])) * sign(-deltaBrier.boot.apgi.cis[is, "uci"])
	res[cbind(temp.methodneg[is], temp.methodpos[is])] = (sign(deltaBrier.boot.apgi.cis[is, "uci"]) == sign(deltaBrier.boot.apgi.cis[is, "lci"])) * sign(deltaBrier.boot.apgi.cis[is, "uci"])
	res
})
@

<<prob-bs-bootstrap-summary-dresden>>=
temp.time = gsub(":.*", "", rownames(deltaBrier.boot.dresden.cis))
temp.methodpos = gsub(".*:", "", gsub("-.*", "", rownames(deltaBrier.boot.dresden.cis)))
temp.methodneg = gsub(".*-", "", rownames(deltaBrier.boot.dresden.cis))
temp.methods = sort(unique(c(temp.methodpos, temp.methodneg)))
tapply(1:length(temp.time), temp.time, function(is) {
	res = matrix(0, nrow = length(temp.methods), ncol = length(temp.methods))
	rownames(res) = temp.methods
	colnames(res) = temp.methods
	# Make res signed.  0 => NS.  +1 => row is better than col (BS_row - BS_col < 0).  -1 => row is worse than col (BS_row - BS_col > 0).
	res[cbind(temp.methodpos[is], temp.methodneg[is])] = (sign(deltaBrier.boot.dresden.cis[is, "uci"]) == sign(deltaBrier.boot.dresden.cis[is, "lci"])) * sign(-deltaBrier.boot.dresden.cis[is, "uci"])
	res[cbind(temp.methodneg[is], temp.methodpos[is])] = (sign(deltaBrier.boot.dresden.cis[is, "uci"]) == sign(deltaBrier.boot.dresden.cis[is, "lci"])) * sign(deltaBrier.boot.dresden.cis[is, "uci"])
	res
})
@

Cumulative-dynamic:
<<timeROC-glasgow>>=
mskcc_pre.cdroc.glasgow = timeROC(data.glasgow$Time/365.25*12, data.glasgow$DSD, mskcc_pre.linpred.glasgow, cause = 1, times = seq(1, 36, 1), iid = TRUE)
mskcc_post.cdroc.glasgow = timeROC(data.glasgow$Time/365.25*12, data.glasgow$DSD, mskcc_post.linpred.glasgow, cause = 1, times = seq(1, 36, 1), iid = TRUE)
gg.cdroc.glasgow = timeROC(data.glasgow$Time/365.25*12, data.glasgow$DSD, gg.linpred.glasgow, cause = 1, times = seq(1, 36, 1), iid = TRUE)
plotAUCcurve(mskcc_pre.cdroc.glasgow, conf.int = FALSE, add = FALSE, col = pal["mskcc.pre"])
plotAUCcurve(mskcc_post.cdroc.glasgow, conf.int = FALSE, add = TRUE, col = pal["mskcc.post"])
plotAUCcurve(gg.cdroc.glasgow, conf.int = FALSE, add = TRUE, col = pal["gg"])
legend("topright", legend = c("Glasgow Preop", "Glasgow Postop", "GG"), col = c(pal["mskcc.pre"], pal["mskcc.post"], pal["gg"]), lty = "solid", lwd = 2)
@

<<timeROC-apgi>>=
mskcc_pre.cdroc.apgi = timeROC(data.apgi$Time/365.25*12, data.apgi$DSD, mskcc_pre.linpred.apgi, cause = 1, times = seq(1, 36, 1), iid = TRUE)
mskcc_post.cdroc.apgi = timeROC(data.apgi$Time/365.25*12, data.apgi$DSD, mskcc_post.linpred.apgi, cause = 1, times = seq(1, 36, 1), iid = TRUE)
gg.cdroc.apgi = timeROC(data.apgi$Time/365.25*12, data.apgi$DSD, gg.linpred.apgi, cause = 1, times = seq(1, 36, 1), iid = TRUE)
plotAUCcurve(mskcc_pre.cdroc.apgi, conf.int = FALSE, add = FALSE, col = pal["mskcc.pre"])
plotAUCcurve(mskcc_post.cdroc.apgi, conf.int = FALSE, add = TRUE, col = pal["mskcc.post"])
plotAUCcurve(gg.cdroc.apgi, conf.int = FALSE, add = TRUE, col = pal["gg"])
legend("topright", legend = c("APGI Preop", "APGI Postop", "GG"), col = c(pal["mskcc.pre"], pal["mskcc.post"], pal["gg"]), lty = "solid", lwd = 2)
abline(v = c(7, 31))
@

<<timeROC-dresden>>=
mskcc_pre.cdroc.dresden = timeROC(data.dresden$Time/365.25*12, data.dresden$DSD, mskcc_pre.linpred.dresden, cause = 1, times = seq(1, 36, 1), iid = TRUE)
mskcc_post.cdroc.dresden = timeROC(data.dresden$Time/365.25*12, data.dresden$DSD, mskcc_post.linpred.dresden, cause = 1, times = seq(1, 36, 1), iid = TRUE)
gg.cdroc.dresden = timeROC(data.dresden$Time/365.25*12, data.dresden$DSD, gg.linpred.dresden, cause = 1, times = seq(1, 36, 1), iid = TRUE)
plotAUCcurve(mskcc_pre.cdroc.dresden, conf.int = FALSE, add = FALSE, col = pal["mskcc.pre"])
plotAUCcurve(mskcc_post.cdroc.dresden, conf.int = FALSE, add = TRUE, col = pal["mskcc.post"])
plotAUCcurve(gg.cdroc.dresden, conf.int = FALSE, add = TRUE, col = pal["gg"])
legend("topright", legend = c("Dresden Preop", "Dresden Postop", "GG"), col = c(pal["mskcc.pre"], pal["mskcc.post"], pal["gg"]), lty = "solid", lwd = 2)
abline(v = c(7, 31))
@

Incident-dynamic:
<<risksetROC-bootfunc>>=
risksetROC.boot = function(time, event, marker, tmin = 0, tmax, B = 2000, ...)
{
	data = data.frame(time = time, event = event, marker = marker)
	eval_times = seq(tmin, tmax, length.out = 200)

	boot_obj = boot(data, function(data, indices) {
		data_draw = data[indices,]
		rsAUC = risksetAUC(Stime = data_draw$time, status = data_draw$event, marker = data_draw$marker, tmax = tmax, plot = FALSE, ...)
		AUC_at_eval_times = approx(rsAUC$utimes, rsAUC$AUC, eval_times)$y
		AUC_at_eval_times
	}, R = B)

	res = list(boot = boot_obj, eval_times = eval_times)
	class(res) = "rrROC_boot"
	return(res)
}
@

<<risksetROC-plotfunc>>=
plot.rrROC_boot = function(obj, add = FALSE, ci = FALSE, ci_conf = 0.95, ci_type = c("perc", "norm", "basic", "stud", "bca"), ...)
{
	ci_type = match.arg(ci_type)
	boot_ci = t(sapply(1:length(obj$boot$t0), function(i) { 
		ci = try(boot.ci(obj$boot, index = c(i, i), type = ci_type, conf = ci_conf))
		if (class(ci) == "try-error") {
			if (ci_type == "norm")	{ return(c(NA, NA, NA)) } else { return(c(NA, NA, NA, NA, NA)) }
		}
		return(ci[[c("bca" = "bca", "norm" = "normal", "basic" = "basic", "stud" = "student", "perc" = "percent")[ci_type]]])
	}))
	if (ci_type == "norm")	{ colnames(boot_ci) = c("level", "lci", "uci") } else { colnames(boot_ci) = c("level", "ind1", "ind2", "lci", "uci") }
	summ = as.data.frame(cbind(time = obj$eval_times, mean = obj$boot$t0, boot_ci))

	if (!add) {
		plot(mean ~ time, summ, ylim = c(0.4, 1), type = "l", ...)
	} else {
		lines(mean ~ time, summ, ...)
	}
	if (ci) {
		lines(lci ~ time, summ, lty = "dotted", ...)
		lines(uci ~ time, summ, lty = "dotted", ...)
	}
	abline(h = 0.5)
}
@

<<risksetROC-boot-glasgow>>=
set.seed(20150216)
rrROC_boot.mskcc_pre.glasgow = risksetROC.boot(time = data.glasgow$Time/365.25*12, event = data.glasgow$DSD, marker = mskcc_pre.linpred.glasgow, tmax = 60, method = "Schoenfeld", span = 0.4)
rrROC_boot.mskcc_post.glasgow = risksetROC.boot(time = data.glasgow$Time/365.25*12, event = data.glasgow$DSD, marker = mskcc_post.linpred.glasgow, tmax = 60, method = "Schoenfeld", span = 0.4)
rrROC_boot.gg.glasgow = risksetROC.boot(time = data.glasgow$Time/365.25*12, event = data.glasgow$DSD, marker = gg.linpred.glasgow, tmax = 60, method = "Schoenfeld", span = 0.4)
@

<<risksetROC-plot-glasgow, fig.height = 4, fig.width = 6>>=
plot(rrROC_boot.mskcc_pre.glasgow, col = pal["mskcc.pre"], xlab = "Time from diagnosis (months)", ylab = "AUC", lwd = 3)
plot(rrROC_boot.gg.glasgow, col = pal["gg"], add = TRUE, ci = TRUE, lwd = 3)
legend("topright", legend = c("MSKCC", "PCOP"), col = c(pal["mskcc.pre"], pal["gg"]), lty = "solid", lwd = 3, inset = 0.05)
abline(v = c(7, 31))
@

<<risksetROC-boot-apgi>>=
set.seed(20150216)
rrROC_boot.mskcc_pre.apgi = risksetROC.boot(time = data.apgi$Time/365.25*12, event = data.apgi$DSD, marker = mskcc_pre.linpred.apgi, tmax = 60, method = "Schoenfeld", span = 0.4)
rrROC_boot.mskcc_post.apgi = risksetROC.boot(time = data.apgi$Time/365.25*12, event = data.apgi$DSD, marker = mskcc_post.linpred.apgi, tmax = 60, method = "Schoenfeld", span = 0.4)
rrROC_boot.gg.apgi = risksetROC.boot(time = data.apgi$Time/365.25*12, event = data.apgi$DSD, marker = gg.linpred.apgi, tmax = 60, method = "Schoenfeld", span = 0.4)
@

<<risksetROC-plot-apgi, fig.height = 4, fig.width = 6>>=
plot(rrROC_boot.mskcc_pre.apgi, col = pal["mskcc.pre"], xlab = "Time from diagnosis (months)", ylab = "AUC", lwd = 3)
plot(rrROC_boot.gg.apgi, col = pal["gg"], add = TRUE, ci = TRUE, lwd = 3)
legend("topright", legend = c("MSKCC", "PCOP"), col = c(pal["mskcc.pre"], pal["gg"]), lty = "solid", lwd = 3, inset = 0.05)
abline(v = c(7, 31))
@

<<risksetROC-boot-dresden>>=
set.seed(20150216)
rrROC_boot.mskcc_pre.dresden = risksetROC.boot(time = data.dresden$Time/365.25*12, event = data.dresden$DSD, marker = mskcc_pre.linpred.dresden, tmax = 60, method = "Schoenfeld", span = 0.4)
rrROC_boot.mskcc_post.dresden = risksetROC.boot(time = data.dresden$Time/365.25*12, event = data.dresden$DSD, marker = mskcc_post.linpred.dresden, tmax = 60, method = "Schoenfeld", span = 0.4)
rrROC_boot.gg.dresden = risksetROC.boot(time = data.dresden$Time/365.25*12, event = data.dresden$DSD, marker = gg.linpred.dresden, tmax = 60, method = "Schoenfeld", span = 0.4)
@

<<risksetROC-plot-dresden, fig.height = 4, fig.width = 6>>=
plot(rrROC_boot.mskcc_pre.dresden, col = pal["mskcc.pre"], xlab = "Time from diagnosis (months)", ylab = "AUC", lwd = 3)
plot(rrROC_boot.gg.dresden, col = pal["gg"], add = TRUE, ci = TRUE, lwd = 3)
legend("topright", legend = c("MSKCC", "PCOP"), col = c(pal["mskcc.pre"], pal["gg"]), lty = "solid", lwd = 3, inset = 0.05)
abline(v = c(7, 31))
@

\end{document}
