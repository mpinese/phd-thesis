\documentclass{article}
\usepackage{geometry}
\usepackage{amsmath}
\usepackage{lscape}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}

\begin{document}

<<setup, include=FALSE>>=
library(knitr)
library(tikzDevice)
options(
	tikzDocumentDeclaration = "\\documentclass[11pt]{memoir}",
	tikzLatexPackages = c(
		getOption("tikzLatexPackages"),
		"\\usepackage{amsmath}"),
	tikzMetricsDictionary="tikzMetrics"
)
knit_hooks$set(crop = hook_pdfcrop)
opts_chunk$set(
	fig.align = 'center', fig.path = "figure/05-", dev = 'tikz', dev.args = list(pointsize = 11), 
	cache = TRUE, cache.lazy = FALSE, cache.path = "cache/05-", autodep = TRUE, crop = TRUE)
opts_knit$set(progress = TRUE, verbose = TRUE)
options(warn = 1)
@

\title{NSWPCN Predictor Training}
\maketitle

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% LIBRARIES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Preparation}
<<libs-load>>=
library(survival)
library(glmulti)
library(flexsurv)
library(randomForestSRC)

library(reshape2)
library(plyr)
library(ggplot2)

library(MASS)
library(boot)
library(timeROC)
source("stdca.R")

load("03_NSWPCN_subset.rda")
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DATA SELECTION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Cohort selection and transformation}
<<data-selection>>=
x = data[,c("Patient.Sex", "History.Diagnosis.AgeAt.Cent", "Path.LocationBody", "Path.Size.Cent", "Path.Ca199.Preop", "Molec.S100A2.DCThresh", "Molec.S100A4.DCThresh")]
colnames(x) = c("SexM", "AgeCent", "LocBody", "SizeCent", "Ca199", "A2", "A4")
x$SexM = x$Sex == "M"
x$Ca199 = x$Ca199 > 100

y = Surv(as.numeric(data$History.Death.Date - data$History.Diagnosis.Date), data$History.DSDeath.Event)
# Note no surgery dates, though for almost all pts there were only a few days difference.

temp = NA
temp = ls()
rm(list = temp[!(temp %in% c("x", "y"))])

sel = !is.na(y[,1]) & !is.na(y[,2]) & !is.na(x$A2) & !is.na(x$A4) & !is.na(x$LocBody)
x = x[sel,]
y = y[sel,]
rm(sel)

# Remove CA-19-9 measurements as they're mostly missing
x = x[,colnames(x) != "Ca199"]

data = as.data.frame(cbind(Time = y[,1], DSD = y[,2], x))
rm(x, y)
data$DSD = data$DSD == 1
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DATA SPLITTING
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Data splitting}
There's going to be an awful lot of model manipulation and black magic going on.  Create a holdout validation set for final model comparison and selection.
<<data-split>>=
set.seed(20150201)
sel.val = sample.int(nrow(data), floor(nrow(data)/5))
sel.val = 1:nrow(data) %in% sel.val
mean(sel.val)
data.val = data[sel.val,,drop = FALSE]
data = data[!sel.val,,drop = FALSE]
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% MODEL SPECIFICATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{EDA}
Use the CPH model as a convenient framework for EDA.
\subsection{Functional form}
Investigate functional form with martingale residuals.
<<eda-func-form-age,fig.width=4,fig.height=4>>=
fit.cph.NoAge = coxph(Surv(Time, DSD) ~ SexM + LocBody + SizeCent + A2 + A4, data = data)
scatter.smooth(data$AgeCent, resid(fit.cph.NoAge, type = "martingale"), xlab = "", ylab = "Martingale residual")
scatter.smooth(data$AgeCent, resid(fit.cph.NoAge, type = "martingale"), xlab = "", ylab = "Martingale residual", ylim = c(-1, 1))
@

<<eda-func-form-size,fig.width=4,fig.height=4>>=
fit.cph.NoSize = coxph(Surv(Time, DSD) ~ SexM + AgeCent + LocBody + A2 + A4, data = data)
scatter.smooth(data$SizeCent, resid(fit.cph.NoSize, type = "martingale"), xlab = "", ylab = "Martingale residual")
scatter.smooth(data$SizeCent, resid(fit.cph.NoSize, type = "martingale"), xlab = "", ylab = "Martingale residual", ylim = c(-1, 1))
@
It looks like age has a minor nonlinear component, with a small uptick at advanced age.  Very minor though.  The size relationship appears to have a knee, close to size == 0, around which the relationship is approximately linear.

Model age as:  $AgeCent + AgeCent I(AgeCent > 0) \equiv AgeCent+ AgeCent_+$
Model size as: $SizeCent + SizeCent I(SizeCent > 0) \equiv SizeCent + SizeCent_+$

<<eda-accessory-vars>>=
data$AgePlus = pmax(data$AgeCent, 0)
data$SizePlus = pmax(data$SizeCent, 0)
@


\subsection{PH assumption: full model}
<<eda-ph-check-full>>=
fit.cph = coxph(Surv(Time, DSD) ~ SexM + AgeCent + AgePlus + LocBody + SizeCent + SizePlus + A2 + A4, data = data)
cox.zph(fit.cph)
plot(cox.zph(fit.cph)[1])
plot(cox.zph(fit.cph)[8])
@
Looks OK, just weak possible effects with gender and A4.


\subsection{EDA: Variable selection}
<<eda-varsel-glmulti>>=
nobs.coxph <<- function(obj, ...) sum(obj$y[,2])
set.seed(20150201)
fit.cph.as.bic = glmulti(Surv(Time, DSD) ~ SexM + AgeCent + AgePlus + LocBody + SizeCent + SizePlus + A2 + A4, data = data, marginality = TRUE, method = "g", fitfunction = "coxph", crit = "bic", level = 2, plotty = FALSE, report = TRUE)
fit.cph.as.aicc = glmulti(Surv(Time, DSD) ~ SexM + AgeCent + AgePlus + LocBody + SizeCent + SizePlus + A2 + A4, data = data, marginality = TRUE, method = "g", fitfunction = "coxph", crit = "aicc", level = 2, plotty = FALSE, report = TRUE)
fit.cph.as = fit.cph.as.bic
rm(nobs.coxph)
@

Also run BIC stepwise, because we can.
<<eda-varsel-stepwise>>=
stepAIC(fit.cph, k = log(nrow(data)))
@
Consensus, excellent.

\subsection{PH assumption: reduced model}
<<eda-ph-check-reduced>>=
fit.cph = coxph(Surv(Time, DSD) ~ SizeCent + A2 + A4, data = data)
cox.zph(fit.cph)
plot(cox.zph(fit.cph))
@
Interesting effect on A4.  Betas for A4+ drop at high times.  Could this suggest that high A4 is a met proxy, but \emph{not always} -- there are some A4+ pts who don't met, and thus once they've made it to 800 days or so (by which point the mets should have killed them), they're proven to have a met-free high-A4 phenotype, and consequently have good survival?

Size also has a bit of a non-PH indication, but I'm not particularly fussed as it's graphically not too worrying.

For now maybe just stratify by A4 and be done with it.
<<eda-final-fit>>=
fit.cph = coxph(Surv(Time, DSD) ~ SizeCent + A2 + strata(A4), data = data)
cox.zph(fit.cph)
plot(cox.zph(fit.cph))
@


\subsection{Outliers: reduced model}
<<eda-outliers-reduced>>=
scatter.smooth(resid(fit.cph, type = "deviance"), data$SizeCent, xlab = "SizeCent", main = "Deviance vs SizeCent", ylab = "Deviance residuals")
boxplot(resid(fit.cph, type = "deviance") ~ data$A2, main = "Deviance vs A2", xlab = "A2", ylab = "Deviance residuals")
boxplot(resid(fit.cph, type = "deviance") ~ data$A4, main = "Deviance vs A4", xlab = "A4", ylab = "Deviance residuals")
plot(resid(fit.cph, type = "deviance"))
abline(h = c(-2.5, 2.5))
data$devresid = resid(fit.cph, type = "deviance")
temp = data[abs(data$devresid) >= 2.5,]
temp[order(temp$Time),]
@
Few enough that I'm not particularly concerned.  The DFBETAS will be more telling.

<<eda-dfbetas-reduced>>=
temp = resid(fit.cph, type = "dfbetas")
colnames(temp) = names(fit.cph$coefficients)
temp = melt(temp)
colnames(temp) = c("Patient", "Coefficient", "dfbetas")
temp$Patient = gsub("NSWPCN_", "", temp$Patient)
2/sqrt(nrow(data))		# The classic threshold for concern is 2/sqrt(n).
ggplot(temp, aes(y = abs(dfbetas), x = Patient, col = Coefficient)) + geom_point() + geom_hline(yintercept = 2/sqrt(nrow(data)))
sort(apply(abs(resid(fit.cph, type = "dfbetas")), 1, max), decreasing = TRUE)
sum(apply(abs(resid(fit.cph, type = "dfbetas")), 1, max) > 2/sqrt(nrow(data)))
data$DFBETAS_max = apply(abs(resid(fit.cph, type = "dfbetas")), 1, max)
temp = data[data$DFBETAS_max >= 2/sqrt(nrow(data)) | abs(data$devresid) >= 2.5,]
temp[order(temp$DFBETAS_max),]
@
Some long survivors are causing problems.  Given the data issues, it'd be prudent to remove them -- it's not
practical to go back to the source data and find out if they're legit or not.  These guys are alive at >10 years,
according to the data, which is near unheard-of in PDAC.  I propose to remove all pts alive for 3000 days or longer, and
anything with DFBETAS >= 0.2.

<<eda-remove-outliers>>=
data = data[data$Time < 3000 & data$DFBETAS_max < 0.2,]
data.val = data.val[data.val$Time < 3000,]
@

Now repeat everything...
\subsection{Functional form}
<<eda-func-form-age-2,fig.width=4,fig.height=4>>=
fit.cph.NoAge = coxph(Surv(Time, DSD) ~ SexM + LocBody + SizeCent + A2 + A4, data = data)
scatter.smooth(data$AgeCent, resid(fit.cph.NoAge, type = "martingale"), xlab = "", ylab = "Martingale residual")
scatter.smooth(data$AgeCent, resid(fit.cph.NoAge, type = "martingale"), xlab = "", ylab = "Martingale residual", ylim = c(-1, 1))
@

<<eda-func-form-size-2,fig.width=4,fig.height=4>>=
fit.cph.NoSize = coxph(Surv(Time, DSD) ~ SexM + AgeCent + LocBody + A2 + A4, data = data)
scatter.smooth(data$SizeCent, resid(fit.cph.NoSize, type = "martingale"), xlab = "", ylab = "Martingale residual")
scatter.smooth(data$SizeCent, resid(fit.cph.NoSize, type = "martingale"), xlab = "", ylab = "Martingale residual", ylim = c(-1, 1))
@
It looks like age has a minor nonlinear component, with a small uptick at advanced age.  Very minor though.  The size relationship appears to have a knee, close to size == 0, around which the relationship is approximately linear.

Model age as:  $AgeCent + AgeCent I(AgeCent > 0) \equiv AgeCent+ AgeCent_+$
Model size as: $SizeCent + SizeCent I(SizeCent > 0) \equiv SizeCent + SizeCent_+$

<<eda-accessory-vars-2>>=
data$AgePlus = pmax(data$AgeCent, 5) - 5
data$SizePlus = pmax(data$SizeCent, 0)
@


\subsection{PH assumption: full model}
<<eda-ph-check-full-2>>=
fit.cph = coxph(Surv(Time, DSD) ~ SexM + AgeCent + AgePlus + LocBody + SizeCent + SizePlus + A2 + A4, data = data)
cox.zph(fit.cph)
plot(cox.zph(fit.cph)[1])
@


\subsection{EDA: Variable selection}
<<eda-varsel-glmulti-2>>=
nobs.coxph <<- function(obj, ...) sum(obj$y[,2])
set.seed(20150201)
fit.cph.as.bic = glmulti(Surv(Time, DSD) ~ strata(SexM) + AgeCent + AgePlus + LocBody + SizeCent + SizePlus + A2 + A4, data = data, marginality = TRUE, method = "g", fitfunction = "coxph", crit = "bic", level = 2, plotty = FALSE, report = TRUE)
fit.cph.as.aicc = glmulti(Surv(Time, DSD) ~ strata(SexM) + AgeCent + AgePlus + LocBody + SizeCent + SizePlus + A2 + A4, data = data, marginality = TRUE, method = "g", fitfunction = "coxph", crit = "aicc", level = 2, plotty = FALSE, report = TRUE)
fit.cph.as = fit.cph.as.bic
rm(nobs.coxph)
@

Also run BIC stepwise, because we can.
<<eda-varsel-stepwise-2>>=
fit.cph = coxph(Surv(Time, DSD) ~ strata(SexM) + AgeCent + AgePlus + LocBody + SizeCent + SizePlus + A2 + A4, data = data)
stepAIC(fit.cph, k = log(nrow(data)))
@
Consensus, excellent.

\subsection{PH assumption: reduced model}
<<eda-ph-check-reduced-2>>=
fit.cph = coxph(Surv(Time, DSD) ~ strata(SexM) + SizeCent + A2 + A4, data = data)
cox.zph(fit.cph)
plot(cox.zph(fit.cph))
@


\subsection{Outliers: reduced model}
<<eda-outliers-reduced-2>>=
scatter.smooth(resid(fit.cph, type = "deviance"), data$SizeCent, xlab = "SizeCent", main = "Deviance vs SizeCent", ylab = "Deviance residuals")
boxplot(resid(fit.cph, type = "deviance") ~ data$A2, main = "Deviance vs A2", xlab = "A2", ylab = "Deviance residuals")
boxplot(resid(fit.cph, type = "deviance") ~ data$A4, main = "Deviance vs A4", xlab = "A4", ylab = "Deviance residuals")
plot(resid(fit.cph, type = "deviance"))
abline(h = c(-2.5, 2.5))
data$devresid = resid(fit.cph, type = "deviance")
temp = data[abs(data$devresid) >= 2.5,]
temp[order(temp$Time),]
@
Few enough that I'm not particularly concerned.  The DFBETAS will be more telling.

<<eda-dfbetas-reduced-2>>=
temp = resid(fit.cph, type = "dfbetas")
colnames(temp) = names(fit.cph$coefficients)
temp = melt(temp)
colnames(temp) = c("Patient", "Coefficient", "dfbetas")
temp$Patient = gsub("NSWPCN_", "", temp$Patient)
2/sqrt(nrow(data))      # The classic threshold for concern is 2/sqrt(n).
ggplot(temp, aes(y = abs(dfbetas), x = Patient, col = Coefficient)) + geom_point() + geom_hline(yintercept = 2/sqrt(nrow(data)))
sort(apply(abs(resid(fit.cph, type = "dfbetas")), 1, max), decreasing = TRUE)
sum(apply(abs(resid(fit.cph, type = "dfbetas")), 1, max) > 2/sqrt(nrow(data)))
data$DFBETAS_max = apply(abs(resid(fit.cph, type = "dfbetas")), 1, max)
temp = data[data$DFBETAS_max >= 2/sqrt(nrow(data)) | abs(data$devresid) >= 2.5,]
temp[order(temp$DFBETAS_max),]
@





\subsection{Summary of EDA}
\begin{enumerate}
\item On the basis of pre-operative assessability and data availability, variables were filtered down to Sex, AgeCent, LocBody, SizeCent, A2, A4.
\item Functional forms for the continuous variates AgeCent and SizeCent indicated a possible slight quadratic effect on AgeCent, and a knee on SizeCent.  These were modelled by incorporating additional terms.
\item Analysis of a full model fit (with additional nonlinear terms included) indicated violation of PH for gender.  This was dealt with by stratification.  A slight PH violation by age was deemed unimportant. 
\item Variable selection by BIC (both stepwise and genetic all-subset) settled on a final model of Surv(Time,DSD) $\sim$ 1 + strata(SexM) + SizeCent + A2 + A4.  This model was refit by coxph. 
\item PH was verified on the final model.  Deviance residuals showed no egregious outliers. dfBetaS indicated a number of influential observations, which require checking.
\end{enumerate}

\section{Final fits}
<<final-fits-cph>>=
fit.cph = coxph(Surv(Time, DSD) ~ strata(SexM) + SizeCent + A2 + A4, data = data)
@

<<final-fits-rsf>>=
set.seed(20150111)
fit.rsf = rfsrc(Surv(Time, DSD) ~ SexM + AgeCent + LocBody + SizeCent + A2 + A4, data = data, mtry = 1, splitrule = "logrankscore", nsplit = 2, ntree = 1000)
@

<<final-fits-flexsurv-gg1>>=
fit.gg = flexsurvreg(Surv(Time, DSD) ~ SexM + SizeCent + A2 + A4,
	anc = list(
		sigma = ~ SexM,
		Q = ~ SexM),
	data = data, dist = "gengamma")

fit.gf = flexsurvreg(Surv(Time, DSD) ~ SexM + SizeCent + A2 + A4,
	anc = list(
		sigma = ~ SexM,
		Q = ~ SexM,
		P = ~ SexM),
	data = data, dist = "genf")

fit.gg$loglik
fit.gf$loglik
pchisq(2*(fit.gf$loglik - fit.gg$loglik), 2, lower.tail = FALSE)

AIC(fit.gg)
AIC(fit.gf)
BIC(fit.gg)
BIC(fit.gf)

fit.gg
@

\section{Fit assessment}
Plot fit stratified by sex, separate curves for A2, A4 status, at median (approx.) Size.
<<final-fit-assessment>>=
temp.grid = expand.grid(A4 = c(FALSE, TRUE), A2 = c(FALSE, TRUE), SexM = c(FALSE, TRUE), SizeCent = 0)
temp.grid$ID = sprintf("SexM=%s, A2=% -5s, A4=% -5s", temp.grid$SexM, temp.grid$A2, temp.grid$A4)
temp.preds = summary(fit.gg, newdata = temp.grid, type = "survival", t = seq(0, 365*5, 30))
temp.preds2 = do.call(rbind, temp.preds)
temp.preds2$group = rep(gsub(".*ID=", "", names(temp.preds)), each = nrow(temp.preds[[1]]))
temp.preds.cox = survfit(fit.cph, newdata = temp.grid)

temp.survfit = survfit(Surv(Time, DSD) ~ SexM + A2 + A4, data)
temp.data = data.frame(time = temp.survfit$time, surv = temp.survfit$surv, upper = temp.survfit$lower, lower = temp.survfit$upper, group = rep(names(temp.survfit$strata), temp.survfit$strata), model = "KM")
temp.data = rbind(temp.data, data.frame(time = temp.preds2$time, surv = temp.preds2$est, upper = temp.preds2$ucl, lower = temp.preds2$lcl, group = temp.preds2$group, model = "GG"))
temp.data = rbind(temp.data, data.frame(time = temp.preds.cox$time, surv = temp.preds.cox$surv, upper = temp.preds.cox$upper, lower = temp.preds.cox$lower, group = rep(temp.grid$ID, temp.preds.cox$strata), model = "CPH"))

temp.data$Sex = c("Male", "Female")[grepl("SexM=FALSE", temp.data$group)+1]
temp.data$A2 = c("A2-", "A2+")[grepl("A2=TRUE", temp.data$group)+1]
temp.data$A4 = c("A4-", "A4+")[grepl("A4=TRUE", temp.data$group)+1]

ggplot(temp.data, aes(x = log(time), y = log(-log(surv)), ymin = log(-log(lower)), ymax = log(-log(upper)), colour = model, fill = model)) + 
	geom_ribbon(alpha = 0.25, colour = NA) + 
	geom_line() + 
	xlim(4, 7) + ylim(-4, 2) + 
	facet_grid(A2 ~ A4 ~ Sex)
ggplot(temp.data, aes(x = time, y = surv, ymin = lower, ymax = upper, colour = model, fill = model)) + 
	geom_ribbon(alpha = 0.25, colour = NA) + 
	geom_line() + xlim(0, 2000) + ylim(0, 1) + 
	facet_grid(A2 ~ A4 ~ Sex)
@

Some deviation though not significant.  Most concerning is the A2- A4- female group, survival of which is underestimated by the flexsurv model.  To approach this in a modelling sense would require interaction terms between Sex and A2, A4. Overfitting seems likely considering the very few data available for the A2+/A4- group.  Perhaps just add a single "DoubleNegFemale" term.
<<final-fit-flexsurv-gg2>>=
fit.gg2 = flexsurvreg(Surv(Time, DSD) ~ SexM + SizeCent + A2 + A4 + I(SexM == FALSE & A2 == FALSE & A4 == FALSE),
	anc = list(
		sigma = ~ SexM,
		Q = ~ SexM),
	data = data, dist = "gengamma")

fit.gg2

AIC(fit.gg)
AIC(fit.gg2)
AIC(fit.gg) - AIC(fit.gg2)
# Equivocal on AIC.  BIC would favour gg then.

pchisq(-2*(fit.gg$loglik - fit.gg2$loglik), 1, lower.tail = FALSE)
# Not good evidence on LRT
@

See how it plots relative to the others.
<<final-fit-assessment-2>>=
temp.preds = summary(fit.gg2, newdata = temp.grid, type = "survival", t = seq(0, 365*5, 30))
temp.preds2 = do.call(rbind, temp.preds)
temp.preds2$group = rep(gsub(".*ID=", "", names(temp.preds)), each = nrow(temp.preds[[1]]))
temp.data = rbind(temp.data, data.frame(time = temp.preds2$time, surv = temp.preds2$est, upper = temp.preds2$ucl, lower = temp.preds2$lcl, group = temp.preds2$group, model = "GG2", Sex = NA, A2 = NA, A4 = NA))
temp.data$Sex = c("Male", "Female")[grepl("SexM=FALSE", temp.data$group)+1]
temp.data$A2 = c("A2-", "A2+")[grepl("A2=TRUE", temp.data$group)+1]
temp.data$A4 = c("A4-", "A4+")[grepl("A4=TRUE", temp.data$group)+1]

ggplot(temp.data, aes(x = log(time), y = log(-log(surv)), ymin = log(-log(lower)), ymax = log(-log(upper)), colour = model, fill = model)) + 
	geom_ribbon(alpha = 0.25, colour = NA) + 
	geom_line() + 
	xlim(4, 7) + ylim(-4, 2) + 
	facet_grid(A2 ~ A4 ~ Sex)
ggplot(temp.data, aes(x = time, y = surv, ymin = lower, ymax = upper, colour = model, fill = model)) + 
	geom_ribbon(alpha = 0.25, colour = NA) + 
	geom_line() + xlim(0, 2000) + ylim(0, 1) + 
	facet_grid(A2 ~ A4 ~ Sex)
@

An alternative take, showing errors with the KMs only.
<<final-fit-assessment-3>>=
temp.data$lower[temp.data$model != "KM"] = NA
temp.data$upper[temp.data$model != "KM"] = NA
ggplot(temp.data, aes(x = log(time), y = log(-log(surv)), ymin = log(-log(lower)), ymax = log(-log(upper)), colour = model, fill = model)) + 
	geom_ribbon(alpha = 0.25, colour = NA) + 
	geom_line() + 
	xlim(4, 7) + ylim(-4, 2) + 
	facet_grid(A2 ~ A4 ~ Sex)
ggplot(temp.data, aes(x = time, y = surv, ymin = lower, ymax = upper, colour = model, fill = model)) + 
	geom_ribbon(alpha = 0.25, colour = NA) + 
	geom_line() + xlim(0, 2000) + ylim(0, 1) + 
	facet_grid(A2 ~ A4 ~ Sex)
@

<<final-fit-assessment-4>>=
temp.data$lower[temp.data$model != "KM"] = NA
temp.data$upper[temp.data$model != "KM"] = NA
temp.data = temp.data[temp.data$model != "GG2",]
temp.data$model = c("KM" = "Kaplan-Meier", "GG" = "GG1", "CPH" = "CP1")[temp.data$model]
ggplot(temp.data, aes(x = log(time), y = log(-log(surv)), ymin = log(-log(lower)), ymax = log(-log(upper)), colour = model, fill = model)) + 
	geom_ribbon(alpha = 0.25, colour = NA) + 
	geom_line() + 
	xlim(4, 7) + ylim(-4, 2) + 
	facet_grid(A2 ~ A4 ~ Sex)
ggplot(temp.data, aes(x = time, y = surv, ymin = lower, ymax = upper, colour = model, fill = model)) + 
	geom_ribbon(alpha = 0.25, colour = NA) + 
	geom_line() + xlim(0, 2000) + ylim(0, 1) + 
	facet_grid(A2 ~ A4 ~ Sex)
@


\section{Model selection}
It looks like that's as far as we can go with tweaking the fits.  Time to put the different models against each other on the holdout data, and choose a winner.

DIY IBS, wooo.
<<model-selection-ibs-func>>=
calcIBS = function(surv, pred, pred_times, max_time)
{
	stopifnot(nrow(surv) == nrow(pred) && length(pred_times) == ncol(pred))

	n = nrow(surv)
	marg_survfit = survfit(surv ~ 1)
	marg_censfit = survfit(Surv(surv[,1], !surv[,2]) ~ 1)
	marg_surv_func = approxfun(marg_survfit$time, marg_survfit$surv, method = "constant", yleft = 1, yright = 0, rule = 2:1, f = 0)
	marg_cens_func = approxfun(marg_censfit$time, marg_censfit$surv, method = "constant", yleft = 1, yright = 0, rule = 2:1, f = 0)

	pred_funcs = apply(pred, 1, function(pat_preds) approxfun(pred_times, pat_preds, yleft = 1, yright = min(pat_preds), rule = 2))

	indiv_patient_bsc = function(pat_i, tstars)
	{
		observed_time = surv[pat_i, 1]
		observed_event = surv[pat_i, 2]
		pred_func = pred_funcs[[pat_i]]
		category = 1*(observed_time <= tstars & observed_event) + 2*(observed_time > tstars) + 3*(observed_time <= tstars & !observed_event)
		bsc = rep(NA, length(tstars))
		bsc[category == 1] = pred_func(tstars[category == 1])^2 / marg_cens_func(observed_time)
		bsc[category == 2] = (1 - pred_func(tstars[category == 2]))^2 / marg_cens_func(tstars[category == 2])
		bsc[category == 3] = 0
		bsc
	}

	bsc_func = function(tstars) { rowMeans(sapply(1:n, function(pat_i) indiv_patient_bsc(pat_i, tstars))) }

	weight_func = function(tstars) { (1 - marg_surv_func(tstars)) / (1 - marg_surv_func(max_time)) }

	# Be slack and do trapezoidal int. with a fine grid.  It should be possible 
	# to calulate the int. exactly but I cbfed.
	int_grid = seq(0, max_time, length.out = 1e3)
	bsc_vals = bsc_func(int_grid)
	weight_vals = weight_func(int_grid)
	int_vals = bsc_vals * weight_vals
	ibsc = (2*sum(int_vals) - int_vals[1] - int_vals[length(int_vals)]) * (diff(range(int_grid))) / (2*length(int_vals))

	return(list(bsc = bsc_vals, weights = weight_vals, eval_times = int_grid, ibsc = ibsc))
}
@

Calculate survival probability predictions for each of the models, on the validation data.
<<model-selection-preds>>=
ibs_times = sort(unique(data.val$Time))
ibs_preds_gg = as.matrix(t(sapply(summary(fit.gg, newdata = data.val, type = "survival", t = ibs_times), function(x) x$est)))
ibs_preds_gg2 = as.matrix(t(sapply(summary(fit.gg2, newdata = data.val, type = "survival", t = ibs_times), function(x) x$est)))
temp_cox_preds = survfit(fit.cph, newdata = data.val)
ibs_preds_cph = simplify2array(tapply(1:length(temp_cox_preds$time), rep(names(temp_cox_preds$strata), temp_cox_preds$strata), function(strat_i) { 
	approx(x = temp_cox_preds$time[strat_i], y = temp_cox_preds$surv[strat_i], xout = ibs_times, method = "constant", yleft = 1, rule = 2, f = 0)$y } ))
ibs_preds_cph = t(ibs_preds_cph[,rownames(data.val)])
temp_rsf_preds = predict(fit.rsf, newdata = data.val)
ibs_preds_rsf = t(apply(temp_rsf_preds$survival, 1, function(survs) approx(temp_rsf_preds$time.interest, survs, xout = ibs_times, method = "constant", yleft = 1, rule = 2, f = 0)$y))
# Patients (from data.val) are in rows, times (from ibs_times) in columns.

# Add a no-information KM predictor
temp_km0 = survfit(Surv(Time, DSD) ~ 1, data)
ibs_preds_km0 = t(matrix(rep(approx(temp_km0$time, temp_km0$surv, xout = ibs_times, method = "constant", yleft = 1, rule = 2, f = 0)$y, times = nrow(data.val)), ncol = nrow(data.val)))
ibs_preds_all = list(gg = ibs_preds_gg, gg2 = ibs_preds_gg2, cph = ibs_preds_cph, rsf = ibs_preds_rsf, km0 = ibs_preds_km0)
@


<<model-selection-tests>>=
val.prob.times = seq(0, max(data.val$Time), 1)

temp.coefs = coef(fit.gg)
val.linpred.gg = sapply(1:length(temp.coefs), function(coef_i) {
    if (names(temp.coefs)[coef_i] %in% colnames(data.val)) { 
        temp.coefs[coef_i] * data.val[,names(temp.coefs)[coef_i]] 
    } else if (gsub("TRUE$", "", names(temp.coefs)[coef_i]) %in% colnames(data.val)) { 
        temp.coefs[coef_i] * data.val[,gsub("TRUE$", "", names(temp.coefs)[coef_i])] 
    } else {
        rep(0, nrow(data.val)) 
    } })
val.linpred.gg = -rowSums(val.linpred.gg)   # Negate to bring into concordance with the direction of Cox coefficients (ie higher is now worse)
temp = summary(fit.gg, newdata = data.val, ci = FALSE)
val.prob.gg = sapply(temp, function(x) approx(x[,1], x[,2], xout = val.prob.times, yleft = 1, yright = 0, rule = 2)$y)
colnames(val.prob.gg) = rownames(data.val)

temp.coefs = coef(fit.gg2)
val.linpred.gg2 = sapply(1:length(temp.coefs), function(coef_i) {
    if (names(temp.coefs)[coef_i] %in% colnames(data.val)) { 
        temp.coefs[coef_i] * data.val[,names(temp.coefs)[coef_i]] 
    } else if (gsub("TRUE$", "", names(temp.coefs)[coef_i]) %in% colnames(data.val)) { 
        temp.coefs[coef_i] * data.val[,gsub("TRUE$", "", names(temp.coefs)[coef_i])] 
    } else {
        rep(0, nrow(data.val)) 
    } })
val.linpred.gg2 = -rowSums(val.linpred.gg2)   # Negate to bring into concordance with the direction of Cox coefficients (ie higher is now worse)
temp = summary(fit.gg2, newdata = data.val, ci = FALSE)
val.prob.gg2 = sapply(temp, function(x) approx(x[,1], x[,2], xout = val.prob.times, yleft = 1, yright = 0, rule = 2)$y)
colnames(val.prob.gg2) = rownames(data.val)

val.linpred.cph = predict(fit.cph, newdata = data.val)
temp = survfit(fit.cph, newdata = data.val)
val.prob.cph = simplify2array(tapply(1:length(temp$surv), rep(names(temp$strata), temp$strata), function(is) approx(temp$time[is], temp$surv[is], val.prob.times, yleft = 1, yright = 0, rule = 2)$y))[,rownames(data.val)]

temp = predict(fit.rsf, newdata = data.val)
# val.linpred.rsf = temp$predicted
# Median survival time:
val.linpred.rsf = apply(temp$survival, 1, function(s1) {
    sfunc = approxfun(temp$time.interest, s1, yleft = 1, yright = 0, rule = 2)
    med = uniroot(function(x) sfunc(x) - 0.5, lower = min(temp$time.interest), upper = max(temp$time.interest))$root
    med
})
val.linpred.rsf = -val.linpred.rsf
val.prob.rsf = apply(temp$survival, 1, function(s1) approx(temp$time.interest, s1, xout = val.prob.times, yleft = 1, yright = 0, rule = 2)$y)
colnames(val.prob.rsf) = rownames(data.val)

summary(coxph(Surv(Time, DSD) ~ val.linpred.gg, data.val))
summary(coxph(Surv(Time, DSD) ~ val.linpred.gg2, data.val))
summary(coxph(Surv(Time, DSD) ~ val.linpred.cph, data.val))
summary(coxph(Surv(Time, DSD) ~ val.linpred.rsf, data.val))

anova(coxph(Surv(Time, DSD) ~ offset(val.linpred.gg) + val.linpred.gg, data.val))
anova(coxph(Surv(Time, DSD) ~ offset(val.linpred.gg2) + val.linpred.gg2, data.val))
anova(coxph(Surv(Time, DSD) ~ offset(val.linpred.cph) + val.linpred.cph, data.val))
anova(coxph(Surv(Time, DSD) ~ offset(val.linpred.rsf) + val.linpred.rsf, data.val))

summary(coxph(Surv(Time, DSD) ~ offset(val.linpred.gg) + SexM + AgeCent + LocBody + SizeCent + A2 + A4, data.val))
summary(coxph(Surv(Time, DSD) ~ offset(val.linpred.gg2) + SexM + AgeCent + LocBody + SizeCent + A2 + A4, data.val))
summary(coxph(Surv(Time, DSD) ~ offset(val.linpred.cph) + SexM + AgeCent + LocBody + SizeCent + A2 + A4, data.val))
summary(coxph(Surv(Time, DSD) ~ offset(val.linpred.rsf) + SexM + AgeCent + LocBody + SizeCent + A2 + A4, data.val))
@


TD-ROC AUC
<<model-selection-auc>>=
temp.times = seq(0.1, 48, 0.1)
temp.gg = timeROC(data.val$Time/365.25*12, data.val$DSD, val.linpred.gg, cause = 1, times = temp.times, iid = TRUE)
temp.gg2 = timeROC(data.val$Time/365.25*12, data.val$DSD, val.linpred.gg2, cause = 1, times = temp.times, iid = TRUE)
temp.cph = timeROC(data.val$Time/365.25*12, data.val$DSD, val.linpred.cph, cause = 1, times = temp.times, iid = TRUE)
plotAUCcurve(temp.gg, conf.int = FALSE, add = FALSE, col = "blue")
plotAUCcurve(temp.gg2, conf.int = FALSE, add = TRUE, col = "green")
plotAUCcurve(temp.cph, conf.int = FALSE, add = TRUE, col = "red")
legend("topright", legend = c("GG", "GG2", "CPH"), col = c("blue", "green", "red"), lty = "solid")
@


Decision curve analysis.
<<model-selection-dca>>=
temp.data = data.frame(Time = data.val$Time, DSD = data.val$DSD*1, 
    gg.1 = 1-val.prob.gg[val.prob.times == 365,], gg.2 = 1-val.prob.gg[val.prob.times == 365*2,], gg.3 = 1-val.prob.gg[val.prob.times == 365*3,], 
    gg2.1 = 1-val.prob.gg2[val.prob.times == 365,], gg2.2 = 1-val.prob.gg2[val.prob.times == 365*2,], gg2.3 = 1-val.prob.gg2[val.prob.times == 365*3,], 
    cph.1 = 1-val.prob.cph[val.prob.times == 365,], cph.2 = 1-val.prob.cph[val.prob.times == 365*2,], cph.3 = 1-val.prob.cph[val.prob.times == 365*3,], 
    rsf.1 = 1-val.prob.rsf[val.prob.times == 365,], rsf.2 = 1-val.prob.rsf[val.prob.times == 365*2,], rsf.3 = 1-val.prob.rsf[val.prob.times == 365*3,])
stdca(data = temp.data, outcome = "DSD", ttoutcome = "Time", predictors = c("gg.1", "cph.1", "rsf.1"), timepoint = 365, probability = rep(TRUE, 3))
stdca(data = temp.data, outcome = "DSD", ttoutcome = "Time", predictors = c("gg.2", "cph.2", "rsf.2"), timepoint = 365*2, probability = rep(TRUE, 3))
stdca(data = temp.data, outcome = "DSD", ttoutcome = "Time", predictors = c("gg.3", "cph.3", "rsf.3"), timepoint = 365*3, probability = rep(TRUE, 3))
@


Evaluate IBS point estimates.
BS paths over time on bootstrap samples of the holdout set.
<<model-selection-bs-boots>>=
set.seed(20150111)
ibs_eval_times = calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_gg, ibs_times, max(data.val$Time))$eval_times
# bsc_boot2 = lapply(ibs_preds_all, function(preds) boot(data.val, statistic = function(d, i) calcIBS(Surv(d$Time, d$DSD)[i,], preds[i,], ibs_times, max(d$Time))$bsc, R = 500))
# bsc_boot2ci = lapply(bsc_boot2, function(single_boot) t(sapply(1:length(ibs_eval_times), function(time_index) {
# 	temp = try(boot.ci(single_boot, index = time_index, type = "bca")$bca, silent = TRUE)
# 	if (class(temp) == "try-error" || is.null(temp)) { temp = rep(NA, 5) }
# 	temp })))
bsc_boots = laply(1:500, function(i) {
	if (i %% 50 == 0)	{ message(i) }
	boot_samp = sample.int(nrow(data.val), replace = TRUE)
	gg = calcIBS(Surv(data.val$Time, data.val$DSD)[boot_samp,], ibs_preds_gg[boot_samp,], ibs_times, max(data.val$Time))$bsc
	gg2 = calcIBS(Surv(data.val$Time, data.val$DSD)[boot_samp,], ibs_preds_gg2[boot_samp,], ibs_times, max(data.val$Time))$bsc
	cph = calcIBS(Surv(data.val$Time, data.val$DSD)[boot_samp,], ibs_preds_cph[boot_samp,], ibs_times, max(data.val$Time))$bsc
	rsf = calcIBS(Surv(data.val$Time, data.val$DSD)[boot_samp,], ibs_preds_rsf[boot_samp,], ibs_times, max(data.val$Time))$bsc
	km0 = calcIBS(Surv(data.val$Time, data.val$DSD)[boot_samp,], ibs_preds_km0[boot_samp,], ibs_times, max(data.val$Time))$bsc
	rbind(gg, gg2, cph, rsf, km0)
})
@

<<model-selection-bs-paths>>=
temp = sapply(list(gg = ibs_preds_gg, gg2 = ibs_preds_gg2, cph = ibs_preds_cph, rsf = ibs_preds_rsf, km0 = ibs_preds_km0), function(preds) calcIBS(Surv(data.val$Time, data.val$DSD), preds, ibs_times, max(data.val$Time))$bsc)
temp = melt(temp)
colnames(temp) = c("Time", "Model", "BS")
ggplot(temp, aes(x = Time, y = BS, colour = Model)) + geom_line() + ylab("Brier Score") + geom_hline(yintercept = 0.25)

temp = melt(aaply(bsc_boots, 2:3, quantile, probs = c(0.05, 0.5, 0.95)))
colnames(temp) = c("Model", "Time", "Quantile", "Value")
temp$Quantile = paste("Q", gsub("%", "", temp$Quantile), sep = "")
temp = dcast(temp, Model + Time ~ Quantile, value.var = "Value")
ggplot(temp, aes(x = Time, y = Q50, ymin = Q5, ymax = Q95, colour = Model, fill = Model)) + geom_line() + geom_ribbon(alpha = 0.2, colour = NA) + ylab("Brier Score, 90\\% BI") + geom_hline(yintercept = 0.25)

bsc_boots_diff = aaply(bsc_boots, 2, function(x) x - bsc_boots[,5,])[1:4,,]
temp = melt(aaply(bsc_boots_diff, c(1,3), quantile, probs = c(0.05, 0.5, 0.95)))
colnames(temp) = c("Model", "Time", "Quantile", "Value")
temp$Quantile = paste("Q", gsub("%", "", temp$Quantile), sep = "")
temp = dcast(temp, Model + Time ~ Quantile, value.var = "Value")
ggplot(temp, aes(x = Time, y = Q50, ymin = Q5, ymax = Q95, colour = Model, fill = Model)) + geom_line() + geom_ribbon(alpha = 0.2, colour = NA) + ylab("Brier Score: Improvement over KM0. BS median, 90\\% BI") + geom_hline(yintercept = 0)
ggplot(temp, aes(x = Time, y = Q50, ymin = Q5, ymax = Q95, colour = Model, fill = Model)) + geom_line() + geom_ribbon(alpha = 0.2, colour = NA) + xlim(0, 700) + ylab("Brier Score: Improvement over KM0. BS median, 90\\% BI") + geom_hline(yintercept = 0)
ggplot(temp, aes(x = Time, y = Q50, colour = Model)) + geom_line() + ylab("Brier Score: Improvement over KM0, BS median") + geom_hline(yintercept = 0)
ggplot(temp, aes(x = Time, y = Q50, colour = Model)) + geom_line() + ylab("Brier Score: Improvement over KM0, BS median") + xlim(0, 700) + geom_hline(yintercept = 0)
@

IBS comparisons.
<<model-selection-ibs-boots>>=
set.seed(20150111)
ibsc_boots = t(sapply(1:5e2, function(i) {
	if (i %% 5e1 == 0)	{ message(i) }
	boot_samp = sample.int(nrow(data.val), replace = TRUE)
	gg = calcIBS(Surv(data.val$Time, data.val$DSD)[boot_samp,], ibs_preds_gg[boot_samp,], ibs_times, max(data.val$Time[boot_samp]))$ibs
	gg2 = calcIBS(Surv(data.val$Time, data.val$DSD)[boot_samp,], ibs_preds_gg2[boot_samp,], ibs_times, max(data.val$Time[boot_samp]))$ibs
	cph = calcIBS(Surv(data.val$Time, data.val$DSD)[boot_samp,], ibs_preds_cph[boot_samp,], ibs_times, max(data.val$Time[boot_samp]))$ibs
	rsf = calcIBS(Surv(data.val$Time, data.val$DSD)[boot_samp,], ibs_preds_rsf[boot_samp,], ibs_times, max(data.val$Time[boot_samp]))$ibs
	km0 = calcIBS(Surv(data.val$Time, data.val$DSD)[boot_samp,], ibs_preds_km0[boot_samp,], ibs_times, max(data.val$Time[boot_samp]))$ibs
	c(gg, gg2, cph, rsf, km0)
}))
colnames(ibsc_boots) = c("gg", "gg2", "cph", "rsf", "km0")
@

<<model-selection-ibs>>=
calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_gg, ibs_times, max(data.val$Time))$ibs
calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_gg2, ibs_times, max(data.val$Time))$ibs
calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_cph, ibs_times, max(data.val$Time))$ibs
calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_rsf, ibs_times, max(data.val$Time))$ibs
calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_km0, ibs_times, max(data.val$Time))$ibs

boxplot(ibsc_boots, main = "IBS BS Distribution", ylab = "IBS")
plot(density(ibsc_boots[,1]), col = "blue", lwd = 2, main = "IBS BS Distribution", xlab = "IBS")
lines(density(ibsc_boots[,2]), col = "red", lwd = 2)
lines(density(ibsc_boots[,3]), col = "green", lwd = 2)
lines(density(ibsc_boots[,4]), col = "purple", lwd = 2)
lines(density(ibsc_boots[,5]), col = "black", lwd = 2)
abline(v = calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_gg, ibs_times, max(data.val$Time))$ibs, col = "blue", lwd = 1)
abline(v = calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_gg2, ibs_times, max(data.val$Time))$ibs, col = "red", lwd = 1)
abline(v = calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_cph, ibs_times, max(data.val$Time))$ibs, col = "green", lwd = 1)
abline(v = calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_rsf, ibs_times, max(data.val$Time))$ibs, col = "purple", lwd = 1)
abline(v = calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_km0, ibs_times, max(data.val$Time))$ibs, col = "black", lwd = 1)
legend("topright", legend = c("gg", "gg2", "cph", "rsf", "km0"), col = c("blue", "red", "green", "purple", "black"), lty = "solid", inset = 0.05)

plot(density(ibsc_boots[,5] - ibsc_boots[,1]), col = "blue", lwd = 2, main = "IBS\\_KM0 - IBS\\_x BS Distribution", xlab = "IBS", ylim = c(0, 0.1))
lines(density(ibsc_boots[,5] - ibsc_boots[,2]), col = "red", lwd = 2)
lines(density(ibsc_boots[,5] - ibsc_boots[,3]), col = "green", lwd = 2)
lines(density(ibsc_boots[,5] - ibsc_boots[,4]), col = "purple", lwd = 2)
abline(v = (calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_km0, ibs_times, max(data.val$Time))$ibs - calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_gg, ibs_times, max(data.val$Time))$ibs), col = "blue", lwd = 1)
abline(v = (calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_km0, ibs_times, max(data.val$Time))$ibs - calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_gg2, ibs_times, max(data.val$Time))$ibs), col = "red", lwd = 1)
abline(v = (calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_km0, ibs_times, max(data.val$Time))$ibs - calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_cph, ibs_times, max(data.val$Time))$ibs), col = "green", lwd = 1)
abline(v = (calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_km0, ibs_times, max(data.val$Time))$ibs - calcIBS(Surv(data.val$Time, data.val$DSD), ibs_preds_rsf, ibs_times, max(data.val$Time))$ibs), col = "purple", lwd = 1)
legend("topright", legend = c("gg", "gg2", "cph", "rsf"), col = c("blue", "red", "green", "purple"), lty = "solid", inset = 0.05)
@

Do some proper BCA bootstrapping on the differences, just as a double-check test.
<<model-selection-ibs-boots-2>>=
set.seed(20150111)
ibsc_boots2 = boot(data.val, statistic = function(d, i) {
	gg = calcIBS(Surv(d$Time, d$DSD)[i,], ibs_preds_gg[i,], ibs_times, max(d$Time[i]))$ibs
	gg2 = calcIBS(Surv(d$Time, d$DSD)[i,], ibs_preds_gg2[i,], ibs_times, max(d$Time[i]))$ibs
	cph = calcIBS(Surv(d$Time, d$DSD)[i,], ibs_preds_cph[i,], ibs_times, max(d$Time[i]))$ibs
	rsf = calcIBS(Surv(d$Time, d$DSD)[i,], ibs_preds_rsf[i,], ibs_times, max(d$Time[i]))$ibs
	km0 = calcIBS(Surv(d$Time, d$DSD)[i,], ibs_preds_km0[i,], ibs_times, max(d$Time[i]))$ibs
	c(gg - km0, gg2 - km0, cph - km0, rsf - km0, gg - rsf, gg2 - rsf, cph - rsf, gg - cph, gg2 - cph, gg - gg2)
}, R = 500)
ibsc_boots2_ci = t(sapply(1:length(ibsc_boots2$t0), function(i) boot.ci(ibsc_boots2, index = i, type = "bca")$bca))
rownames(ibsc_boots2_ci) = c("gg-km0", "gg2-km0", "cph-km0", "rsf-km0", "gg-rsf", "gg2-rsf", "cph-rsf", "gg-cph", "gg2-cph", "gg-gg2")
colnames(ibsc_boots2_ci) = c("level", "orderi1", "orderi2", "lci", "uci")
ibsc_boots2
ibsc_boots2_ci
@
All models perform equivalently on the validation set.  Select the simplest: gg.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CALCULATE AND SAVE FINAL MODEL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Final model fitting:
<<final-model>>=
data.all = rbind(data[colnames(data.val)], data.val)
head(data.all)
fit.final.gg = flexsurvreg(Surv(Time, DSD) ~ SexM + SizeCent + A2 + A4,
	anc = list(
		sigma = ~ SexM,
		Q = ~ SexM),
	data = data.all, dist = "gengamma")
fit.final.gg2 = flexsurvreg(Surv(Time, DSD) ~ SexM + SizeCent + A2 + A4 + I(SexM == FALSE & A2 == FALSE & A4 == FALSE),
    anc = list(
        sigma = ~ SexM,
        Q = ~ SexM),
    data = data.all, dist = "gengamma")
fit.final.cph = coxph(Surv(Time, DSD) ~ strata(SexM) + SizeCent + A2 + A4, data = data.all, x = TRUE, y = TRUE, model = TRUE)
set.seed(20150111)
fit.final.rsf = rfsrc(Surv(Time, DSD) ~ SexM + AgeCent + LocBody + SizeCent + A2 + A4, data = data.all, mtry = 1, splitrule = "logrankscore", nsplit = 2, ntree = 1000)
fit.final.km0 = survfit(Surv(Time, DSD) ~ 1, data.all)
saveRDS(list(gg = fit.final.gg, km0 = fit.final.km0, gg2 = fit.final.gg2, cph = fit.final.cph, rsf = fit.final.rsf, data.train = data.all), file = "05_final_model.rds")
@

<<final-save>>=
save.image("05_train_NSWPCN_2.rda")
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% THE END
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Session information}
<<sessioninfo>>=
sessionInfo()
@

\end{document}



