\documentclass{article}
\usepackage{geometry}
\usepackage{amsmath}
\usepackage{lscape}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}

\begin{document}

<<setup, include=FALSE>>=
library(knitr)
library(tikzDevice)
options(
	tikzDocumentDeclaration = "\\documentclass[11pt]{memoir}",
	tikzLatexPackages = c(
		getOption("tikzLatexPackages"),
		"\\usepackage{amsmath}"),
	tikzMetricsDictionary="tikzMetrics"
)
knit_hooks$set(crop = hook_pdfcrop)
opts_chunk$set(
	fig.align = 'center', fig.path = "figure/07-E3-", dev = 'tikz', dev.args = list(pointsize = 12), 
	cache = TRUE, cache.lazy = FALSE, cache.path = "cache/07-E3-", autodep = TRUE, crop = TRUE,
	fig.width = 6, fig.height = 6)
opts_knit$set(progress = TRUE, verbose = TRUE)
options(warn = 1)
@


\title{Messina E3: Messina vs ? on APGI}
\maketitle


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% LIBRARIES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Preparation}
<<libs-load,cache=FALSE>>=
library(plyr)
library(ggplot2)
library(messina)
library(maxstat)
library(doMC)
paropts = list(.options.multicore = list(preschedule = FALSE))
@


\section{Data preparation}
<<data-prep>>=
load("../biosurv/data/07_data_for_SIS.rda")
APGI.x = x.diag_dsd
APGI.y = y.diag_dsd
APGI.samps = samps.diag_dsd
APGI.feats = data.frame(symbol = rownames(APGI.x))

temp = NA
temp = ls()
rm(list = temp[!(temp %in% c("APGI.x", "APGI.y", "APGI.samps", "APGI.feats"))])

load("../biosurv/data/15_validation.rda")
rm(GSE28735.lingex, GSE21501.lingex)
GSE28735.x = GSE28735.gex
GSE21501.x = GSE21501.gex
GSE28735.feats = GSE28735.feat
GSE21501.feats = GSE21501.feat
rm(GSE28735.gex, GSE21501.gex, GSE28735.feat, GSE21501.feat)

load("../biosurv/data/validation/tcga-clin-gex.20141118.rda")
TCGA.x = data.merged$paad$gex$illuminahiseq_rnaseqv2
rownames(TCGA.x) = gsub("\\|.*", "", rownames(TCGA.x))
TCGA.x = TCGA.x[rownames(TCGA.x) != "?",]
TCGA.x = log2(TCGA.x + 1)
temp.time = as.numeric(as.character(data.merged$paad$clin$days_to_death))
temp.time[is.na(temp.time)] = as.numeric(as.character(data.merged$paad$clin$days_to_last_followup[is.na(temp.time)]))
TCGA.y = Surv(temp.time, data.merged$paad$clin$vital_status == "Dead")
TCGA.feats = data.frame(symbol = rownames(TCGA.x))
rm(data.merged)

keepMostVariableGeneMeasurement = function(gex, feats, ids)
{
	sds = apply(gex, 1, sd, na.rm = TRUE)
	perm = order(-sds)
	gex = gex[perm,,drop = FALSE]
	feats = feats[perm,,drop = FALSE]
	ids = ids[perm]
	drop = duplicated(ids) | is.null(ids)
	gex = gex[!drop,,drop = FALSE]
	feats = feats[!drop,,drop = FALSE]
	ids = ids[!drop]
	list(gex = gex, feats = feats, ids = ids)
}

# Now moved to the validation function
# regularizeX = function(x)
# {
# 	require(robustbase)
# 	location = apply(x, 1, median, na.rm = TRUE)
# 	scale = apply(x, 1, scaleTau2, na.rm = TRUE)
# 	(x - location) / scale
# }

temp = keepMostVariableGeneMeasurement(APGI.x, APGI.feats, APGI.feats$symbol)
APGI.x = temp$gex
APGI.feats = temp$feats
temp = keepMostVariableGeneMeasurement(GSE28735.x, GSE28735.feats, GSE28735.feats$Gene.symbol)
GSE28735.x = temp$gex
GSE28735.feats = temp$feats
temp = keepMostVariableGeneMeasurement(GSE21501.x, GSE21501.feats, GSE21501.feats$Gene.symbol)
GSE21501.x = temp$gex
GSE21501.feats = temp$feats

GSE28735.y = Surv(GSE28735.samp$time, GSE28735.samp$event)
GSE21501.y = Surv(GSE21501.samp$time, GSE21501.samp$event)

# APGI.xreg = regularizeX(APGI.x)
# GSE28735.xreg = regularizeX(GSE28735.x)		# This one validated for survsigs
# GSE21501.xreg = regularizeX(GSE21501.x)
@


<<E3-calcs>>=
# Temporary testing measure.  Probably will be used in real application, but somewhat defeats
# the whole purpose of Messina for testing, so should be removed when comparing vs other methods.
# temp.sel = apply(APGI.x, 1, sd) >= 1 & grepl("^D", rownames(APGI.x))
# APGI.x = APGI.x[temp.sel,,drop = FALSE]
# APGI.feats = APGI.feats[temp.sel,,drop = FALSE]

# messinaSurv(APGI.x, APGI.y, messinaSurvObj.CoxCoef(round(log(2), 3)), parallel = TRUE, silent = FALSE, seed = 20150321)
# messinaSurv(APGI.x, APGI.y, messinaSurvObj.Tau(0.6), parallel = TRUE, silent = FALSE, seed = 20150321)
# messinaSurv(APGI.x, APGI.y, messinaSurvObj.RelTau(0.7), parallel = TRUE, silent = FALSE, seed = 20150321)

registerDoMC(32)

library(plyr)
APGI.messina.cc2 = messinaSurv(APGI.x, APGI.y, messinaSurvObj.CoxCoef(round(log(2), 3)), parallel = TRUE, silent = FALSE, seed = 20150321)
APGI.messina.cc3 = messinaSurv(APGI.x, APGI.y, messinaSurvObj.CoxCoef(round(log(3), 3)), parallel = TRUE, silent = FALSE, seed = 20150321)
APGI.messina.tau6 = messinaSurv(APGI.x, APGI.y, messinaSurvObj.Tau(0.6), parallel = TRUE, silent = FALSE, seed = 20150321)
APGI.messina.tau7 = messinaSurv(APGI.x, APGI.y, messinaSurvObj.Tau(0.7), parallel = TRUE, silent = FALSE, seed = 20150321)
APGI.messina = APGI.messina.cc2
APGI.maxstat = alply(APGI.x, 1, function(x1) {
	data = data.frame(time = APGI.y[,1], event = APGI.y[,2], x = x1)
	test = try(maxstat.test(Surv(time, event) ~ x, data = data, smethod = "LogRank", pmethod = "HL"))
	result = list(p.value = NA, threshold = NA)
	if (class(test) != "try-error")
	{
		result$p.value = test$p.value
		result$threshold = test$estimate
	}
	result
}, .parallel = TRUE)
@


<<E3-summary>>=
print(dim(APGI.x))
hist(APGI.messina@fits@summary$margin)
hist(APGI.messina@fits@summary$margin[APGI.messina@fits@summary$passed == TRUE])
sum(APGI.messina@fits@summary$passed == TRUE)
mean(APGI.messina@fits@summary$passed == TRUE)
sum(APGI.messina@fits@summary$margin >= 1)
mean(APGI.messina@fits@summary$margin >= 1)
sum(APGI.messina@fits@summary$margin >= 1 & APGI.messina@fits@summary$passed == TRUE)
mean(APGI.messina@fits@summary$margin >= 1 & APGI.messina@fits@summary$passed == TRUE)
hist(sapply(APGI.maxstat, function(x) x$p.value))
hist(log10(sapply(APGI.maxstat, function(x) x$p.value)))
sum(sapply(APGI.maxstat, function(x) x$p.value) < 0.05, na.rm = TRUE)
sum(sapply(APGI.maxstat, function(x) x$p.value) < 0.05, na.rm = TRUE) / length(APGI.maxstat)
@


<<E3-plots,fig.height=4,fig.width=5>>=
plot(APGI.messina, indices = 1:sum(APGI.messina@fits@summary$margin >= 1 & APGI.messina@fits@summary$passed == TRUE), sort_features = TRUE)
plot(APGI.messina, indices = which.min(sapply(APGI.maxstat, function(x) x$p.value)), sort_features = FALSE)
@


<<E3-val>>=
doValidation = function(train.features, train.x, train.threshold, train.merit, min_merit, test.features, test.x, test.y)
{
 	require(robustbase)

	sel.merit = train.merit >= min_merit
	sel.val_avail = train.features %in% test.features
	sel = sel.merit & sel.val_avail
	print(fisher.test(table(sel.merit, sel.val_avail)))

	val.train.features = train.features[sel]
	val.train.x = train.x[sel,,drop=FALSE]
	val.train.threshold = train.threshold[sel]
	val.train.merit = train.merit[sel]
	val.perm = match(val.train.features, test.features)
	val.test.features = test.features[val.perm]
	val.test.x = test.x[val.perm,,drop=FALSE]
	
	stopifnot(val.test.features == val.train.features)

	# Translate the threshold on the training x to an approximate equivalent
	# on the test x, by normalization
	locscale.train = apply(val.train.x, 1, function(x) scaleTau2(x[!is.na(x)], mu.too = TRUE))
	loc.train = locscale.train[1,]
	scale.train = locscale.train[2,]

	locscale.test = apply(val.test.x, 1, function(x) scaleTau2(x[!is.na(x)], mu.too = TRUE))
	loc.test = locscale.test[1,]
	scale.test = locscale.test[2,]

	val.test.threshold = (val.train.threshold - loc.train) / scale.train * scale.test + loc.test

	val.chisq = mapply(function(row_index, threshold) {
		x = val.test.x[row_index,]
		xd = x > threshold
		if (all(xd) || all(!xd))	{ return(NA) }
		fit = survdiff(test.y ~ xd)
		fit$chisq
	}, 1:length(val.test.threshold), val.test.threshold)

	result = data.frame(merit = val.train.merit, threshold.train = val.train.threshold, threshold.test = val.test.threshold, chisq = val.chisq)
	rownames(result) = val.test.features
	result = result[order(-result$merit),]
	result
}

val.GSE28735.messina = doValidation(as.character(APGI.feats$symbol), APGI.x, APGI.messina@fits@summary$threshold, APGI.messina@fits@summary$margin, 1, as.character(GSE28735.feats$Gene.symbol), GSE28735.x, GSE28735.y)
val.GSE28735.maxstat = doValidation(as.character(APGI.feats$symbol), APGI.x, sapply(APGI.maxstat, function(x) x$threshold), -log10(sapply(APGI.maxstat, function(x) x$p.value)), -log10(0.05), as.character(GSE28735.feats$Gene.symbol), GSE28735.x, GSE28735.y)
val.GSE21501.messina = doValidation(as.character(APGI.feats$symbol), APGI.x, APGI.messina@fits@summary$threshold, APGI.messina@fits@summary$margin, 1, as.character(GSE21501.feats$Gene.symbol), GSE21501.x, GSE21501.y)
val.GSE21501.maxstat = doValidation(as.character(APGI.feats$symbol), APGI.x, sapply(APGI.maxstat, function(x) x$threshold), -log10(sapply(APGI.maxstat, function(x) x$p.value)), -log10(0.05), as.character(GSE21501.feats$Gene.symbol), GSE21501.x, GSE21501.y)
val.TCGA.messina = doValidation(as.character(APGI.feats$symbol), APGI.x, APGI.messina@fits@summary$threshold, APGI.messina@fits@summary$margin, 1, as.character(TCGA.feats$symbol), TCGA.x, TCGA.y)
val.TCGA.maxstat = doValidation(as.character(APGI.feats$symbol), APGI.x, sapply(APGI.maxstat, function(x) x$threshold), -log10(sapply(APGI.maxstat, function(x) x$p.value)), -log10(0.05), as.character(TCGA.feats$symbol), TCGA.x, TCGA.y)

val.GSE28735.messina
val.GSE21501.messina

val.GSE28735.maxstat
val.GSE21501.maxstat

val.TCGA.messina
val.TCGA.maxstat
@

\end{document}
